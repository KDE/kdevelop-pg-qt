
#line 3 "csharp_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 200
#define YY_END_OF_BUFFER 201
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1194] =
    {   0,
        0,    0,    5,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  182,  182,  201,  199,
        1,    2,    2,   22,  199,   50,   44,  199,    9,   10,
       40,   36,   15,   38,   17,   42,  197,  197,   18,   16,
       25,   35,   27,   20,  199,  196,   13,   14,   48,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,   11,   46,
       12,   23,  199,  199,  199,  199,  199,  199,  199,  199,
        1,  199,    5,    7,    7,    6,  163,  163,  162,  162,
      163,  168,  164,  167,  167,  168,  168,  166,  166,  166,

      168,  168,  168,  168,  168,  168,  168,  168,  181,  169,
      180,  180,  174,  181,  177,  178,  181,  181,  181,  179,
      179,  179,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  191,  185,  186,  186,  191,  191,  187,  191,  190,
      190,  191,  191,  191,  191,  191,  191,  191,  191,  192,
      193,  193,  194,  195,  195,  182,  184,  184,  183,  182,
      183,    1,    2,   29,    0,  147,  146,    0,    0,    0,
        0,    0,    0,    0,   51,   30,   45,    0,  145,    0,
        0,    0,    0,    0,    0,    0,   41,   33,   37,   34,
       39,   32,  198,    4,    3,   43,    0,  197,  198,    0,

      197,  197,    0,   19,   52,   26,   24,   28,   54,   21,
        0,  196,    0,    0,    0,    0,    0,    0,    0,    0,
      196,    0,    0,    0,    0,    0,    0,    0,    0,   49,
      196,  196,  196,   57,  196,  196,  196,  196,  196,  196,
      196,  196,  196,   72,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,   86,  196,   88,   92,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,   47,
       31,  196,  196,    0,    0,    0,    0,    0,    0,    0,

        0,    1,    0,    0,    0,  161,  161,  161,  161,  161,
      161,  161,  161,  161,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    7,    6,    6,    8,    0,  162,  162,
        0,    0,  164,  167,  167,    0,    0,  166,    0,    0,
        0,    0,    0,    0,    0,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,  166,  166,  166,  166,    0,
        0,    0,    0,    0,    0,    0,    0,  169,  180,  180,
        0,  171,  172,    0,  170,  179,    0,    0,    0,    0,
        0,    0,    0,    0,  179,    0,    0,    0,    0,    0,
        0,    0,    0,  179,  179,  173,  179,  179,    0,    0,

        0,    0,    0,    0,    0,    0,  185,  186,  186,    0,
        0,    0,  187,  190,    0,    0,    0,    0,    0,    0,
        0,    0,  190,    0,    0,    0,    0,    0,    0,    0,
        0,  190,  190,  190,    0,    0,    0,    0,    0,    0,
        0,    0,  192,  193,  194,  195,  182,  184,  182,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  198,    0,    3,  198,    0,  198,  197,  197,
      197,   53,   55,    0,  148,  196,    0,    0,    0,    0,
        0,    0,    0,    0,  196,    0,    0,    0,    0,    0,

        0,    0,    0,  196,    0,    0,    0,    0,    0,    0,
        0,    0,  196,  133,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,   83,
      135,  196,  196,  196,   89,  196,  196,  196,   96,  196,
      196,  196,  100,  196,  196,  196,  196,  196,  196,  107,
      196,  196,  196,  196,  139,  196,  196,  196,  196,  196,
      196,  196,  196,  121,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      161,    0,    0,    0,    0,    0,    0,    0,    0,  161,

        0,    0,    0,    0,    0,    0,    0,    0,  161,  161,
      161,  161,  151,  161,  161,  161,  161,  161,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  166,
        0,    0,    0,    0,    0,    0,    0,    0,  166,    0,
        0,    0,    0,    0,    0,    0,    0,  166,    0,    0,
        0,    0,    0,    0,    0,    0,  166,  166,  166,  166,
        0,  179,    0,    0,    0,    0,    0,    0,    0,    0,
      179,    0,    0,    0,    0,    0,    0,    0,    0,  179,
        0,    0,    0,    0,    0,    0,    0,    0,  179,  179,
      179,  179,  188,    0,  190,    0,    0,    0,    0,    0,

        0,    0,    0,  190,    0,    0,    0,    0,    0,    0,
        0,    0,  190,    0,    0,    0,    0,    0,    0,    0,
        0,  190,  190,  190,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  198,  198,    0,  198,
      197,  197,  196,    0,    0,    0,    0,    0,    0,    0,
        0,  196,  196,  196,  196,  196,  196,  196,   58,   59,
      196,   61,   62,  196,   64,  196,  196,  196,  196,  196,
      196,  196,  196,   74,   75,  196,  196,  196,  196,  196,
      196,  196,  196,  196,   85,  196,  196,   93,   94,  196,

       97,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  118,  196,  120,  196,  123,  196,  196,  196,  196,
      196,  196,  196,  130,  196,  196,  196,  196,  161,    0,
        0,    0,    0,    0,    0,    0,    0,  161,    0,    0,
        0,    0,    0,    0,    0,    0,  161,    0,    0,    0,
        0,    0,    0,    0,    0,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  166,    0,    0,
        0,    0,    0,    0,    0,    0,  166,  166,  166,  166,
      166,  165,  179,    0,    0,    0,    0,    0,    0,    0,

        0,  179,  179,  179,  179,  179,  175,  190,    0,    0,
        0,    0,    0,    0,    0,    0,  190,  190,  190,  190,
      190,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  198,  197,
      197,  196,  196,  196,  134,  196,   60,   63,  196,   66,
       67,  196,  196,  196,  196,  196,   76,  196,  196,   79,
      196,   81,   82,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  109,
      196,  111,  196,  196,  196,  196,  196,  196,  119,  196,
      124,  196,  196,  196,  128,  140,  196,  196,  141,  132,

      142,  161,    0,    0,    0,    0,    0,    0,    0,    0,
      161,  161,  161,  161,  161,  152,  153,  161,  161,  161,
      155,  161,  161,  161,  161,  166,  166,  179,  179,  176,
      190,  190,  190,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  196,  196,  196,  196,
      196,  196,  196,   73,  196,   78,  196,  196,  136,  196,
      196,  196,  196,   98,  196,  196,  102,  196,  196,  196,
      105,  196,  138,  108,  110,  112,  196,  114,  115,  116,
      117,  122,  196,  126,  127,  196,  196,  161,  161,  161,
      154,  161,  156,  161,  161,  150,  161,  190,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      196,  196,   65,  196,   69,   70,  196,  196,   80,   84,
      196,  196,  196,  196,  196,  196,  137,  103,  196,  196,
      196,  196,  129,  196,  149,  161,  156,  160,  158,  161,
      189,    0,    0,    0,    0,    0,    0,    0,    0,   56,
      143,   68,   71,   77,   87,  196,   91,  196,   99,  101,
      196,  106,  196,  196,  131,  161,  160,  158,  157,    0,
        0,    0,    0,    0,    0,   90,   95,  104,  196,  125,
      161,  157,    0,    0,    0,    0,  113,  159,    0,    0,
      159,    0,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   29,   30,   31,
       32,   32,   32,   32,   32,   33,   34,   32,   32,   32,
       32,   32,   32,   32,   35,   32,   32,   36,   32,   32,
       37,   38,   39,   40,   32,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   32,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,   70,   71,   71,
       71,   71,   71,   72,   70,   70,   70,   70,   70,   73,
       73,   70,   70,   74,   74,   74,   74,   74,   74,   74,
       75,   76,   76,   76,   76,   76,   76,   76,   76,   77,
       77,   77,   77,   78,   78,   78,   78,   78,   78,   78,
       78,   77,   77,   79,   79,   79,   79,   79,   79,   80,
       81,   81,   82,   83,   83,   83,   83,   83,   83,   83,
       83,    1,    1,   84,   85,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   87,   88,   89,   90,   91,   92,   92,
       92,   92,   92,   89,   89,   89,   89,   89,   93,   94,
       95,   95,   95,   96,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[97] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    6,    7,    7,
        1,    1,    1,    1,    1,    1,    1,    8,    8,    8,
        8,    9,    8,    9,    8,    9,    1,    1,    1,    1,
        8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
        9,    8,    9,    9,    9,    9,    9,    9,    9,    8,
        9,    9,    9,    9,    9,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,    9,    9,    1,    9,
        9,    9,    9,    1,    1,    1

    } ;

static yyconst flex_int16_t yy_base[1276] =
    {   0,
        0,   95,   95,   97,  101,  109,  127,    0,  223,    0,
      319,    0,  103,  111,  113,  117,  119,  414, 7327, 8218,
     7324, 8218, 7322, 7300,  419, 7299,  100,  513, 8218, 8218,
     7298,  405, 8218,  408,  407,  417,  593,  384, 7300, 8218,
      413, 7288,  414, 7285,  434,  358, 8218, 8218, 7285,  443,
      411,  436,  495,  418,  500,  512,  519,  524,  573,  599,
      606,  536,  623,  632,  649,  653,  662,  673, 8218,  404,
     8218, 8218,  656,  670,  677,  691,  704, 7225,  715, 7229,
      452,  797,    0, 8218, 7303,  443, 8218,  617, 8218, 7302,
     7286, 8218,  798, 8218, 7296, 7280,  499,  718,  778,  401,

      821,  835,  795,  849,  862, 7214,  873, 7218, 8218,  818,
     8218, 7292, 7270, 7284, 8218, 8218, 7260, 7253,  872,  881,
      920,  426, 7209,  905,  919,  937,  951,  964, 7188,  975,
     7192, 8218, 1057, 8218, 7262,    0, 7244,  445,  977,  986,
     1021, 1010, 1045, 1017, 1059, 1072, 7178, 1083, 7182,    0,
     8218, 7256,    0, 8218, 7241,    0, 8218, 7240, 8218,  490,
        0, 7240, 8218, 8218, 1164, 8218, 8218, 1258, 1319, 1101,
     1115, 1133, 1147, 1161, 8218, 8218, 8218, 1413, 8218, 1507,
     1568, 1208, 1256, 1270, 1288, 1302, 8218, 8218, 8218, 8218,
     8218, 8218, 1399, 8218,    0, 8218,  454, 1648, 8218,  798,

      458,  510, 1418, 8218, 7213, 8218, 8218, 8218, 7212, 8218,
     7225, 1380, 1404, 1457, 1192, 1509, 1522, 7145, 1537, 7149,
     1403, 1551, 1639, 1228, 1653, 1666, 7143, 1677, 7147, 8218,
     1703,  438,  440, 7152, 7151,  376,  441,  487,  501,  591,
      603,  576,  666,  442, 7150,  535,  538, 1045,  480,  615,
      628,  517,  629,  658,  641, 7145,  584,  776, 7144, 1377,
      558,  661,  755,  604,  634,  821, 1047,  946, 1243, 1205,
     1381, 1239, 1383, 1258,   60, 1500, 1218, 1463, 1458, 1143,
     1266, 1395,  838, 1466, 1374, 1188, 1494, 1502, 1411, 8218,
     8218, 7139, 7136, 1692, 1727, 1503, 1741, 1755, 1706, 1769,

     1783, 1548,    0,    0, 1782, 1791, 1826, 1645, 1220, 1376,
     1257, 7148, 1509, 1413, 1815, 1850, 1592, 1864, 1828, 7109,
     1878, 7113,    0, 8218,    0, 1667, 8218, 1685, 8218, 7173,
     7157, 1291, 1960, 8218, 7171, 7151, 1351, 1880, 1909, 1923,
     1930, 1944, 1957, 7085, 1968, 7085, 1967, 1991, 2005, 2012,
     2026, 2039, 7077, 2050, 7081, 2082,  763, 7106, 7105, 2065,
     2079, 1634, 2106, 2120, 2134, 2143, 2157, 1973, 8218, 7139,
     7123, 8218, 8218, 1383, 8218, 2156, 2180, 2194, 2201, 2215,
     2228, 7057, 2239, 7057, 2238, 2262, 2276, 2283, 2297, 2310,
     7051, 2321, 7051, 2353, 1050, 8218, 7074, 7073, 2336, 2350,

     2093, 2377, 2391, 2405, 2414, 2428, 2510, 8218, 7121, 7105,
     7108, 1600, 1616, 2430, 2459, 2473, 2480, 2494, 2507, 7030,
     2518, 7033, 2517, 2541, 2555, 2562, 2576, 2589, 7027, 2600,
     7031, 2638, 7062, 7061, 2615, 2629, 2364, 2662, 2676, 2643,
     2690, 2704,    0, 8218,    0, 8218,    0, 8218, 1684, 2785,
     2879, 2973, 2773, 2801, 3067, 3161, 3255, 8218, 2849, 3349,
     2848, 2862, 2876, 2950, 2964, 3436, 3501, 2820, 3055, 3083,
     3060, 3098, 8218, 2780,    0, 3163, 1676, 3167, 8218, 8218,
     2773, 8218, 8218, 7100, 7095, 2895, 3190, 3204, 2819, 3224,
     3150, 7017, 3238, 7021, 2963, 3252, 3290, 2454, 3318, 3332,

     3045, 3377, 3391, 3289, 3405, 3419, 2739, 3478, 3515, 3463,
     3529, 3543, 3568, 7039,  611, 1639, 2768,  928, 1503, 2777,
     2779, 2798, 1398, 2845, 1727, 1851, 1510, 1856, 2848,  679,
     2939, 1433, 1733, 1574, 2946, 2739, 2846, 2949, 2919, 2950,
     7038,  844, 1464, 2014, 2951, 2775, 1518, 2954, 7037, 2203,
     3031, 2748, 7036, 2778, 2948, 2795, 7021, 2285, 1925, 7020,
     2856, 2799, 7019, 2482, 7014, 2835, 3032, 2947, 3029, 7013,
     2855, 3049, 3035, 7008, 3036, 7005, 2668, 3136, 3051, 3089,
     2736, 2902, 7004, 2953, 3144, 3050, 2564, 2808, 7003, 7002,
     3477, 3558, 3592, 3445, 3606, 3571, 6962, 3620, 6966, 3619,

     3643, 3657, 3664, 3678, 3691, 6960, 3702, 6958, 3740, 3142,
     3101, 3158, 6989, 3033, 3164, 3103, 3168, 3160, 6988, 3717,
     3731, 3218, 3764, 3778, 3745, 3792, 3806, 3186, 3215, 3805,
     3829, 3843, 3850, 3864, 3877, 6950, 3888, 6954, 3887, 3911,
     3925, 3284, 3939, 3953, 3967, 3976, 3990, 3989, 4013, 4027,
     3313, 4041, 4055, 4069, 4078, 4092, 4118, 4132, 6971, 6970,
     3333, 4093, 4142, 4156, 4114, 4170, 4183, 6940, 4194, 6944,
     4193, 4217, 4231, 4128, 4245, 4259, 4273, 4282, 4296, 4295,
     4319, 4333, 4347, 4351, 4365, 4379, 4388, 4402, 4428, 4144,
     6963, 6962, 8218, 3413, 4402, 4426, 4452, 4459, 4473, 4486,

     6936, 4497, 6940, 4496, 4520, 4534, 4548, 4552, 4566, 4580,
     4589, 4603, 4602, 4626, 4640, 4654, 4658, 4672, 4686, 4695,
     4709, 4752, 6960, 6954, 4806, 4867, 4724, 4804, 4818, 4836,
     4850, 4945, 4951, 5026, 5120, 5214, 5308, 5032, 5060, 5108,
     5386, 5136, 5142, 5212, 4928, 3484, 5215, 8218, 4798, 8218,
     4147, 3600, 4736, 5199, 5213, 4760, 5285, 5299, 4963, 5363,
     5400, 5007, 5055, 5229, 5298, 5362, 4130, 4455, 6929, 6921,
     4460, 6895, 6894, 4453, 6893, 4762, 4777, 4792, 4797, 4758,
     2829, 1619, 3772, 6878, 6877, 4796, 4801, 6838, 4763, 4804,
     4815, 4805, 4926, 4927, 6836, 4920, 6811, 6803, 6802, 4845,

     6784, 5001, 4990, 6775, 4996, 4993, 5002, 4921, 5076, 4879,
     5024, 6766, 5039, 5087, 4955, 5052, 5078, 5111, 5029, 5132,
     5176, 6670, 5025, 6662, 5102, 6611, 1833, 5180, 4811, 6574,
     3025, 5181, 5074, 6546, 5117, 5182, 5191, 4928, 5399, 5423,
     5437, 5252, 5451, 5464, 6503, 5475, 6507, 5474, 5498, 5512,
     5192, 5526, 5540, 5554, 5563, 5577, 5576, 5600, 5614, 5253,
     5628, 5642, 5656, 5665, 5679, 5714, 5174, 5202, 5172, 5114,
     5295, 5181, 6518, 5296, 5196, 6517, 6452, 5679, 5703, 5738,
     5337, 5752, 5766, 5717, 5780, 5794, 5793, 5802, 5811, 5820,
     5837, 6416, 5846, 5870, 5884, 5350, 5898, 5912, 5926, 5935,

     5949, 5948, 5957, 5966, 5975, 5992, 6398, 6001, 6025, 6039,
     5844, 6053, 6067, 6081, 6090, 6104, 6103, 6112, 6121, 6130,
     6141, 6232, 6326, 6220, 6248, 6254, 6404, 6332, 6360, 6485,
     6563, 6410, 6491, 6628, 6519, 6569, 6702, 5046, 6631, 8218,
     8218, 6167, 6216, 5256, 6369, 5369, 6248, 6189, 5367, 6135,
     6017, 5864, 5878, 5290, 6014, 5368, 6007, 6033, 6015, 5989,
     5291, 5869, 5711, 6167, 5746, 6187, 6285, 5210, 6016, 6184,
     6188, 5739, 6215, 6212, 6290, 6291, 6256, 6230, 6257, 5608,
     6292, 5506, 5863, 6296, 6301, 3661, 6229, 5843, 5448, 6024,
     5431, 6338, 6293, 6284, 5361, 5330, 6325, 6335, 5203, 5073,

     5051, 6372, 6546, 6679, 6326, 6693, 6707, 6422, 6721, 6735,
     6466, 6595, 4999, 4964, 6193, 4886, 4855, 6266, 6338, 6336,
     4787, 6378, 6170, 6379, 4642, 6604, 6649, 6734, 6743, 4540,
     6752, 6761, 6334, 6836, 6842, 6870, 6847, 6912, 6918, 6962,
     6968, 6996, 7040, 7046, 7074, 7102, 6460, 6283, 6468, 6409,
     6385, 6350, 6411, 4434, 6351, 4327, 3847, 6461, 4225, 6387,
     6449, 6467, 6527, 4021, 6416, 6498, 3919, 6415, 6545, 6484,
     3837, 6450, 3668, 3600, 3583, 3509, 6488, 3448, 3361, 3321,
     3301, 3281, 6308, 3235, 3215, 6544, 6597, 6817, 6884, 6618,
     3153, 6497, 5449, 6546, 6612, 3117, 6664, 6221, 7108, 7136,

     7142, 7170, 7176, 7204, 7210, 7238, 7244, 7272, 7300, 7328,
     6573, 4160, 3089, 6607, 3049, 2995, 6669, 6596, 2943, 2859,
     6619, 6636, 6663, 6681, 2771, 6671, 2549, 2462, 6672, 6793,
     6806, 6849, 2385, 6888, 2278, 2196, 2169, 6890, 6895, 6676,
     1996, 7334, 7362, 7368, 7396, 7402, 7430, 7436, 7464, 1917,
     1580, 1548, 1499, 1468, 1422, 6922, 1379, 6928, 1331, 1299,
     6945, 1143, 6819, 6973, 1112, 6820, 1083, 1007, 6934, 7470,
     7498, 7504, 7532, 7538, 7566,  913,  810,  780, 6937,  620,
     6842,  567, 7572, 7600, 7606, 7634,  491, 6982, 7640, 7668,
      488, 7674, 8218, 7720, 7729, 7738, 7747, 7756, 7765, 7774,

     7781, 7784, 7793, 7802, 7804, 7807, 7809, 7812, 7821, 7823,
     7826, 7835, 7844, 7853, 7862, 7871, 7880, 7889, 7898, 7901,
     7904, 7906, 7909, 7918, 7927, 7936, 7945, 7948, 7951, 7960,
     7963, 7966, 7975, 7984, 7987, 7990, 7999, 8008, 8017, 8026,
     8035, 8044, 8053, 8056, 8064, 8067, 8070, 8073, 8076, 8085,
     8094, 8097, 8100, 8109, 8112, 8115, 8124, 8127, 8130, 8139,
     8148, 8157, 8160, 8163, 8166, 8169, 8172, 8175, 8178, 8181,
     8184, 8187, 8196, 8205, 8208
    } ;

static yyconst flex_int16_t yy_def[1276] =
    {   0,
     1193,    1, 1194, 1194, 1195, 1195, 1193,    7, 1193,    9,
     1193,   11, 1196, 1196, 1197, 1197, 1198, 1198, 1193, 1193,
     1193, 1193, 1193, 1193, 1199, 1193, 1193, 1200, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193,   37, 1193, 1193,
     1193, 1193, 1193, 1193, 1201, 1202, 1193, 1193, 1193, 1202,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1203, 1193, 1193, 1204, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1205, 1206, 1206,   99,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1207, 1208,
     1208,  121, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1209, 1193, 1193, 1210, 1211,
     1211, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1212,
     1193, 1193, 1213, 1193, 1193, 1214, 1193, 1193, 1193, 1214,
       82, 1193, 1193, 1193, 1215, 1193, 1193, 1216, 1215,  169,
      169,  169,  169,  169, 1193, 1193, 1193, 1217, 1193, 1217,
     1217,  181,  181,  181,  181,  181, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1218, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1219, 1220, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1221, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1221,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231, 1193,
     1193,  231,  231, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193,   82,   82, 1222, 1223, 1223,  307,  307,  307,
      307,  307,  307,  307, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1224, 1193, 1225, 1225, 1193, 1193, 1193, 1193,
     1193, 1226, 1193, 1193, 1193, 1193, 1227, 1228, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1229, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1229,  356,  356,  356, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1230, 1193, 1231, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1232, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1232,  394, 1193,  394,  394, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1233, 1234, 1193, 1235, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1236, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1236,  432,  432, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1237, 1193, 1238, 1193, 1239, 1193, 1239, 1240,
     1241, 1240,  452,  452, 1241, 1241, 1242, 1193, 1242, 1242,
      460,  460,  460,  460,  460,  460,  460,  467,  467,  467,
      460,  460, 1193, 1193, 1243, 1193, 1193, 1193, 1193, 1193,
     1244, 1193, 1193, 1245, 1193, 1246, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1246, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1247, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1247,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
     1248, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1249,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1249,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1250, 1251, 1252,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1252, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1253, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1253,  657,  657,  657,
     1254, 1255, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1255, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1256,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1256,  689,
      689,  689, 1193, 1257, 1258, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1258, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1259, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1259,  722,  722, 1260, 1260,  726,  726,  726,  726,
      726,  726,  732, 1261, 1261, 1262, 1262,  737,  737,  737,
      737,  737,  737,  737,  741, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1263, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1263, 1263, 1264, 1264, 1264,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766, 1265, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1265, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1266, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1266,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866, 1267, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1267, 1267, 1268, 1268,
     1268,  891, 1269, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1269, 1269, 1270, 1270, 1270,  906, 1271, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1271, 1271, 1272, 1272,
     1272, 1273, 1273,  923,  923,  923,  923,  923,  923, 1274,
      741,  931,  931,  931,  931,  931,  931, 1193, 1193, 1193,
     1193, 1275, 1275,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766, 1265, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1265, 1265,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866, 1267, 1267, 1269, 1269,  906,
     1271, 1271,  921,  923,  923,  923,  927,  923,  923, 1274,
      931,  931,  931,  931,  931,  931,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766, 1265, 1265,  866,
      866,  866,  866,  866,  866,  866,  866,  921,  923,  923,

      923,  923, 1040, 1040,  931,  931,  931,  931,  931,  931,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  866,  866, 1193,  866,  866,  866,
      921,  923,  923,  923,  923,  931,  931,  931,  931,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  866, 1193, 1193,  866,  923,
      923,  923,  923,  931,  931,  766,  766,  766,  766,  766,
      866, 1193,  923,  923,  931,  931,  766,  866,  923,  931,
     1193,  923,    0, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193
    } ;

static yyconst flex_int16_t yy_nxt[8315] =
    {   0,
       20,   21,   22,   23,   24,   25,   20,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   47,   20,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   46,   57,   46,
       46,   58,   46,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   46,   68,   46,   69,   70,   71,   72,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   73,   74,   75,   76,   20,   77,
       78,   79,   80,   20,   20,   20,   81,   84,   85,   84,

       85,   82,   88,   89,   90,  151,  152,   86,  176,   86,
       88,   89,   90,  151,  152,  154,  155,  221,   91,  154,
      155,  157,  158,  177,  567,  159,   91,   92,   93,   94,
       95,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   96,   92,   92,   92,   92,   92,
       92,   92,   92,   97,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   92,   92,   92,   92,   98,   98,   98,
       98,   98,   99,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  100,   98,   98,   98,   98,
       98,   98,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  101,  102,  103,  104,   92,  105,  106,  107,  108,
       92,   92,   92,  109,  110,  111,  112,  113,  109,  109,
      109,  114,  109,  115,  116,  109,  109,  109,  109,  109,
      117,  109,  109,  109,  109,  109,  118,  109,  109,  119,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  109,
      109,  109,  109,  120,  120,  120,  120,  120,  121,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  122,  120,  120,  120,  120,  120,  120,  109,  123,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  124,  125,  126,
      127,  109,  128,  129,  130,  131,  109,  109,  109,  132,
      133,  134,  135,  132,  136,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  137,  138,  138,  132,
      132,  132,  132,  132,  132,  139,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  132,  132,  132,  132,  140,
      140,  140,  141,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  142,  143,  144,  145,  132,  146,  147,
      148,  149,  132,  132,  132,  160,  157,  158,  188, 1193,
      161,  166,  166,  190,  167,  193,  193,  290,  189,  194,
      518,  191,  192,  221,  195,  205,  206,  208,  209,  211,
      196,  347,  222,  223,  224,  225, 1193,  226,  227,  228,
      229,  235,  221,  302,  221,  326,  168,  357,  303,  221,
      327,  221,  221,  413,  413,  236,  385,  237,  221,  245,
      291,  246,  476,  476,  238,  221,  239,  221,  247,  221,
      248,  514,  395,  240,  231,  519,  232,  241,  515, 1191,
      242,  449,  479,  221,  233,  221,  303,  221,  221,  221,

      234,  530,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  179,  179,  479,  213,  214,
      215,  216,  179,  217,  218,  219,  220,  222,  223,  224,
      225,  536,  226,  227,  228,  229,  221,  221,  221,  243,
      249,  221,  480,  221,  221,  520,  221,  221,  250,  244,
      180,  251,  221,  221,  252,  221,  253,  221,  521,  522,
      221,  480,  221,  254,  256,  221,  255,  221, 1182,  221,
      221,  257,  258,  540,  221,  221,  259,  221,  260,  221,
      271,  221,  533,  339,  340,  341,  342,  221,  343,  344,
      345,  346,  221,  221,  532,  221,  181,  181,  181,  182,

      183,  183,  183,  183,  183,  183,  184,  185,  186,  197,
      548,  198,  198,  261,  221,  221,  221,  262,  328,  329,
      330,  199,  200,  199,  221,  201,  199,  202,  203,  526,
      221,  523,  263,  221,  331,  524,  199,  200,  199,  544,
      264,  221,  221,  525,  201,  199,  268,  221,  221,  221,
      221,  767,  202,  551,  265,  203,  221,  221,  266,  267,
      221,  221,  269,  221,  272,  270,  221,  273,  537,  221,
      274,  275,  221,  221,  221,  221,  221,  538,  552,  278,
      221,  276,  539,  221,  277,  221,  221,  541,  279,  221,
      221,  221,  221,  285,  221,  280,  221,  281,  221,  543,

      282,  286,  283,  221,  221,  221,  284,  287,  527,  288,
      221,  528,  542,  221,  221,  221,  221,  529,  221,  221,
      783,  289,  549,  221,  221,  292,  292,  292,  292,  292,
      221,  292,  292,  292,  292,  292,  292,  221,  292,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  295,  296,  297,  298,  298,  298,
      298,  298,  298,  299,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  304,  333,

      334,  335,  348,  349,  350,  351,  550,  352,  353,  354,
      355,  477,  221,  477,  347,  336,  478,  478,  356,  368,
      369,  370,  658,  305,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  221,  545,  371,  221,  306,  306,  306,
      307,  308,  306,  306,  306,  309,  306,  306,  310,  306,
      306,  306,  311,  312,  306,  306,  313,  306,  314,  306,
      306,  306,  348,  349,  350,  351,  221,  352,  353,  354,
      355,  360,  360,  360,  360,  360,  360,  360,  221,  553,
      578,  315,  316,  317,  318,  794,  319,  320,  321,  322,
      358,  358,  358,  358,  358,  579,  358,  358,  358,  358,

      358,  358,  221,  358,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  361,  362,  363,  364,  364,  364,  364,  364,
      364,  365,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  377,  378,  379,  380,
      394,  381,  382,  383,  384,  386,  387,  388,  389,  221,
      390,  391,  392,  393,  397,  397,  397,  397,  397,  770,
      397,  397,  397,  397,  397,  397,  221,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  555,  221,  386,  387,  388,  389, 1168,  390,
      391,  392,  393,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  400,  401,  402,  403,  403,  403,
      403,  403,  403,  404,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  407,  408,
      409,  415,  416,  417,  418,  432,  419,  420,  421,  422,
      424,  425,  426,  427,  410,  428,  429,  430,  431,  433,
      433,  433,  433,  433, 1167,  433,  433,  433,  433,  433,
      433,  554,  433,  435,  435,  435,  435,  435,  435,  435,

      534,  385,  221,  535,  221,  424,  425,  426,  427,  690,
      428,  429,  430,  431,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  436,  437,  438,  439,  439,  439,  439,  439,
      439,  440,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  166,  166,  221,  167,
      165,  165,  165,  165,  165,  165,  165,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  575,  221,

      221,  168,  165,  165,  165,  165,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  583,  221,  558,  169,  169,  169,
      170,  171,  171,  171,  171,  171,  171,  172,  173,  174,
      166,  166,  221,  165,  600,  613,  570,  451,  496,  496,
      496,  496,  496,  496,  496,  221,  451,  457,  457,  457,
      457,  457,  457,  457,  471,  471,  471,  471,  471,  471,
      471,  556,  452,  329,  330,  165,  221,  557,  451,  451,

      221,  600,  563,  451,  505,  505,  505,  505,  505,  505,
      505,  451,  566,  615,  451,  221,  451,  453,  451,  576,
      454,  166,  166,  221,  167,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  457,
      457,  457,  457,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  334,  335,  221,  168,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  369,  370,  221,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  179,  179,  193,  193,  546,
      600,  559,  458,  564,  614,  582,  560,  473,  474,  473,
      547,  221,  473,  561,  221,  221,  481,  481,  221,  562,
      221,  565,  473,  474,  473,  481,  481,  481,  481,  577,
      459,  473,  221,  618,  775,  588,  221,  600,  481,  481,
      481,  481,  481,  481,  487,  488,  489,  490,  221,  491,
      492,  493,  494,  212,  212,  212,  212,  212,  221,  212,
      212,  212,  212,  212,  212,  785,  212,  222,  223,  224,
      225,  221,  226,  227,  228,  229,  460,  460,  460,  461,

      462,  462,  462,  462,  462,  462,  463,  464,  465,  179,
      179,  571,  466,  580,  581,  221,  178,  573,  795,  572,
      221,  574,  221,  221,  221,  466,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      568,  467,  584,  771,  178,  585,  586,  466,  466,  302,
      587,  221,  466,  600,  303,  221,  569,  221,  780,  221,
      466,  221,  617,  466,  799,  466,  468,  466,  221,  469,
      179,  179,  589,  589,  589,  589,  221,  458,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  497,  498,  499,  500,  500,  500,  500,  500,

      500,  501,  408,  409,  221,  459,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      221,  221,  221,  221,  221,  787,  221,  221,  221,  221,
      221,  221,  221,  221,  413,  413,  221,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  460,  460,  460,  461,  462,  462,  462,  462,  462,
      462,  463,  464,  465,  197,  955,  198,  198,  620,  620,
      620,  620,  620,  620,  620,  221,  199,  200,  199,  326,
      201,  199,  202,  768,  327,  449,  328,  329,  330,  600,
      303,  199,  200,  199,  478,  478,  610,  221,  611,  201,

      199,  612,  331,  659,  659,  659,  659,  202,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  507,  508,  509,
      509,  509,  509,  509,  509,  510,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      513,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  777,  221,  786,  222,  223,  224,
      225,  221,  226,  227,  228,  229,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  592,  593,  594,  595,
      609,  596,  597,  598,  599,  601,  602,  603,  604,  991,
      605,  606,  607,  608,  306,  306,  306,  306,  306,  221,
      306,  306,  306,  306,  306,  306,  781,  306,  621,  622,

      623,  624,  624,  624,  624,  624,  624,  625,  778,  779,
      601,  602,  603,  604,  221,  605,  606,  607,  608,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  333,  334,  335,  631,  632,  633,  634,  810,  635,
      636,  637,  638,  221,  368,  369,  370,  336,  338,  338,
      338,  338,  338,  221,  338,  338,  338,  338,  338,  338,
      371,  338,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  641,  642,  643,
      644,  644,  644,  644,  644,  644,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  348,  349,  350,  351,  423,  352,  353,  354,  355,
      347,  347,  347,  347,  347,  796,  347,  347,  347,  347,
      347,  347,  221,  347,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      651,  652,  653,  653,  653,  653,  653,  653,  654,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  657,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  691,  691,  691,  691,  348,  349,  350,  351,
     1137,  352,  353,  354,  355,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      663,  664,  665,  666, 1166,  667,  668,  669,  670,  376,
      376,  376,  376,  376,  801,  376,  376,  376,  376,  376,
      376,  221,  376,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  673,  674,

      675,  676,  676,  676,  676,  676,  676,  677,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  386,  387,  388,  389,  600,  390,  391,  392,
      393,  385,  385,  385,  385,  385,  809,  385,  385,  385,
      385,  385,  385,  221,  385,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      682,  683,  684,  685,  685,  685,  685,  685,  685,  686,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  689,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  723,  723,  723,  723,  386,  387,  388,
      389,  221,  390,  391,  392,  393,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  407,  408,  409,  696,  697,  698,  699,  221,  700,
      701,  702,  703,  762,  762,  762,  762,  410,  414,  414,
      414,  414,  414,  814,  414,  414,  414,  414,  414,  414,
      221,  414,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  706,  707,  708,
      709,  709,  709,  709,  709,  709,  710,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  424,  425,  426,  427,  221,  428,  429,  430,  431,
      423,  423,  423,  423,  423,  837,  423,  423,  423,  423,
      423,  423,  221,  423,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      716,  717,  718,  718,  718,  718,  718,  718,  719,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  722,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  723,  723,

      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  827,  424,  425,  426,  427,  221,  428,  429,  430,
      431,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  166,  166,  831,
      166,  733,  733,  746,  221,  746,  789,  221,  747,  747,

      733,  733,  733,  733,  803,  751,  221,  752,  764,  764,
      764,  764,  769,  733,  733,  733,  733,  733,  733,  734,
      734,  772,  725,  773,  751,  798,  221, 1159,  734,  734,
      734,  734,  752,  221,  804,  221,  221,  221,  743,  743,
      774,  734,  734,  734,  734,  734,  734,  743,  743,  743,
      743,  179,  179,  221,  736,  807,  221,  221,  812,  838,
      743,  743,  743,  743,  743,  743,  221,  736,  726,  726,
      726,  727,  728,  728,  728,  728,  728,  728,  729,  730,
      731,  166,  166,  737,  167,  221,  790,  776,  954,  736,
      736,  815,  782,  221,  736,  754,  754,  754,  754,  754,

      754,  754,  736,  221,  221,  736,  221,  736,  738,  736,
      811,  739,  822,  221,  221,  221,  168,  457,  457,  457,
      457,  457,  457,  457,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  457,  457,  457,  457,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  792,
      221,  832,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  166,  166,  221,  166,  487,
      488,  489,  490,  784,  491,  492,  493,  494,  805,  817,
      788,  732,  732,  791,  793,  797,  834,  221,  800,  221,

      732,  732,  732,  732,  221,  818,  806,  221,  221,  221,
      725,  221,  221,  732,  732,  732,  732,  732,  732,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  487,  488,  489,
      490,  221,  491,  492,  493,  494,  726,  726,  726,  727,
      728,  728,  728,  728,  728,  728,  729,  730,  731,  166,
      166,  995,  167,  744,  744,  802,  816,  819,  600,  824,
      825,  221,  744,  744,  744,  744,  871,  221,  820,  221,
      221,  829,  458,  221,  221,  744,  744,  744,  744,  744,

      744,  457,  457,  823,  168,  221,  836,  221,  221,  221,
      457,  457,  457,  457,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  457,  457,  457,  457,  457,  457,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  830,  869,  221,  600,  221,  600,  873,
      169,  169,  169,  170,  171,  171,  171,  171,  171,  171,
      172,  173,  174,  166,  166,  600,  167,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  476,  476,  828,  835,  478,  478,  600,  329,  330,
      867,  748,  749,  748,  221,  750,  748,  750,  168,  868,

      750,  600,  221,  600,  872,  600,  748,  749,  748,  600,
      750,  874,  750,  600,  870,  748,  875,  334,  335,  750,
      755,  756,  757,  758,  758,  758,  758,  758,  758,  759,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  169,  169,  169,  170,  171,  171,
      171,  171,  171,  171,  172,  173,  174,  179,  179,  486,
      486,  486,  486,  486,  179,  486,  486,  486,  486,  486,
      486,  221,  486,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  876,  876,  876,
      876,  221,  459,  754,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,  754,  754,  754,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  369,  370,  221,  460,  460,
      460,  461,  462,  462,  462,  462,  462,  462,  463,  464,
      465,  179,  179,  887,  887,  887,  887,  221,  179,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  222,  223,  224,  225,  221,  226,  227,
      228,  229,  889,  889,  889,  889,  459,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  408,  409,  221,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  460,  460,  460,  461,  462,  462,  462,  462,
      462,  462,  463,  464,  465,  458,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  747,  747,  221,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  742,
      742,  849,  849,  849,  849,  849,  849,  849,  742,  742,
      742,  742,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  742,  742,  742,  742,  742,  742,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  840,  841,  842,  843,  221,  844,  845,  846,  847,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  766,  591,  591,  591,
      591,  591,  941,  591,  591,  591,  591,  591,  591,  221,
      591,  850,  851,  852,  853,  853,  853,  853,  853,  853,
      854,  941,  222,  223,  224,  225,  221,  226,  227,  228,
      229,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  601,  602,  603,  604, 1079,  605,  606,
      607,  608,  600,  600,  600,  600,  600,  221,  600,  600,
      600,  600,  600,  600,  221,  600,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  859,  860,  861,  862,  862,  862,  862,  862,  862,
      863,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  866,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  956,  601,  602,  603,  604,  221,  605,
      606,  607,  608,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  631,
      632,  633,  634,  221,  635,  636,  637,  638,  630,  630,

      630,  630,  630,  221,  630,  630,  630,  630,  630,  630,
     1119,  630,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  880,  881,  882,
      883,  883,  883,  883,  883,  883,  884,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  631,  632,  633,  634,  221,  635,  636,  637,  638,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  348,  349,  350,  351,  221,  352,  353,
      354,  355,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  889,  889,  889,  889,

      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  891,  892,  663,  664,  665,
      666,  940,  667,  668,  669,  670,  221,  945,  907,  347,
      894,  894,  894,  894,  894,  894,  894,  902,  902,  902,

      902,  385,  348,  349,  350,  351,  940,  352,  353,  354,
      355,  662,  662,  662,  662,  662,  221,  662,  662,  662,
      662,  662,  662, 1151,  662,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  895,  896,  897,  898,  898,  898,  898,
      898,  898,  899,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  663,  664,  665,
      666,  221,  667,  668,  669,  670,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  386,
      387,  388,  389,  221,  390,  391,  392,  393,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  906,  696,  697,  698,  699,
      221,  700,  701,  702,  703,  695,  695,  695,  695,  695,

      948,  695,  695,  695,  695,  695,  695,  946,  695,  221,
      947,  221,  386,  387,  388,  389,  221,  390,  391,  392,
      393,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  910,  911,  912,  913,
      913,  913,  913,  913,  913,  914,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      696,  697,  698,  699,  385,  700,  701,  702,  703,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,

      704,  704,  704,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  424,  425,  426,  427,
     1097,  428,  429,  430,  431,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,  713,  713,  713,  713,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  921,  450,  450,  450,  450,  450,  450,  450,

      726,  726,  726,  726,  726,  726,  726,  960,  166,  166,
      953,  938,  949,  938,  221,  922,  939,  939,  221,  221,
      487,  488,  489,  490,  922,  491,  492,  493,  494,  942,
      942,  942,  942,  221,  950,  600,  424,  425,  426,  427,
      923,  428,  429,  430,  431,  952,  922,  922,  221,  958,
      951,  922,  221,  221,  957,  961,  993,  221,  962,  922,
      221,  221,  922,  963,  922,  924,  922,  221,  925,  166,
      166,  221,  166,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  450,  450,  450,
      450,  927,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  221,  968,  600,  725,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  977,  600,  221,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      726,  726,  726,  727,  728,  728,  728,  728,  728,  728,
      729,  730,  731,  928,  928,  975,  964,  965,  966,  929,
      929, 1001,  928,  928,  928,  928,  221,  221,  929,  929,
      929,  929,  221,  221,  221,  928,  928,  928,  928,  928,
      928,  929,  929,  929,  929,  929,  929,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  221,  600,  982,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  166,  166,
      970,  167,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  973,  974,  969,  930,  930,  221,  600,  972,  221,
      932,  932,  221,  930,  930,  930,  930,  221,  221,  932,
      932,  932,  932,  168,  939,  939,  930,  930,  930,  930,
      930,  930,  932,  932,  932,  932,  932,  932,  933,  933,
      221,  221,  986,  980,  978,  221,  989,  933,  933,  933,
      933,  487,  488,  489,  490,  221,  491,  492,  493,  494,

      933,  933,  933,  933,  933,  933,  983,  221,  221,  169,
      169,  169,  170,  171,  171,  171,  171,  171,  171,  172,
      173,  174,  166,  166,  976,  167,  457,  457,  984,  221,
      221,  981,  221,  997,  221,  457,  457,  457,  457,  487,
      488,  489,  490,  221,  491,  492,  493,  494,  457,  457,
      457,  457,  457,  457,  935,  935,  990,  168,  221,  985,
      936,  936,  600,  935,  935,  935,  935,  221, 1020,  936,
      936,  936,  936,  221,  987,  998,  935,  935,  935,  935,
      935,  935,  936,  936,  936,  936,  936,  936,  221,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  169,  169,  169,  170,  171,  171,  171,
      171,  171,  171,  172,  173,  174,  179,  179,  988, 1016,
     1018,  458,  600,  179,  992,  996,  999, 1022, 1019,  600,
      937,  937,  221,  747,  747, 1000,  221,  221,  221,  937,
      937,  937,  937,  473,  600,  473, 1017,  221,  473, 1025,
      600,  459,  937,  937,  937,  937,  937,  937,  473,  221,
      473, 1011, 1011, 1011, 1011, 1063,  221,  473,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942, 1047,  460,  460,  460,

      461,  462,  462,  462,  462,  462,  462,  463,  464,  465,
      179,  179,  221,  222,  223,  224,  225,  179,  226,  227,
      228,  229, 1013, 1013, 1013, 1013,  931,  931, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  931,  931,  931,  931, 1021,
     1024, 1052, 1057,  600,  600,  459,  221,  221,  931,  931,
      931,  931,  931,  931,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  222,  223,  224,  225,  221,  226,  227,  228,
      229,  460,  460,  460,  461,  462,  462,  462,  462,  462,

      462,  463,  464,  465,  457,  457, 1026, 1026, 1026, 1026,
     1048, 1049, 1054,  457,  457,  457,  457,  221,  944, 1028,
     1028, 1028, 1028,  221,  221,  221,  457,  457,  457,  457,
      457,  457,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  222,  223,  224,  225,
     1137,  226,  227,  228,  229,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  840,  841,  842,  843,  221,  844,  845,
      846,  847,  839,  839,  839,  839,  839,  600,  839,  839,

      839,  839,  839,  839,  221,  839, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1004, 1005, 1006, 1007, 1007, 1007,
     1007, 1007, 1007, 1008, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,  840,  841,
      842,  843,  221,  844,  845,  846,  847,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      601,  602,  603,  604,  221,  605,  606,  607,  608,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013,  600,  600,  600,

      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600, 1015,  631,  632,  633,  634,  221,  635,  636,
      637,  638,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027,  221, 1067, 1059,  601,  602,

      603,  604,  221,  605,  606,  607,  608, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  631,  632,  633,
      634,  892,  635,  636,  637,  638,  631,  632,  633,  634,
     1081,  635,  636,  637,  638,  348,  349,  350,  351,  221,

      352,  353,  354,  355,  348,  349,  350,  351, 1076,  352,
      353,  354,  355, 1031, 1031, 1031, 1031, 1050, 1051,  221,
      221,  348,  349,  350,  351,  221,  352,  353,  354,  355,
      663,  664,  665,  666,  221,  667,  668,  669,  670,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,

     1029, 1029, 1029, 1029,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  663,  664,  665,  666, 1030,  667,  668,  669,
      670,  663,  664,  665,  666,  221,  667,  668,  669,  670,
      386,  387,  388,  389, 1053,  390,  391,  392,  393,  386,
      387,  388,  389,  221,  390,  391,  392,  393, 1056, 1082,
      221,  221,  221,  221, 1064, 1055,  386,  387,  388,  389,
      221,  390,  391,  392,  393,  696,  697,  698,  699,  221,
      700,  701,  702,  703,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  696,  697,  698,
      699,  221,  700,  701,  702,  703,  696,  697,  698,  699,

     1033,  700,  701,  702,  703,  424,  425,  426,  427, 1058,
      428,  429,  430,  431,  424,  425,  426,  427,  600,  428,
      429,  430,  431,  221, 1095,  424,  425,  426,  427, 1060,
      428,  429,  430,  431,  166,  166, 1066,  166, 1035, 1035,
      221,  600, 1065,  221,  221,  221, 1090, 1035, 1035, 1035,
     1035,  487,  488,  489,  490, 1068,  491,  492,  493,  494,
     1035, 1035, 1035, 1035, 1035, 1035, 1036, 1036,  221,  725,
     1069,  221,  450,  450, 1073, 1036, 1036, 1036, 1036, 1141,
      423,  450,  450,  450,  450,  221,  221, 1080, 1036, 1036,
     1036, 1036, 1036, 1036,  450,  450,  450,  450,  450,  450,

      487,  488,  489,  490,  221,  491,  492,  493,  494, 1072,
     1074, 1091,  221,  221,  600,  726,  726,  726,  727,  728,
      728,  728,  728,  728,  728,  729,  730,  731,  166,  166,
     1061,  166, 1070, 1071, 1112, 1075, 1077, 1084, 1062,  221,
      221,  221, 1085, 1078, 1034, 1034,  221,  221,  221,  221,
     1038, 1038,  221, 1034, 1034, 1034, 1034,  221, 1132, 1038,
     1038, 1038, 1038,  725,  221, 1086, 1034, 1034, 1034, 1034,
     1034, 1034, 1038, 1038, 1038, 1038, 1038, 1038, 1039, 1039,
     1083,  221, 1092, 1087,  600, 1098,  600, 1039, 1039, 1039,
     1039,  221, 1093,  423,  221, 1088, 1088, 1088, 1088, 1118,

     1039, 1039, 1039, 1039, 1039, 1039,  221,  221, 1116,  726,
      726,  726,  727,  728,  728,  728,  728,  728,  728,  729,
      730,  731,  450,  450, 1096,  221,  600,  600, 1042, 1042,
     1094,  450,  450,  450,  450, 1121, 1115, 1042, 1042, 1042,
     1042,  221,  385,  221,  450,  450,  450,  450,  450,  450,
     1042, 1042, 1042, 1042, 1042, 1042,  840,  841,  842,  843,
      347,  844,  845,  846,  847,  221, 1127,  221, 1114, 1117,
     1125,  221,  221, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037,  166,  166, 1122,
      167, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,

      600, 1130, 1111, 1040, 1040,  221,  221, 1123, 1120, 1043,
     1043, 1113, 1040, 1040, 1040, 1040,  221,  221, 1043, 1043,
     1043, 1043,  168,  221,  221, 1040, 1040, 1040, 1040, 1040,
     1040, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1131,
      221, 1126, 1129, 1136,  221,  600, 1044, 1044, 1044, 1044,
      840,  841,  842,  843,  221,  844,  845,  846,  847, 1044,
     1044, 1044, 1044, 1044, 1044,  600, 1023, 1124,  169,  169,
      169,  170,  171,  171,  171,  171,  171,  171,  172,  173,
      174, 1041, 1041,  221, 1010, 1009, 1138, 1045, 1045, 1128,
     1041, 1041, 1041, 1041,  600, 1133, 1045, 1045, 1045, 1045,

      221,  221,  221, 1041, 1041, 1041, 1041, 1041, 1041, 1045,
     1045, 1045, 1045, 1045, 1045, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,  221,
      994, 1150,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457, 1134,  939,
      939, 1152,  221,  221, 1154,  457,  457,  457,  457,  748,
      600,  748, 1135,  221,  748, 1139,  600,  221,  457,  457,
      457,  457,  457,  457,  748,  221,  748, 1155, 1156,  840,
      841,  842,  843,  748,  844,  845,  846,  847,  631,  632,
      633,  634,  221,  635,  636,  637,  638,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  458,  600, 1153, 1157, 1160, 1161, 1140,  221,  221,
     1046, 1046, 1169, 1158,  600,  221,  221,  221,  221, 1046,
     1046, 1046, 1046,  631,  632,  633,  634,  221,  635,  636,
      637,  638, 1046, 1046, 1046, 1046, 1046, 1046, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  663,  664,
      665,  666,  979,  667,  668,  669,  670,  663,  664,  665,
      666,  971,  667,  668,  669,  670,  696,  697,  698,  699,
      221,  700,  701,  702,  703,  696,  697,  698,  699,  221,
      700,  701,  702,  703, 1099, 1099, 1162, 1163,  221,  221,
     1100, 1100,  221, 1099, 1099, 1099, 1099,  967,  600, 1100,
     1100, 1100, 1100, 1179, 1181,  221, 1099, 1099, 1099, 1099,
     1099, 1099, 1100, 1100, 1100, 1100, 1100, 1100, 1101, 1101,
      600, 1167,  221, 1164,  959, 1188, 1168, 1101, 1101, 1101,

     1101,  840,  841,  842,  843,  221,  844,  845,  846,  847,
     1101, 1101, 1101, 1101, 1101, 1101,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
     1102, 1102, 1165,  221,  221, 1182, 1103, 1103,  600, 1102,
     1102, 1102, 1102,  600,  221, 1103, 1103, 1103, 1103,  221,
      221,  221, 1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103,
     1103, 1103, 1103, 1103,  166,  166, 1176,  167,  840,  841,
      842,  843, 1177,  844,  845,  846,  847,  221,  221, 1187,
     1104, 1104,  600, 1191,  221,  221, 1105, 1105, 1178, 1104,
     1104, 1104, 1104,  221,  423, 1105, 1105, 1105, 1105,  168,

      423,  221, 1104, 1104, 1104, 1104, 1104, 1104, 1105, 1105,
     1105, 1105, 1105, 1105, 1106, 1106, 1180,  916,  915,  385,
      385,  901,  900, 1106, 1106, 1106, 1106,  347,  347,  221,
      600,  886,  885,  600,  600,  865, 1106, 1106, 1106, 1106,
     1106, 1106,  864,  856,  855,  169,  169,  169,  170,  171,
      171,  171,  171,  171,  171,  172,  173,  174, 1107, 1107,
      221,  221,  833,  826, 1108, 1108,  221, 1107, 1107, 1107,
     1107,  821,  221, 1108, 1108, 1108, 1108,  813,  221,  808,
     1107, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108,
     1108, 1108, 1109, 1109,  221,  221,  221,  221,  761,  760,

      484, 1109, 1109, 1109, 1109,  485,  423,  423,  721,  720,
      712,  458,  711,  693, 1109, 1109, 1109, 1109, 1109, 1109,
     1110, 1110,  412,  408,  385,  385, 1142, 1142,  688, 1110,
     1110, 1110, 1110,  687,  679, 1142, 1142, 1142, 1142,  678,
      374,  369, 1110, 1110, 1110, 1110, 1110, 1110, 1142, 1142,
     1142, 1142, 1142, 1142, 1143, 1143,  347,  347,  656,  655,
     1144, 1144,  647, 1143, 1143, 1143, 1143,  646,  337, 1144,
     1144, 1144, 1144,  334,  332,  329, 1143, 1143, 1143, 1143,
     1143, 1143, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1145,
      627,  626,  616,  221,  165,  165,  221, 1145, 1145, 1145,

     1145,  221,  221,  165,  165,  165,  165,  531,  517,  516,
     1145, 1145, 1145, 1145, 1145, 1145,  165,  165,  165,  165,
      165,  165,  165,  165,  512,  511,  503,  502, 1146, 1146,
      485,  165,  165,  165,  165,  483,  482, 1146, 1146, 1146,
     1146,  162,  448,  446,  165,  165,  165,  165,  165,  165,
     1146, 1146, 1146, 1146, 1146, 1146, 1147, 1147,  444,  442,
      441,  412, 1148, 1148,  408, 1147, 1147, 1147, 1147,  406,
      405, 1148, 1148, 1148, 1148,  396,  375,  374, 1147, 1147,
     1147, 1147, 1147, 1147, 1148, 1148, 1148, 1148, 1148, 1148,
     1149, 1149,  373,  372,  369,  367,  366,  337,  334, 1149,

     1149, 1149, 1149,  332,  329,  324,  301,  300,  230,  458,
      210,  207, 1149, 1149, 1149, 1149, 1149, 1149,  457,  457,
      204,  187,  175,  164,  163,  162, 1193,  457,  457,  457,
      457, 1193, 1193, 1193, 1193, 1193, 1193,  458, 1193, 1193,
      457,  457,  457,  457,  457,  457,  457,  457, 1193, 1193,
     1193, 1193, 1170, 1170, 1193,  457,  457,  457,  457, 1193,
     1193, 1170, 1170, 1170, 1170, 1193, 1193, 1193,  457,  457,
      457,  457,  457,  457, 1170, 1170, 1170, 1170, 1170, 1170,
     1171, 1171, 1193, 1193, 1193, 1193, 1172, 1172, 1193, 1171,
     1171, 1171, 1171, 1193, 1193, 1172, 1172, 1172, 1172, 1193,

     1193, 1193, 1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172,
     1172, 1172, 1172, 1172, 1173, 1173, 1193, 1193, 1193, 1193,
     1174, 1174, 1193, 1173, 1173, 1173, 1173, 1193, 1193, 1174,
     1174, 1174, 1174, 1193, 1193, 1193, 1173, 1173, 1173, 1173,
     1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174,  457,  457,
     1193, 1193, 1193, 1193,  457,  457, 1193,  457,  457,  457,
      457, 1193, 1193,  457,  457,  457,  457, 1193, 1193, 1193,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457, 1175, 1175, 1193, 1193, 1193, 1193, 1183, 1183,
     1193, 1175, 1175, 1175, 1175, 1193, 1193, 1183, 1183, 1183,

     1183, 1193, 1193, 1193, 1175, 1175, 1175, 1175, 1175, 1175,
     1183, 1183, 1183, 1183, 1183, 1183,  450,  450, 1193, 1193,
     1193, 1193,  450,  450, 1193,  450,  450,  450,  450, 1193,
     1193,  450,  450,  450,  450, 1193, 1193, 1193,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
     1184, 1184, 1193, 1193, 1193, 1193, 1185, 1185, 1193, 1184,
     1184, 1184, 1184, 1193, 1193, 1185, 1185, 1185, 1185, 1193,
     1193, 1193, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185,
     1185, 1185, 1185, 1185, 1186, 1186, 1193, 1193, 1193, 1193,
     1189, 1189, 1193, 1186, 1186, 1186, 1186, 1193, 1193, 1189,

     1189, 1189, 1189, 1193, 1193, 1193, 1186, 1186, 1186, 1186,
     1186, 1186, 1189, 1189, 1189, 1189, 1189, 1189, 1103, 1103,
     1193, 1193, 1193, 1193, 1190, 1190, 1193, 1103, 1103, 1103,
     1103, 1193, 1193, 1190, 1190, 1190, 1190, 1193, 1193, 1193,
     1103, 1103, 1103, 1103, 1103, 1103, 1190, 1190, 1190, 1190,
     1190, 1190, 1109, 1109, 1193, 1193, 1193, 1193, 1192, 1192,
     1193, 1109, 1109, 1109, 1109, 1193, 1193, 1192, 1192, 1192,
     1192, 1193, 1193, 1193, 1109, 1109, 1109, 1109, 1109, 1109,
     1192, 1192, 1192, 1192, 1192, 1192, 1147, 1147, 1193, 1193,
     1193, 1193, 1171, 1171, 1193, 1147, 1147, 1147, 1147, 1193,

     1193, 1171, 1171, 1171, 1171, 1193, 1193, 1193, 1147, 1147,
     1147, 1147, 1147, 1147, 1171, 1171, 1171, 1171, 1171, 1171,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   87,
       87,   87,   87,   87,   87,   87,   87,   87,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  212, 1193, 1193, 1193, 1193,  212,  212,
      221,  221,  221,  323, 1193,  323,  323, 1193,  323,  323,

      323,  323,  325, 1193,  325,  325,  325,  325,  325,  325,
      325,  338,  338,  347,  347,  347,  376,  376,  385,  385,
      385,  411, 1193, 1193,  411,  411,  411,  411,  411,  411,
      414,  414,  423,  423,  423,  443, 1193,  443,  443,  443,
      443,  443,  443,  443,  445, 1193,  445,  445,  445,  445,
      445,  445,  445,  447, 1193,  447, 1193,  447,  447,  447,
      447,  447,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  475,
     1193,  475,  475,  475,  475,  475,  475,  475,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  486,  486,  486,
      221,  221,  221,  591,  591,  600,  600,  600,  323, 1193,
      323,  323, 1193,  323,  323,  323,  323,  325, 1193,  325,
      325, 1193, 1193,  325,  325,  325,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  630,  630,  630,  347,  347,  347,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  662,
      662,  662,  385,  385,  385,  411, 1193,  411,  411,  411,
      411,  411,  411,  411,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  695,  695,  695,  423,  423,  423,  443,

     1193,  443,  443,  443,  443,  443,  443,  443,  445, 1193,
      445,  445,  445,  445,  445,  445,  445,  447, 1193,  447,
     1193,  447,  447,  447,  447,  447,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  475, 1193,  475,  475,  475,  475,  475,
      475,  475,  481,  481,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  486,  486,  486,  221,  221,  221,  839,
      839,  839,  600,  600,  600,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  629,  629,  629,  629,  629,  629,

      629,  629,  629,  630,  630,  630,  347,  347,  347,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  662,  662,
      662,  385,  385,  385,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  695,  695,  695,  423,  423,  423,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  486,  486,  486,  221,
      221,  221,  839,  839,  839,  600,  600,  600,  630,  630,
      630,  347,  347,  347,  662,  662,  662,  385,  385,  385,
      695,  695,  695,  423,  423,  423,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  486,  486,  486,   19, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193
    } ;

static yyconst flex_int16_t yy_chk[8315] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    3,    3,    4,

        4,    2,    5,    5,    5,   13,   13,    3,   27,    4,
        6,    6,    6,   14,   14,   15,   15,  275,    5,   16,
       16,   17,   17,   27,  275,   17,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   18,   18,   18,   32,   38,
       18,   25,   25,   34,   25,   35,   35,   70,   32,   36,
      236,   34,   34,  236,   36,   41,   41,   43,   43,   45,
       36,  100,   46,   46,   46,   46,   38,   46,   46,   46,
       46,   51,   51,   81,   51,   86,   25,  100,   81,   54,
       86,   54,   51,  138,  138,   51,  122,   51,   51,   54,
       70,   54,  197,  197,   51,   54,   52,   52,   54,   52,
       54,  232,  122,   52,   50,  237,   50,   52,  233, 1191,
       52,  160,  201,   52,   50,  232,  160,  233,  237,  244,

       50,  244,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   28,   28,  201,   45,   45,
       45,   45,   28,   45,   45,   45,   45,   50,   50,   50,
       50,  249,   50,   50,   50,   50,   53,  249,   53,   53,
       55,   55,  202,   55,  238,  238,   53, 1187,   55,   53,
       28,   55,   53,   56,   55,   56,   56,   55,  239,  239,
       57,  202,   57,   56,   57,   58,   56,   58, 1182,   56,
       57,   57,   57,  252,  252,   58,   57,   62,   58,   62,
       62,   58,  247,   97,   97,   97,   97,   62,   97,   97,
       97,   97,  246,   62,  246,  247,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   37,
      261,   37,   37,   59,   59,  261,   59,   59,   88,   88,
       88,   37,   37,   37,   59,   37,   37,   37,   37,  242,
       59,  240,   59,  242,   88,  240,   37,   37,   37,  257,
       60,  257,   60,  241,   37,   37,   61,   61,  240,   61,
       60,  515,   37,  264,   60,   37,   60,   61,   60,   60,
      241,  264,   61,   61,   63,   61,   63,   63,  250,  515,
       63,   63,  250,   64,   63,   64, 1180,  250,  265,   64,
       63,   63,  251,   64,   63,  251,  253,  253,   64,   64,
       65,  265,   65,   66,   66,   64,   66,   65,  255,  255,

       65,   66,   65,   67,   66,   67,   65,   66,  243,   67,
       66,  243,  254,   67,   68,  254,   68,  243,  262,   67,
      530,   68,  262,  243,   68,   73,   73,   73,   73,   73,
       68,   73,   73,   73,   73,   73,   73,  530,   73,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   82,   93,

       93,   93,   98,   98,   98,   98,  263,   98,   98,   98,
       98,  200,  263,  200,  357,   93,  200,  200,   99,  110,
      110,  110,  357,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,  258,  258,  110, 1178,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   99,   99,   99,   99, 1177,   99,   99,   99,
       99,  103,  103,  103,  103,  103,  103,  103,  266,  266,
      283,   82,   82,   82,   82,  542,   82,   82,   82,   82,
      101,  101,  101,  101,  101,  283,  101,  101,  101,  101,

      101,  101,  542,  101,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  119,  119,  119,  119,
      121,  119,  119,  119,  119,  120,  120,  120,  120, 1176,
      120,  120,  120,  120,  124,  124,  124,  124,  124,  518,
      124,  124,  124,  124,  124,  124,  518,  124,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  268,  268,  121,  121,  121,  121, 1168,  121,
      121,  121,  121,  126,  126,  126,  126,  126,  126,  126,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  133,  133,
      133,  139,  139,  139,  139,  141,  139,  139,  139,  139,
      140,  140,  140,  140,  133,  140,  140,  140,  140,  142,
      142,  142,  142,  142, 1167,  142,  142,  142,  142,  142,
      142,  267,  142,  144,  144,  144,  144,  144,  144,  144,

      248,  395,  248,  248,  267,  141,  141,  141,  141,  395,
      141,  141,  141,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  165,  165, 1165,  165,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  280, 1162,

      280,  165,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  286,  286,  270,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      168,  168,  270,  168,  309,  309,  277,  168,  215,  215,
      215,  215,  215,  215,  215,  277,  168,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  269,  168,  332,  332,  168,  272,  269,  168,  168,

      269,  311,  272,  168,  224,  224,  224,  224,  224,  224,
      224,  168,  274,  311,  168,  274,  168,  168,  168,  281,
      168,  169,  169,  281,  169,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  337,  337, 1160,  169,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  374,  374, 1159,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  178,  178,  193,  193,  260,
      310,  271,  178,  273,  310,  285,  271,  193,  193,  193,
      260,  285,  193,  271,  260, 1157,  203,  203,  271,  271,
      273,  273,  193,  193,  193,  203,  203,  203,  203,  282,
      178,  193,  282,  314,  523,  289,  523,  314,  203,  203,
      203,  203,  203,  203,  212,  212,  212,  212,  289,  212,
      212,  212,  212,  213,  213,  213,  213,  213, 1155,  213,
      213,  213,  213,  213,  213,  532,  213,  221,  221,  221,
      221,  532,  221,  221,  221,  221,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  180,
      180,  278,  180,  284,  284,  279,  180,  279,  543,  278,
      278,  279,  543,  284, 1154,  180,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      276,  180,  287,  519,  180,  287,  288,  180,  180,  302,
      288,  287,  180,  313,  302, 1153,  276,  276,  527,  288,
      180,  519,  313,  180,  547,  180,  180,  180,  527,  180,
      181,  181,  296,  296,  296,  296,  547,  181,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  412,  412, 1152,  181,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      222,  222,  222,  222,  222,  534,  222,  222,  222,  222,
      222,  222,  534,  222,  413,  413, 1151,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  198,  782,  198,  198,  317,  317,
      317,  317,  317,  317,  317,  782,  198,  198,  198,  326,
      198,  198,  198,  516,  326,  449,  328,  328,  328,  308,
      449,  198,  198,  198,  477,  477,  308,  516,  308,  198,

      198,  308,  328,  362,  362,  362,  362,  198,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      231,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  525,  525,  533,  231,  231,  231,
      231,  533,  231,  231,  231,  231,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  305,  305,  305,  305,
      307,  305,  305,  305,  305,  306,  306,  306,  306,  827,
      306,  306,  306,  306,  315,  315,  315,  315,  315,  827,
      315,  315,  315,  315,  315,  315,  528,  315,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  526,  526,
      307,  307,  307,  307,  528,  307,  307,  307,  307,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  333,  333,  333,  338,  338,  338,  338,  559,  338,
      338,  338,  338, 1150,  368,  368,  368,  333,  339,  339,
      339,  339,  339,  559,  339,  339,  339,  339,  339,  339,
      368,  339,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  341,  341,  341,  341,
      341,  341,  341,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  347,  347,  347,  347, 1141,  347,  347,  347,  347,
      348,  348,  348,  348,  348,  544,  348,  348,  348,  348,
      348,  348,  544,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  350,  350,
      350,  350,  350,  350,  350,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  356,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  401,  401,  401,  401,  356,  356,  356,  356,
     1137,  356,  356,  356,  356,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      376,  376,  376,  376, 1136,  376,  376,  376,  376,  377,
      377,  377,  377,  377,  550,  377,  377,  377,  377,  377,
      377,  550,  377,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  379,  379,  379,
      379,  379,  379,  379,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  381,  381,

      381,  381,  381,  381,  381,  381,  381,  381,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  385,  385,  385,  385, 1135,  385,  385,  385,
      385,  386,  386,  386,  386,  386,  558,  386,  386,  386,
      386,  386,  386,  558,  386,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  388,
      388,  388,  388,  388,  388,  388,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  394,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  437,  437,  437,  437,  394,  394,  394,
      394, 1133,  394,  394,  394,  394,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  407,  407,  407,  414,  414,  414,  414, 1128,  414,
      414,  414,  414,  498,  498,  498,  498,  407,  415,  415,
      415,  415,  415,  564,  415,  415,  415,  415,  415,  415,
      564,  415,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  417,  417,  417,  417,
      417,  417,  417,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  423,  423,  423,  423, 1127,  423,  423,  423,  423,
      424,  424,  424,  424,  424,  587,  424,  424,  424,  424,
      424,  424,  587,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  432,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  577,  432,  432,  432,  432,  577,  432,  432,  432,
      432,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  450,  450,  581,
      450,  453,  453,  474,  581,  474,  536,  536,  474,  474,

      453,  453,  453,  453,  552,  481,  552,  481,  507,  507,
      507,  507,  517,  453,  453,  453,  453,  453,  453,  454,
      454,  520,  450,  521,  481,  546,  517, 1125,  454,  454,
      454,  454,  481,  546,  554,  520,  554,  521,  468,  468,
      522,  454,  454,  454,  454,  454,  454,  468,  468,  468,
      468,  459,  459,  556,  459,  556,  522,  562,  562,  588,
      468,  468,  468,  468,  468,  468,  588,  459,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  459,  451,  781,  537,  524,  781,  459,
      459,  566,  529,  566,  459,  489,  489,  489,  489,  489,

      489,  489,  459,  524,  537,  459,  529,  459,  459,  459,
      561,  459,  571,  571,  561, 1120,  451,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  539,
      582,  582,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  452,  452,  539,  452,  486,
      486,  486,  486,  531,  486,  486,  486,  486,  555,  568,
      535,  452,  452,  538,  540,  545,  584,  531,  548, 1119,

      452,  452,  452,  452,  535,  568,  555,  538,  540,  545,
      452,  584,  548,  452,  452,  452,  452,  452,  452,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  495,  495,  495,
      495, 1116,  495,  495,  495,  495,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  455,
      455,  831,  455,  469,  469,  551,  567,  569,  614,  573,
      575,  831,  469,  469,  469,  469,  614,  569,  569,  551,
      567,  579,  470,  573,  575,  469,  469,  469,  469,  469,

      469,  470,  470,  572,  455, 1115,  586,  572,  586,  579,
      470,  470,  470,  470,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  470,  470,  470,  470,  470,  470,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  580,  611, 1113,  611,  580,  616,  616,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  456,  456, 1096,  456,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  476,  476,  578,  585,  478,  478,  610,  628,  628,
      610,  476,  476,  476,  578,  478,  476,  478,  456,  610,

      478, 1091,  585,  612,  615,  618,  476,  476,  476,  615,
      478,  617,  478,  617,  612,  476,  618,  629,  629,  478,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  457,  457,  487,
      487,  487,  487,  487,  457,  487,  487,  487,  487,  487,
      487, 1085,  487,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  622,  622,  622,
      622, 1084,  457,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  490,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  661,  661, 1082,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  460,  460,  642,  642,  642,  642, 1081,  460,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  504,  504,  504,  504, 1080,  504,  504,
      504,  504,  651,  651,  651,  651,  460,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  694,  694, 1079,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  466,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  746,  746, 1078,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  467,
      467,  594,  594,  594,  594,  594,  594,  594,  467,  467,
      467,  467,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  467,  467,  467,  467,  467,  467,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  591,  591,  591,  591, 1076,  591,  591,  591,  591,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  592,  592,  592,
      592,  592,  752,  592,  592,  592,  592,  592,  592, 1075,
      592,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  752,  513,  513,  513,  513, 1074,  513,  513,  513,
      513,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  600,  600,  600,  600,  986,  600,  600,
      600,  600,  601,  601,  601,  601,  601,  986,  601,  601,
      601,  601,  601,  601, 1073,  601,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      603,  603,  603,  603,  603,  603,  603,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  609,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  783,  609,  609,  609,  609,  783,  609,
      609,  609,  609,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  630,
      630,  630,  630, 1071,  630,  630,  630,  630,  631,  631,

      631,  631,  631, 1057,  631,  631,  631,  631,  631,  631,
     1057,  631,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  633,  633,  633,  633,
      633,  633,  633,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  639,  639,  639,  639, 1067,  639,  639,  639,  639,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  641,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  648,  648,  648,  648, 1064,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  658,  662,  662,  662,
      662,  751,  662,  662,  662,  662,  767,  767,  690,  658,
      665,  665,  665,  665,  665,  665,  665,  674,  674,  674,

      674,  690,  657,  657,  657,  657,  751,  657,  657,  657,
      657,  663,  663,  663,  663,  663, 1112,  663,  663,  663,
      663,  663,  663, 1112,  663,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  671,  671,  671,
      671, 1059,  671,  671,  671,  671,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  680,
      680,  680,  680, 1056,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  683,  683,  683,  683,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  689,  695,  695,  695,  695,
     1054,  695,  695,  695,  695,  696,  696,  696,  696,  696,

      774,  696,  696,  696,  696,  696,  696,  768,  696,  774,
      771,  768,  689,  689,  689,  689,  771,  689,  689,  689,
      689,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  698,  698,  698,  698,  698,
      698,  698,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      704,  704,  704,  704, 1030,  704,  704,  704,  704,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  707,  707,  707,
      707,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  713,  713,  713,  713,
     1025,  713,  713,  713,  713,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  716,  716,  716,  716,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  722,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  789,  725,  725,
      780,  749,  776,  749,  780,  725,  749,  749,  776,  789,
      753,  753,  753,  753,  725,  753,  753,  753,  753,  756,
      756,  756,  756,  777,  777, 1021,  722,  722,  722,  722,
      725,  722,  722,  722,  722,  779,  725,  725,  778,  787,
      778,  725,  786,  779,  786,  790,  829,  787,  791,  725,
      790,  792,  725,  792,  725,  725,  725,  829,  725,  726,
      726,  791,  726,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  800,  800, 1017,  726,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  810, 1016,  810,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  732,  732,  808,  793,  794,  796,  733,
      733,  838,  732,  732,  732,  732,  796,  808,  733,  733,
      733,  733,  793,  794,  838,  732,  732,  732,  732,  732,
      732,  733,  733,  733,  733,  733,  733,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  815, 1014,  815,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  734,  734,
      803,  734,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  806,  807,  802,  734,  734,  803, 1013,  805,  806,
      738,  738,  805,  734,  734,  734,  734,  802,  807,  738,
      738,  738,  738,  734,  938,  938,  734,  734,  734,  734,
      734,  734,  738,  738,  738,  738,  738,  738,  739,  739,
      811,  823,  819,  813,  811,  819,  823,  739,  739,  739,
      739,  762,  762,  762,  762,  813,  762,  762,  762,  762,

      739,  739,  739,  739,  739,  739,  816, 1001,  816,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  735,  735,  809,  735,  740,  740,  817, 1000,
      833,  814,  809,  833,  817,  740,  740,  740,  740,  763,
      763,  763,  763,  814,  763,  763,  763,  763,  740,  740,
      740,  740,  740,  740,  742,  742,  825,  735,  825,  818,
      743,  743,  870,  742,  742,  742,  742,  818,  870,  743,
      743,  743,  743,  835,  820,  835,  742,  742,  742,  742,
      742,  742,  743,  743,  743,  743,  743,  743,  820,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  736,  736,  821,  867,
      869,  744,  867,  736,  828,  832,  836,  872,  869,  872,
      744,  744,  821,  747,  747,  837,  828,  832,  836,  744,
      744,  744,  744,  747,  875,  747,  868,  837,  747,  875,
      868,  736,  744,  744,  744,  744,  744,  744,  747,  999,
      747,  851,  851,  851,  851,  968,  968,  747,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  944,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      737,  737,  944,  764,  764,  764,  764,  737,  764,  764,
      764,  764,  860,  860,  860,  860,  737,  737,  842,  842,
      842,  842,  842,  842,  842,  737,  737,  737,  737,  871,
      874,  954,  961,  871,  874,  737,  954,  961,  737,  737,
      737,  737,  737,  737,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  765,  765,  765,  765,  996,  765,  765,  765,
      765,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  741,  741,  881,  881,  881,  881,
      946,  949,  956,  741,  741,  741,  741,  995,  766,  896,
      896,  896,  896,  949,  956,  946,  741,  741,  741,  741,
      741,  741,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  766,  766,  766,  766,
     1093,  766,  766,  766,  766,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  839,  839,  839,  839,  991,  839,  839,
      839,  839,  840,  840,  840,  840,  840, 1093,  840,  840,

      840,  840,  840,  840,  989,  840,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  848,  848,
      848,  848,  982,  848,  848,  848,  848,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  852,  852,  852,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      857,  857,  857,  857,  980,  857,  857,  857,  857,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  861,  861,  861,

      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  866,  878,  878,  878,  878,  963,  878,  878,
      878,  878,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  972,  972,  965,  866,  866,

      866,  866,  965,  866,  866,  866,  866,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  887,  887,  887,
      887,  891,  887,  887,  887,  887,  888,  888,  888,  888,
      988,  888,  888,  888,  888,  889,  889,  889,  889,  988,

      889,  889,  889,  889,  890,  890,  890,  890,  983,  890,
      890,  890,  890,  911,  911,  911,  911,  952,  953,  983,
      952,  891,  891,  891,  891,  962,  891,  891,  891,  891,
      893,  893,  893,  893,  953,  893,  893,  893,  893,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  899,  899,  899,  899,  899,

      899,  899,  899,  899,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  902,  902,  902,  902,  906,  902,  902,  902,
      902,  903,  903,  903,  903,  960,  903,  903,  903,  903,
      904,  904,  904,  904,  955,  904,  904,  904,  904,  905,
      905,  905,  905,  957,  905,  905,  905,  905,  959,  990,
      955,  959,  969,  951,  969,  958,  906,  906,  906,  906,
      990,  906,  906,  906,  906,  908,  908,  908,  908,  958,
      908,  908,  908,  908,  909,  909,  909,  909,  909,  909,

      909,  909,  909,  909,  909,  909,  909,  909,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  917,  917,  917,
      917,  950,  917,  917,  917,  917,  918,  918,  918,  918,

      921,  918,  918,  918,  918,  919,  919,  919,  919,  964,
      919,  919,  919,  919,  920,  920,  920,  920, 1023,  920,
      920,  920,  920,  964, 1023,  921,  921,  921,  921,  966,
      921,  921,  921,  921,  922,  922,  971,  922,  924,  924,
      970, 1015,  970,  966,  971,  948, 1015,  924,  924,  924,
      924,  942,  942,  942,  942,  973,  942,  942,  942,  942,
      924,  924,  924,  924,  924,  924,  925,  925,  974,  922,
      974,  973,  926,  926,  978,  925,  925,  925,  925, 1098,
     1098,  926,  926,  926,  926,  987,  978,  987,  925,  925,
      925,  925,  925,  925,  926,  926,  926,  926,  926,  926,

      943,  943,  943,  943,  947,  943,  943,  943,  943,  977,
      979, 1018,  977,  979, 1018,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  923,  923,
      967,  923,  975,  976, 1048,  981,  984,  993,  967, 1048,
      994,  967,  994,  985,  923,  923,  975,  976,  981,  993,
      928,  928,  984,  923,  923,  923,  923,  985, 1083,  928,
      928,  928,  928,  923, 1083,  997,  923,  923,  923,  923,
      923,  923,  928,  928,  928,  928,  928,  928,  929,  929,
      992,  997, 1019,  998, 1020, 1033, 1019,  929,  929,  929,
      929,  998, 1020, 1033,  992, 1005, 1005, 1005, 1005, 1055,

      929,  929,  929,  929,  929,  929, 1052, 1055, 1052,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  927,  927, 1024,  945, 1022, 1024,  932,  932,
     1022,  927,  927,  927,  927, 1060, 1051,  932,  932,  932,
      932, 1051,  907, 1060,  927,  927,  927,  927,  927,  927,
      932,  932,  932,  932,  932,  932, 1002, 1002, 1002, 1002,
      892, 1002, 1002, 1002, 1002, 1050, 1068, 1053, 1050, 1053,
     1065, 1068, 1065,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  930,  930, 1061,
      930, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,

      877, 1072, 1047,  930,  930, 1061, 1072, 1062, 1058,  933,
      933, 1049,  930,  930,  930,  930, 1047, 1058,  933,  933,
      933,  933,  930, 1062, 1049,  930,  930,  930,  930,  930,
      930,  933,  933,  933,  933,  933,  933,  935,  935, 1077,
     1070, 1066, 1070, 1092, 1077, 1092,  935,  935,  935,  935,
     1011, 1011, 1011, 1011, 1066, 1011, 1011, 1011, 1011,  935,
      935,  935,  935,  935,  935,  876,  873, 1063,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  931,  931, 1063,  847,  845, 1094,  936,  936, 1069,
      931,  931,  931,  931, 1094, 1086,  936,  936,  936,  936,

     1086, 1069,  834,  931,  931,  931,  931,  931,  931,  936,
      936,  936,  936,  936,  936, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1111,
      830, 1111,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  934,  934, 1087,  939,
      939, 1114, 1118, 1087, 1118,  934,  934,  934,  934,  939,
     1095,  939, 1090, 1114,  939, 1095, 1090,  826,  934,  934,
      934,  934,  934,  934,  939, 1121,  939, 1121, 1122, 1012,
     1012, 1012, 1012,  939, 1012, 1012, 1012, 1012, 1026, 1026,
     1026, 1026, 1122, 1026, 1026, 1026, 1026,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  937, 1097, 1117, 1123, 1126, 1129, 1097,  824, 1123,
      937,  937, 1140, 1124, 1140, 1117,  822, 1126, 1129,  937,
      937,  937,  937, 1027, 1027, 1027, 1027, 1124, 1027, 1027,
     1027, 1027,  937,  937,  937,  937,  937,  937, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,

     1009, 1009, 1009, 1009, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1028, 1028,
     1028, 1028,  812, 1028, 1028, 1028, 1028, 1029, 1029, 1029,
     1029,  804, 1029, 1029, 1029, 1029, 1031, 1031, 1031, 1031,
      801, 1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1130,
     1032, 1032, 1032, 1032, 1034, 1034, 1130, 1131,  799,  798,
     1035, 1035, 1131, 1034, 1034, 1034, 1034,  797, 1166, 1035,
     1035, 1035, 1035, 1163, 1166, 1163, 1034, 1034, 1034, 1034,
     1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1036, 1036,
     1181, 1138,  795, 1132,  788, 1181, 1139, 1036, 1036, 1036,

     1036, 1088, 1088, 1088, 1088, 1132, 1088, 1088, 1088, 1088,
     1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1038, 1038, 1134,  785,  784, 1169, 1039, 1039, 1138, 1038,
     1038, 1038, 1038, 1139, 1134, 1039, 1039, 1039, 1039,  775,
      773,  772, 1038, 1038, 1038, 1038, 1038, 1038, 1039, 1039,
     1039, 1039, 1039, 1039, 1040, 1040, 1156, 1040, 1089, 1089,
     1089, 1089, 1158, 1089, 1089, 1089, 1089,  770, 1156, 1179,
     1040, 1040, 1169, 1188, 1158,  769, 1041, 1041, 1161, 1040,
     1040, 1040, 1040, 1179,  724, 1041, 1041, 1041, 1041, 1040,

      723, 1161, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041,
     1041, 1041, 1041, 1041, 1042, 1042, 1164,  703,  701,  692,
      691,  670,  668, 1042, 1042, 1042, 1042,  660,  659, 1164,
     1188,  638,  636,  619,  613,  608, 1042, 1042, 1042, 1042,
     1042, 1042,  606,  599,  597, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1043, 1043,
      590,  589,  583,  576, 1044, 1044,  574, 1043, 1043, 1043,
     1043,  570,  565, 1044, 1044, 1044, 1044,  563,  560,  557,
     1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044,
     1044, 1044, 1045, 1045,  553,  549,  541,  514,  494,  492,

      485, 1045, 1045, 1045, 1045,  484,  434,  433,  431,  429,
      422, 1046,  420,  411, 1045, 1045, 1045, 1045, 1045, 1045,
     1046, 1046,  410,  409,  398,  397, 1099, 1099,  393, 1046,
     1046, 1046, 1046,  391,  384, 1099, 1099, 1099, 1099,  382,
      371,  370, 1046, 1046, 1046, 1046, 1046, 1046, 1099, 1099,
     1099, 1099, 1099, 1099, 1100, 1100,  359,  358,  355,  353,
     1101, 1101,  346, 1100, 1100, 1100, 1100,  344,  336, 1101,
     1101, 1101, 1101,  335,  331,  330, 1100, 1100, 1100, 1100,
     1100, 1100, 1101, 1101, 1101, 1101, 1101, 1101, 1102, 1102,
      322,  320,  312,  293, 1103, 1103,  292, 1102, 1102, 1102,

     1102,  259,  256, 1103, 1103, 1103, 1103,  245,  235,  234,
     1102, 1102, 1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103,
     1103, 1103, 1104, 1104,  229,  227,  220,  218, 1105, 1105,
      211, 1104, 1104, 1104, 1104,  209,  205, 1105, 1105, 1105,
     1105,  162,  158,  155, 1104, 1104, 1104, 1104, 1104, 1104,
     1105, 1105, 1105, 1105, 1105, 1105, 1106, 1106,  152,  149,
      147,  137, 1107, 1107,  135, 1106, 1106, 1106, 1106,  131,
      129, 1107, 1107, 1107, 1107,  123,  118,  117, 1106, 1106,
     1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107, 1107, 1107,
     1108, 1108,  114,  113,  112,  108,  106,   96,   95, 1108,

     1108, 1108, 1108,   91,   90,   85,   80,   78,   49, 1109,
       44,   42, 1108, 1108, 1108, 1108, 1108, 1108, 1109, 1109,
       39,   31,   26,   24,   23,   21,   19, 1109, 1109, 1109,
     1109,    0,    0,    0,    0,    0,    0, 1110,    0,    0,
     1109, 1109, 1109, 1109, 1109, 1109, 1110, 1110,    0,    0,
        0,    0, 1142, 1142,    0, 1110, 1110, 1110, 1110,    0,
        0, 1142, 1142, 1142, 1142,    0,    0,    0, 1110, 1110,
     1110, 1110, 1110, 1110, 1142, 1142, 1142, 1142, 1142, 1142,
     1143, 1143,    0,    0,    0,    0, 1144, 1144,    0, 1143,
     1143, 1143, 1143,    0,    0, 1144, 1144, 1144, 1144,    0,

        0,    0, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144,
     1144, 1144, 1144, 1144, 1145, 1145,    0,    0,    0,    0,
     1146, 1146,    0, 1145, 1145, 1145, 1145,    0,    0, 1146,
     1146, 1146, 1146,    0,    0,    0, 1145, 1145, 1145, 1145,
     1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146, 1147, 1147,
        0,    0,    0,    0, 1148, 1148,    0, 1147, 1147, 1147,
     1147,    0,    0, 1148, 1148, 1148, 1148,    0,    0,    0,
     1147, 1147, 1147, 1147, 1147, 1147, 1148, 1148, 1148, 1148,
     1148, 1148, 1149, 1149,    0,    0,    0,    0, 1170, 1170,
        0, 1149, 1149, 1149, 1149,    0,    0, 1170, 1170, 1170,

     1170,    0,    0,    0, 1149, 1149, 1149, 1149, 1149, 1149,
     1170, 1170, 1170, 1170, 1170, 1170, 1171, 1171,    0,    0,
        0,    0, 1172, 1172,    0, 1171, 1171, 1171, 1171,    0,
        0, 1172, 1172, 1172, 1172,    0,    0,    0, 1171, 1171,
     1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172, 1172, 1172,
     1173, 1173,    0,    0,    0,    0, 1174, 1174,    0, 1173,
     1173, 1173, 1173,    0,    0, 1174, 1174, 1174, 1174,    0,
        0,    0, 1173, 1173, 1173, 1173, 1173, 1173, 1174, 1174,
     1174, 1174, 1174, 1174, 1175, 1175,    0,    0,    0,    0,
     1183, 1183,    0, 1175, 1175, 1175, 1175,    0,    0, 1183,

     1183, 1183, 1183,    0,    0,    0, 1175, 1175, 1175, 1175,
     1175, 1175, 1183, 1183, 1183, 1183, 1183, 1183, 1184, 1184,
        0,    0,    0,    0, 1185, 1185,    0, 1184, 1184, 1184,
     1184,    0,    0, 1185, 1185, 1185, 1185,    0,    0,    0,
     1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185,
     1185, 1185, 1186, 1186,    0,    0,    0,    0, 1189, 1189,
        0, 1186, 1186, 1186, 1186,    0,    0, 1189, 1189, 1189,
     1189,    0,    0,    0, 1186, 1186, 1186, 1186, 1186, 1186,
     1189, 1189, 1189, 1189, 1189, 1189, 1190, 1190,    0,    0,
        0,    0, 1192, 1192,    0, 1190, 1190, 1190, 1190,    0,

        0, 1192, 1192, 1192, 1192,    0,    0,    0, 1190, 1190,
     1190, 1190, 1190, 1190, 1192, 1192, 1192, 1192, 1192, 1192,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1201,    0,    0,    0,    0, 1201, 1201,
     1202, 1202, 1202, 1203,    0, 1203, 1203,    0, 1203, 1203,

     1203, 1203, 1204,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1205, 1205, 1206, 1206, 1206, 1207, 1207, 1208, 1208,
     1208, 1209,    0,    0, 1209, 1209, 1209, 1209, 1209, 1209,
     1210, 1210, 1211, 1211, 1211, 1212,    0, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1213,    0, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1214,    0, 1214,    0, 1214, 1214, 1214,
     1214, 1214, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1218,
        0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1220, 1220, 1220,
     1221, 1221, 1221, 1222, 1222, 1223, 1223, 1223, 1224,    0,
     1224, 1224,    0, 1224, 1224, 1224, 1224, 1225,    0, 1225,
     1225,    0,    0, 1225, 1225, 1225, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1228, 1228, 1228, 1229, 1229, 1229,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1231,
     1231, 1231, 1232, 1232, 1232, 1233,    0, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1235, 1235, 1235, 1236, 1236, 1236, 1237,

        0, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1238,    0,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,    0, 1239,
        0, 1239, 1239, 1239, 1239, 1239, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1243,    0, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1244, 1244, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1246, 1246, 1246, 1247, 1247, 1247, 1248,
     1248, 1248, 1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 1251, 1251,

     1251, 1251, 1251, 1252, 1252, 1252, 1253, 1253, 1253, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255, 1255,
     1255, 1256, 1256, 1256, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1258, 1258, 1258, 1259, 1259, 1259, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1261, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263, 1264,
     1264, 1264, 1265, 1265, 1265, 1266, 1266, 1266, 1267, 1267,
     1267, 1268, 1268, 1268, 1269, 1269, 1269, 1270, 1270, 1270,
     1271, 1271, 1271, 1272, 1272, 1272, 1273, 1273, 1273, 1273,

     1273, 1273, 1273, 1273, 1273, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1275, 1275, 1275, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "csharp_lexer.ll"
#line 2 "csharp_lexer.ll"
/*****************************************************************************
 * This file is part of KDevelop.                                            *
 * Copyright (c) 2005, 2006 Jakob Petsovits <jpetso@gmx.at>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/


#include "csharp.h"
#include "csharp_pp.h"

#include <iostream>

/* call this before calling yylex(): */
void lexer_restart(csharp::parser* parser);

extern std::size_t _G_token_begin, _G_token_end;
extern char *_G_contents;



/* the rest of these declarations are internal to the lexer,
 * don't use them outside of this file. */

namespace
{
  std::size_t _G_current_offset;
  csharp::parser* _G_parser;
  csharp_pp::scope* _G_pp_root_scope;
}

// retrieves the upper-most pre-processor scope
csharp_pp::scope* pp_current_scope();

// to be called from within <<EOF>> rules to free memory and report open scopes
void cleanup();


#define YY_INPUT(buf, result, max_size) \
  { \
    int c = _G_contents[_G_current_offset++]; \
    result = c == 0 ? YY_NULL : (buf[0] = c, 1); \
  }

#define YY_USER_INIT \
_G_token_begin = _G_token_end = 0; \
_G_current_offset = 0; \
\
unsigned char *contents = (unsigned char *) _G_contents; \
if (contents[0] == 0xEF && contents[1] == 0xBB && contents[2] == 0xBF) { \
  _G_token_begin = _G_token_end = 3; \
  _G_current_offset = 3; \
} // check for and ignore the UTF-8 byte order mark

#define YY_USER_ACTION \
_G_token_begin = _G_token_end; \
_G_token_end += yyleng;

// This is meant to be called with the first token in a pre-processor line.
// Pre-processing completely bypasses the normal tokenizing process.
#define PP_PROCESS_TOKEN(t) \
  { \
    csharp_pp::parser pp_parser; \
    csharp_pp::parser::pp_parse_result result = \
      pp_parser.pp_parse_line( csharp_pp::parser::Token_##t, pp_current_scope() ); \
    \
    if (result == csharp_pp::parser::result_eof) \
      { \
        BEGIN(INITIAL); \
        return 0; /* end of file */  \
      } \
    else if (result == csharp_pp::parser::result_invalid) \
      { \
        BEGIN(INITIAL); \
        return csharp::parser::Token_INVALID; \
      } \
    else if (result == csharp_pp::parser::result_ok) \
      { \
        if (pp_current_scope()->is_active()) \
          BEGIN(INITIAL); \
        else \
          BEGIN(PP_SKIPPED_SECTION_PART); \
      } \
  }

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* 0x0041-0x005a, 0x005f, 0x0061-0x007a: one byte in UTF-8 */
/* 0x00c0-0x00d6, 0x00d8-0x00f6, 0x00f8-0x00ff */
/* 0x0100-0x1fff */
/* 0x3040-0x318f */
/* 0x3300-0x337f */
/* 0x3400-0x3d2d */
/* 0x4e00-0x9fff */
/* 0xf900-0xfaff */
/* 0x0080-0xffff */
/* 0x10000-0x10ffff */
/* Unicode characters above 0x10ffff are not supported by C#. */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* 0x2028 and 0x2029, currently unused in this lexer
for performance and convenience reasons. */
/* non-Unicode stuff */








#line 2812 "csharp_lexer.cc"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1
#define PP_EXPECT_NEW_LINE 2
#define PP_DECLARATION 3
#define PP_IF_CLAUSE 4
#define PP_LINE 5
#define PP_MESSAGE 6
#define PP_PRAGMA 7
#define PP_SKIPPED_SECTION_PART 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 188 "csharp_lexer.ll"


 /* whitespace, newlines and comments */

#line 2979 "csharp_lexer.cc"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1194 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8218 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 192 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 193 "csharp_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 195 "csharp_lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 197 "csharp_lexer.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 199 "csharp_lexer.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 200 "csharp_lexer.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 201 "csharp_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 202 "csharp_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 203 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      "Encountered end of file in an unclosed block comment" );
    cleanup();
    return csharp::parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 9:
YY_RULE_SETUP
#line 214 "csharp_lexer.ll"
return csharp::parser::Token_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 215 "csharp_lexer.ll"
return csharp::parser::Token_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 216 "csharp_lexer.ll"
return csharp::parser::Token_LBRACE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 217 "csharp_lexer.ll"
return csharp::parser::Token_RBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 218 "csharp_lexer.ll"
return csharp::parser::Token_LBRACKET;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 219 "csharp_lexer.ll"
return csharp::parser::Token_RBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 220 "csharp_lexer.ll"
return csharp::parser::Token_COMMA;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 221 "csharp_lexer.ll"
return csharp::parser::Token_SEMICOLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 222 "csharp_lexer.ll"
return csharp::parser::Token_DOT;
	YY_BREAK
/* operators */
case 18:
YY_RULE_SETUP
#line 227 "csharp_lexer.ll"
return csharp::parser::Token_COLON;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 228 "csharp_lexer.ll"
return csharp::parser::Token_SCOPE; // TODO: new in 2.0?
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 229 "csharp_lexer.ll"
return csharp::parser::Token_QUESTION;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 230 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility ) {
      return csharp::parser::Token_QUESTIONQUESTION;
    }
    else {
      _G_parser->report_problem( csharp::parser::error,
        "Null coalescing expressions (with \"??\") are not supported by C# 1.0" );
      return csharp::parser::Token_INVALID;
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 240 "csharp_lexer.ll"
return csharp::parser::Token_BANG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 241 "csharp_lexer.ll"
return csharp::parser::Token_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 242 "csharp_lexer.ll"
return csharp::parser::Token_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 243 "csharp_lexer.ll"
return csharp::parser::Token_LESS_THAN;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 244 "csharp_lexer.ll"
return csharp::parser::Token_LESS_EQUAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 245 "csharp_lexer.ll"
return csharp::parser::Token_GREATER_THAN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 246 "csharp_lexer.ll"
return csharp::parser::Token_GREATER_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 247 "csharp_lexer.ll"
return csharp::parser::Token_NOT_EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 248 "csharp_lexer.ll"
return csharp::parser::Token_LOG_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 249 "csharp_lexer.ll"
return csharp::parser::Token_LOG_OR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 250 "csharp_lexer.ll"
return csharp::parser::Token_ARROW_RIGHT; // TODO: new in 2.0 or not?
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 251 "csharp_lexer.ll"
return csharp::parser::Token_INCREMENT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 252 "csharp_lexer.ll"
return csharp::parser::Token_DECREMENT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 253 "csharp_lexer.ll"
return csharp::parser::Token_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 254 "csharp_lexer.ll"
return csharp::parser::Token_PLUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 255 "csharp_lexer.ll"
return csharp::parser::Token_PLUS_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 256 "csharp_lexer.ll"
return csharp::parser::Token_MINUS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 257 "csharp_lexer.ll"
return csharp::parser::Token_MINUS_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 258 "csharp_lexer.ll"
return csharp::parser::Token_STAR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 259 "csharp_lexer.ll"
return csharp::parser::Token_STAR_ASSIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 260 "csharp_lexer.ll"
return csharp::parser::Token_SLASH;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 261 "csharp_lexer.ll"
return csharp::parser::Token_SLASH_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 262 "csharp_lexer.ll"
return csharp::parser::Token_BIT_AND;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 263 "csharp_lexer.ll"
return csharp::parser::Token_BIT_AND_ASSIGN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 264 "csharp_lexer.ll"
return csharp::parser::Token_BIT_OR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 265 "csharp_lexer.ll"
return csharp::parser::Token_BIT_OR_ASSIGN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 266 "csharp_lexer.ll"
return csharp::parser::Token_BIT_XOR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 267 "csharp_lexer.ll"
return csharp::parser::Token_BIT_XOR_ASSIGN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 268 "csharp_lexer.ll"
return csharp::parser::Token_REMAINDER;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 269 "csharp_lexer.ll"
return csharp::parser::Token_REMAINDER_ASSIGN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 270 "csharp_lexer.ll"
return csharp::parser::Token_LSHIFT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 271 "csharp_lexer.ll"
return csharp::parser::Token_LSHIFT_ASSIGN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 272 "csharp_lexer.ll"
return csharp::parser::Token_RSHIFT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 273 "csharp_lexer.ll"
return csharp::parser::Token_RSHIFT_ASSIGN;
	YY_BREAK
/* reserved words */
case 56:
YY_RULE_SETUP
#line 278 "csharp_lexer.ll"
return csharp::parser::Token_ABSTRACT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 279 "csharp_lexer.ll"
return csharp::parser::Token_AS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 280 "csharp_lexer.ll"
return csharp::parser::Token_BASE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 281 "csharp_lexer.ll"
return csharp::parser::Token_BOOL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 282 "csharp_lexer.ll"
return csharp::parser::Token_BREAK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 283 "csharp_lexer.ll"
return csharp::parser::Token_BYTE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 284 "csharp_lexer.ll"
return csharp::parser::Token_CASE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 285 "csharp_lexer.ll"
return csharp::parser::Token_CATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 286 "csharp_lexer.ll"
return csharp::parser::Token_CHAR;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 287 "csharp_lexer.ll"
return csharp::parser::Token_CHECKED;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 288 "csharp_lexer.ll"
return csharp::parser::Token_CLASS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 289 "csharp_lexer.ll"
return csharp::parser::Token_CONST;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 290 "csharp_lexer.ll"
return csharp::parser::Token_CONTINUE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 291 "csharp_lexer.ll"
return csharp::parser::Token_DECIMAL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 292 "csharp_lexer.ll"
return csharp::parser::Token_DEFAULT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 293 "csharp_lexer.ll"
return csharp::parser::Token_DELEGATE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 294 "csharp_lexer.ll"
return csharp::parser::Token_DO;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 295 "csharp_lexer.ll"
return csharp::parser::Token_DOUBLE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 296 "csharp_lexer.ll"
return csharp::parser::Token_ELSE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 297 "csharp_lexer.ll"
return csharp::parser::Token_ENUM;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 298 "csharp_lexer.ll"
return csharp::parser::Token_EVENT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 299 "csharp_lexer.ll"
return csharp::parser::Token_EXPLICIT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 300 "csharp_lexer.ll"
return csharp::parser::Token_EXTERN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 301 "csharp_lexer.ll"
return csharp::parser::Token_FALSE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 302 "csharp_lexer.ll"
return csharp::parser::Token_FINALLY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 303 "csharp_lexer.ll"
return csharp::parser::Token_FIXED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 304 "csharp_lexer.ll"
return csharp::parser::Token_FLOAT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 305 "csharp_lexer.ll"
return csharp::parser::Token_FOR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 306 "csharp_lexer.ll"
return csharp::parser::Token_FOREACH;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 307 "csharp_lexer.ll"
return csharp::parser::Token_GOTO;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 308 "csharp_lexer.ll"
return csharp::parser::Token_IF;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 309 "csharp_lexer.ll"
return csharp::parser::Token_IMPLICIT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 310 "csharp_lexer.ll"
return csharp::parser::Token_IN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 311 "csharp_lexer.ll"
return csharp::parser::Token_INT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 312 "csharp_lexer.ll"
return csharp::parser::Token_INTERFACE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 313 "csharp_lexer.ll"
return csharp::parser::Token_INTERNAL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 314 "csharp_lexer.ll"
return csharp::parser::Token_IS;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 315 "csharp_lexer.ll"
return csharp::parser::Token_LOCK;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 316 "csharp_lexer.ll"
return csharp::parser::Token_LONG;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 317 "csharp_lexer.ll"
return csharp::parser::Token_NAMESPACE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 318 "csharp_lexer.ll"
return csharp::parser::Token_NEW;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 319 "csharp_lexer.ll"
return csharp::parser::Token_NULL;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 320 "csharp_lexer.ll"
return csharp::parser::Token_OBJECT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 321 "csharp_lexer.ll"
return csharp::parser::Token_OPERATOR;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 322 "csharp_lexer.ll"
return csharp::parser::Token_OUT;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 323 "csharp_lexer.ll"
return csharp::parser::Token_OVERRIDE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 324 "csharp_lexer.ll"
return csharp::parser::Token_PARAMS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 325 "csharp_lexer.ll"
return csharp::parser::Token_PRIVATE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 326 "csharp_lexer.ll"
return csharp::parser::Token_PROTECTED;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 327 "csharp_lexer.ll"
return csharp::parser::Token_PUBLIC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 328 "csharp_lexer.ll"
return csharp::parser::Token_READONLY;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 329 "csharp_lexer.ll"
return csharp::parser::Token_REF;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 330 "csharp_lexer.ll"
return csharp::parser::Token_RETURN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 331 "csharp_lexer.ll"
return csharp::parser::Token_SBYTE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 332 "csharp_lexer.ll"
return csharp::parser::Token_SEALED;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 333 "csharp_lexer.ll"
return csharp::parser::Token_SHORT;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 334 "csharp_lexer.ll"
return csharp::parser::Token_SIZEOF;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 335 "csharp_lexer.ll"
return csharp::parser::Token_STACKALLOC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 336 "csharp_lexer.ll"
return csharp::parser::Token_STATIC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 337 "csharp_lexer.ll"
return csharp::parser::Token_STRING;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 338 "csharp_lexer.ll"
return csharp::parser::Token_STRUCT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 339 "csharp_lexer.ll"
return csharp::parser::Token_SWITCH;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 340 "csharp_lexer.ll"
return csharp::parser::Token_THIS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 341 "csharp_lexer.ll"
return csharp::parser::Token_THROW;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 342 "csharp_lexer.ll"
return csharp::parser::Token_TRUE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 343 "csharp_lexer.ll"
return csharp::parser::Token_TRY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 344 "csharp_lexer.ll"
return csharp::parser::Token_TYPEOF;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 345 "csharp_lexer.ll"
return csharp::parser::Token_UINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 346 "csharp_lexer.ll"
return csharp::parser::Token_ULONG;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 347 "csharp_lexer.ll"
return csharp::parser::Token_UNCHECKED;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 348 "csharp_lexer.ll"
return csharp::parser::Token_UNSAFE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 349 "csharp_lexer.ll"
return csharp::parser::Token_USHORT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 350 "csharp_lexer.ll"
return csharp::parser::Token_USING;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 351 "csharp_lexer.ll"
return csharp::parser::Token_VIRTUAL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 352 "csharp_lexer.ll"
return csharp::parser::Token_VOID;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 353 "csharp_lexer.ll"
return csharp::parser::Token_VOLATILE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 354 "csharp_lexer.ll"
return csharp::parser::Token_WHILE;
	YY_BREAK
/* Non-keyword identifiers. They only have special meaning in
  * specific contexts and are treated as identifiers otherwise. */
case 133:
YY_RULE_SETUP
#line 360 "csharp_lexer.ll"
return csharp::parser::Token_ADD;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 361 "csharp_lexer.ll"
return csharp::parser::Token_ALIAS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 362 "csharp_lexer.ll"
return csharp::parser::Token_GET;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 363 "csharp_lexer.ll"
return csharp::parser::Token_GLOBAL;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 364 "csharp_lexer.ll"
return csharp::parser::Token_PARTIAL;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 365 "csharp_lexer.ll"
return csharp::parser::Token_REMOVE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 366 "csharp_lexer.ll"
return csharp::parser::Token_SET;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 367 "csharp_lexer.ll"
return csharp::parser::Token_VALUE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 368 "csharp_lexer.ll"
return csharp::parser::Token_WHERE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 369 "csharp_lexer.ll"
return csharp::parser::Token_YIELD;
	YY_BREAK
/* An unspecified one, for global attributes: */
case 143:
YY_RULE_SETUP
#line 372 "csharp_lexer.ll"
return csharp::parser::Token_ASSEMBLY;
	YY_BREAK
/* characters and strings */
case 144:
YY_RULE_SETUP
#line 377 "csharp_lexer.ll"
return csharp::parser::Token_CHARACTER_LITERAL;
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 378 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      std::string("Invalid character literal: ") + yytext );
    return csharp::parser::Token_CHARACTER_LITERAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 384 "csharp_lexer.ll"
return csharp::parser::Token_STRING_LITERAL;
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 385 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      std::string("Invalid string literal: ") + yytext );
    return csharp::parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* verbatim strings: */
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 391 "csharp_lexer.ll"
return csharp::parser::Token_STRING_LITERAL;
	YY_BREAK
/* the pre-processor */

case 149:
YY_RULE_SETUP
#line 398 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_DEFINE);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 399 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_UNDEF);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 400 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_IF);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 401 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_ELIF);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 402 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ELSE);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 403 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ENDIF);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 404 "csharp_lexer.ll"
BEGIN(PP_LINE);            PP_PROCESS_TOKEN(PP_LINE);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 405 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ERROR);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 406 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_WARNING);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 407 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_REGION);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 408 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ENDREGION);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 409 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility ) {
      BEGIN(PP_PRAGMA); PP_PROCESS_TOKEN(PP_PRAGMA);
    }
    else {
      BEGIN(INITIAL);
      _G_parser->report_problem( csharp::parser::error,
        "#pragma directives are not supported by C# 1.0" );
      return csharp::parser::Token_INVALID;
    }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 420 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      std::string("Invalid pre-processor directive: ``") + yytext + "''" );
    return csharp::parser::Token_INVALID;
}
	YY_BREAK


case YY_STATE_EOF(PP_EXPECT_NEW_LINE):
case YY_STATE_EOF(PP_DECLARATION):
case YY_STATE_EOF(PP_IF_CLAUSE):
case YY_STATE_EOF(PP_LINE):
case YY_STATE_EOF(PP_MESSAGE):
case YY_STATE_EOF(PP_PRAGMA):
#line 428 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::warning,
      "No newline at the end of the file" );
    return csharp_pp::parser::Token_PP_NEW_LINE;
}
	YY_BREAK


case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 437 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 438 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 164:
YY_RULE_SETUP
#line 442 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 443 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      "You may not define ``true'' or ``false'' with #define or #undef" );
    return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL;  // we could do Token_INVALID here,
    // but this way the error is shown and the parser continues, I prefer this.
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 449 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL; // ...including keywords
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 450 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 451 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 169:
YY_RULE_SETUP
#line 455 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 456 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_EQUAL;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 457 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NOT_EQUAL;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 458 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LOG_AND;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 459 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LOG_OR;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 460 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_BANG;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 461 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_TRUE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 462 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_FALSE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 463 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LPAREN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 464 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_RPAREN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 465 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL;
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 466 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 467 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


/* splitting the line at "#" keeps the token shorter than real directives, */
/* so that those are recognized and not taken as skipped text as well.     */
case 182:
YY_RULE_SETUP
#line 473 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 474 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 475 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK


case 185:
YY_RULE_SETUP
#line 479 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 480 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 481 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LINE_NUMBER;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 482 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_FILE_NAME;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 483 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_DEFAULT;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 484 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_IDENTIFIER_OR_KEYWORD;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 485 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 192:
YY_RULE_SETUP
#line 489 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_MESSAGE;
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 490 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK


case 194:
YY_RULE_SETUP
#line 494 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_PRAGMA_TEXT;
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 495 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK

/* identifiers and number literals */
case 196:
YY_RULE_SETUP
#line 501 "csharp_lexer.ll"
return csharp::parser::Token_IDENTIFIER;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 503 "csharp_lexer.ll"
return csharp::parser::Token_INTEGER_LITERAL;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 504 "csharp_lexer.ll"
return csharp::parser::Token_REAL_LITERAL;
	YY_BREAK
/* everything else is not a valid lexeme */
case 199:
YY_RULE_SETUP
#line 509 "csharp_lexer.ll"
return csharp::parser::Token_INVALID;
	YY_BREAK
/* some additional checking for unclosed #ifs and #regions at the EOF */

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP_SKIPPED_SECTION_PART):
#line 515 "csharp_lexer.ll"
{
  cleanup();
  return csharp::parser::Token_EOF;
}
	YY_BREAK

case 200:
YY_RULE_SETUP
#line 521 "csharp_lexer.ll"
ECHO;
	YY_BREAK
#line 4177 "csharp_lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1194 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1194 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1193);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 521 "csharp_lexer.ll"



void lexer_restart(csharp::parser* parser) {
  _G_parser = parser;
  _G_pp_root_scope = 0;
  yyrestart(NULL);
  BEGIN(INITIAL); // is not set automatically by yyrestart()
  YY_USER_INIT
}

csharp_pp::scope* pp_current_scope()
{
  if (_G_pp_root_scope == 0)
    {
      _G_pp_root_scope = new csharp_pp::scope(_G_parser);
    }
  return _G_pp_root_scope->current_scope();
}

void cleanup()
{
  // check for open scopes, and pop them / report errors as needed
  if (_G_pp_root_scope != 0)
    {
      csharp_pp::scope* current_scope = pp_current_scope();
      csharp_pp::scope::scope_type scope_type = current_scope->type();

      while (scope_type != csharp_pp::scope::type_root)
        {
          if (scope_type == csharp_pp::scope::type_if)
            {
              _G_parser->report_problem( csharp::parser::error,
                "Encountered end of file in an unclosed #if/#elif/#else section" );
            }
          else if (scope_type == csharp_pp::scope::type_region)
            {
              _G_parser->report_problem( csharp::parser::error,
                "Encountered end of file in an unclosed #region section" );
            }

          if ( !current_scope->pop_scope(scope_type, &current_scope) )
            break;

          scope_type = current_scope->type();
        }

      delete _G_pp_root_scope;
      _G_pp_root_scope = 0;
    }
}

int yywrap() { return 1; }

