#line 2 "cclexer.cpp"

#line 4 "cclexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int cc::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[746] =
    {   0,
        0,    0,    6,    6,  101,   99,    1,    2,   22,   99,
        4,   96,   49,   43,   99,   10,   11,   39,   35,   16,
       37,   18,   41,   97,   97,   20,   17,   25,   34,   27,
       21,   14,   15,   47,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       12,   45,   13,   23,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,    6,    8,    7,    1,   29,    0,
       95,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    4,   96,   96,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   50,   30,   44,    0,   93,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       40,   32,   36,   33,   38,   19,    0,   98,    0,    0,
        0,    0,    0,    5,    3,   42,   98,   97,    0,   98,
       98,   97,    0,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,   51,   26,   24,   28,   53,   48,
       96,   96,   96,   96,   96,   96,   96,   96,   60,   96,
       96,   96,   96,   96,   96,   65,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   46,   31,   96,
       96,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    6,    7,

        7,    9,    0,    0,    0,    0,    0,    0,    0,    0,
       96,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   55,   98,
       98,    0,    0,    0,    0,    0,    0,    0,    0,    3,
       98,   98,   98,    0,    0,    0,    0,    0,   97,    0,
       98,   98,    0,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   52,   54,   96,   96,   96,   96,

       87,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   63,   96,   96,   78,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,    0,    0,    0,    0,    0,   96,   96,   96,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,   96,   96,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,    0,    0,   98,    0,   98,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,   98,    0,   97,   96,   96,   96,
       96,   75,   96,   57,   79,   96,   96,   96,   96,   61,
       62,   96,   96,   64,   96,   81,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   77,   96,   96,   96,   96,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,   98,   98,    0,    0,   98,   98,
        0,    0,    0,    0,    0,   96,   96,   96,   96,   56,
       72,   96,   96,   96,   96,   84,   96,   96,   96,   80,
       96,   96,   96,   96,   86,   96,   96,   68,   96,    0,
        0,    0,    0,    0,    0,    0,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   98,   98,
        0,   98,   98,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   96,   96,   96,   96,
       96,   96,   85,   74,   91,   96,   66,   82,   69,   67,
       96,   96,   96,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   98,   88,   96,   96,   96,   96,   59,
       96,   73,   96,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,   96,   90,   96,
       58,   76,   83,   70,    0,   96,   96,   96,   96,   96,
       96,   96,   71,   89,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   28,   28,   29,   30,   31,
        7,    7,    7,    7,    7,   32,    7,    7,    7,   33,
        7,    7,    7,    7,    7,    7,    7,   34,    7,    7,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,    7,   49,   50,   51,   52,
       53,   54,    7,   55,   56,   57,   58,   59,   60,   61,
       62,    7,   63,   64,   65,   66,    1,   67,   68,   69,
       69,   70,   70,   71,   72,   73,   73,   74,   74,   75,
       75,   74,   74,   76,   76,   76,   76,   76,   76,   76,
       77,   78,   78,   79,   79,   79,   79,   79,   79,   80,
       80,   80,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   93,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  102,  102,
      102,    1,    1,  105,  106,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  108,  107,  109,  107,
      107,  107,  107,  110,  111,  112,  113,  114,  115,  115,
      115,  115,  115,  112,  112,  112,  112,  112,  116,  117,
      118,  118,  118,  118,  118,  118,  118,  119,  120,  120,
      120,  121,  122,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[123] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    1,    5,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    6,    7,    7,    7,
        7,    6,    6,    6,    7,    7,    8,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        9,    9,    9,    9,    9,    9,   10,   10,   11,   10,

       10,   10,   10,   10,    1,    3,    3,    3,    3,    3,
        3,    1,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[800] =
    {   0,
        0,    0,  120,  121, 2366, 8770, 2363, 8770, 2339,  132,
        0,  106, 2338,  119,  252, 8770, 8770, 2334,  115, 8770,
      116,  150,  118,  358,  159, 8770, 8770,  114, 2329,  120,
     8770, 8770, 8770, 2319,  186,   91,  109,  112,  119,  123,
      142,  121,  148,  143,  111,  217,  115,  114,  144,  147,
     8770,  160, 8770, 8770,    0,    0,  146,  185,  395, 2274,
      235,  211,    0,  235,    0, 8770,  143, 2339, 8770,  497,
     8770, 8770,  390,  617,  673,  273,  702,  382,  734,  257,
      769,  166,    0,  314,  397,    0,    0,  300,  421,  794,
     2268,  336,  336,    0,  442, 8770, 8770, 8770,  896, 8770,

      529, 1016, 1072,  483, 1101,  521, 1133,  391, 1168,  204,
     8770, 8770, 8770, 8770, 8770, 8770, 2318,  881,  543,  537,
      557, 2266, 2228, 8770,    0, 8770,  914,  931, 1256, 8770,
      951, 8770, 1262,  581,  575, 1226, 2263, 2226, 1305,  597,
      820, 1287, 2260, 2223, 2301, 8770, 8770, 8770, 2296, 8770,
      523, 2269, 2262, 2274, 2261, 2276, 2258, 2264, 2248, 2241,
     2238, 2238, 2241, 2238, 2235,    0,  151, 2238,  153, 2236,
     2242, 2247, 2237, 2230,  242,  239, 2235, 8770, 8770,    0,
        0, 1366,    0,  985,    0, 1255, 2063,    0,  231,  869,
        0, 1331,    0,    0,    0,    0,    0,  260,    0,    0,

      205, 8770, 1480, 1600, 1720, 1840, 1960, 2080, 2136, 2174,
        0,    0,    0, 1339,    0, 1349, 2062,    0,  277,  964,
        0, 1375,    0,    0,    0,    0,    0,  320, 2276, 8770,
     1448, 2396, 2452, 1387, 2481, 1440, 2513,  473, 2548,  345,
     2650, 2770, 2890, 1507, 2946, 2984, 3022, 3060, 8770, 8770,
     1539, 1488, 1523, 1533, 1542, 1554,  394, 1289,  459,    0,
     1637, 8770, 1655, 1438, 1594, 1686, 2072, 2029, 8770,  935,
     1707, 8770, 1459, 1697, 1805, 2064, 2027, 1884, 1890, 1716,
     1763, 1883, 1892, 1902,  499, 1592, 1914, 1924, 1934, 1943,
     1953,  502, 1662,  521, 8770, 8770, 2028, 2261,  382,  338,

     2069,  380,  196,  503,  511,  512,  354,  315,  539,  589,
      598,  404, 2068,  448,  150, 2067,  230,  596,  846,  848,
      412,  866,  892,  861,  595,  916,  885,  868,  918, 2294,
     2056, 2668, 1970, 1993, 3085, 1996, 2014,    0, 1985, 1934,
     2288, 3187, 3243, 2036, 3272, 2052, 3304,  916, 3339,  931,
     3441, 3561, 2340, 3617, 3655, 3692, 3794, 1977, 3850, 3888,
     1903, 1882, 1881, 3990, 4110, 4230, 2635, 4334, 4372, 4410,
     4505, 4555, 2621, 4593, 4631, 4668, 2767, 4706, 4744, 4782,
     2337, 2638, 2219, 2318, 2642, 1873, 1835, 2797, 2341, 2828,
     2267, 2736, 2859, 1870, 1833, 2777, 2880, 2890, 2899, 3110,

      951, 2732,  972, 3120, 3130, 3141, 3150, 3160,  977, 2783,
      980, 3438, 3465, 1261, 3483, 3977, 4008, 1223,  912, 1248,
     1267, 1875,  917, 1856, 1855, 1021, 1018, 1272, 1302, 1840,
     1835, 1234, 1313, 1833,  594, 1831, 1333, 1258, 1319,  886,
     1330, 1290,  977, 1236, 1019, 1829, 1351, 1020, 4028, 1827,
     3367, 3436, 4807, 1818, 3486, 4047, 3492,    0, 3517, 1796,
        0, 1341, 3471, 1393, 4909, 5029, 5149, 3812, 5253, 5291,
     5329, 5431, 5551, 3765, 5607, 5645, 5682, 5784, 3530, 3720,
     3791, 3804, 4084, 3933, 4110, 4121, 4261, 3950, 4067, 5904,
     6024, 4214, 6080, 6118, 6155, 6257, 4128, 6313, 6351, 4511,

     4161, 4287, 4476,  517, 1774, 6446, 4240, 4500, 4513, 4835,
     4848, 4313, 4879, 4890, 4958, 6496,    0, 4921, 4952, 4968,
     4982, 4992, 1402, 4539, 1410, 5002, 5012, 5022, 5031, 5041,
     1414, 4923, 1418, 5191, 5418, 5450, 1419, 4024, 5454, 8770,
     5075, 5102, 5406, 1809, 1771, 5485, 5771, 1453, 1458, 1830,
     1829, 1481, 1512, 1822, 1502, 1821, 1820, 1363, 1517, 1812,
     1310,  288, 1437, 1800, 1780, 1626, 1486, 1777, 5802, 5140,
     5154, 5367, 1737,    0, 1575, 5146, 1625, 5819, 6598, 6718,
     5713, 6774, 6812, 6849, 6951, 5167, 7007, 7045, 7147, 7267,
        0, 5427, 5488,    0, 5782, 5874, 5891, 7387, 6009, 7507,

     7627, 5904, 7683, 7721, 7758, 7860, 5522, 5981, 5994, 6223,
     6236, 5232, 6262, 6188, 7980, 5205, 5360, 6452, 6269, 6418,
     6431, 6444, 6457, 6528, 6555, 6566, 8093, 6634, 6637, 6652,
     4168, 7134, 8770, 5744, 5855, 6640, 1714, 1647, 6601, 6686,
     6874, 6913, 6923, 1666, 5784, 1681, 1460, 1633, 1652, 1680,
     1523, 1705, 1655, 1653, 1629, 1628, 1610, 1591, 1560, 1539,
     1348, 1522, 1513, 7165, 6997, 5961, 6950, 7129, 1705, 1460,
     7285, 5084, 7079, 7202, 7329, 7100, 7121, 7357, 7368, 7279,
     7153, 7375, 8207, 7443, 7388, 7431, 7444, 7464, 7477, 7494,
     7514, 7525, 7845, 7612, 7639, 7814, 7824, 7834, 7601, 7844,

     1708, 7604, 1734, 7919, 1485, 1711, 1428, 1635, 1324, 1287,
     1733, 1267, 1488, 1252, 8012, 7978, 7991, 8059, 8072, 8085,
     7911, 8111, 8137, 8225, 8087, 8207, 8242, 1731, 1236, 1710,
     1019,  977,  951,  949, 8260, 1769,  887, 1717, 1775, 1818,
     1819, 1828,  557,  494, 8770, 8358, 8369, 8380,  528, 8391,
     8397, 8402, 8408, 8413, 8417, 8428, 8439, 8450, 8461,  443,
     8467, 8472, 8478, 8483, 8487, 8498, 8509, 8515, 8521, 8527,
     8533, 8539, 8547, 8558, 8569, 8580, 8586, 8592, 8598, 8604,
     8610, 8618, 8629,  260, 8635, 8641, 8652, 8663, 8674, 8680,
     8686, 8697, 8708, 8719,  154, 8725, 8736, 8747, 8758

    } ;

static yyconst flex_int16_t yy_def[800] =
    {   0,
      745,    1,  746,  746,  745,  745,  745,  745,  745,  747,
      748,  749,  745,  745,  750,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  749,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
      745,  745,  745,  745,  751,  752,  752,  752,  745,  753,
      754,  745,  755,  745,  756,  745,  757,  745,  745,  747,
      745,  745,  758,  747,   74,   75,   75,   77,   77,   79,
       79,   81,  759,  760,  760,  761,  762,  762,  762,  745,
      763,  764,  745,  765,  745,  745,  745,  745,  766,  745,

      766,  766,  102,  103,  103,  105,  105,  107,  107,  109,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  767,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  745,  745,   85,
       85,   85,  768,  768,  184,  184,  186,  184,  768,  768,
      769,  745,  770,  771,  772,  770,  770,  745,  773,  774,

      774,  745,  775,  776,  776,  775,  776,  776,  208,  208,
       85,   85,  777,  777,  214,  214,  216,  214,  777,  777,
      778,  745,  779,  780,  781,  779,  779,  745,  782,  745,
      782,  782,  232,  233,  233,  235,  235,  237,  237,  239,
      782,  782,  782,  243,  239,  239,  239,  239,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  783,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  784,  784,  298,  298,

      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  785,  785,  745,  786,  745,  330,  298,  298,
      787,  787,  342,  343,  343,  345,  345,  347,  347,  349,
      788,  788,  352,  352,  354,  354,  787,  352,  352,  352,
      298,  298,  298,  789,  789,  789,  366,  366,  368,  368,
      366,  368,  372,  372,  374,  374,  366,  374,  374,  374,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      790,  790,  745,  791,  745,  449,  790,  457,  457,  459,
      457,  790,  790,  745,  792,  792,  792,  467,  467,  469,
      469,  793,  793,  473,  473,  475,  475,  793,  473,  473,
      473,  473,  473,  473,  473,  473,  467,  473,  473,  794,
      794,  491,  491,  493,  493,  794,  491,  491,  491,  496,

      491,  491,  493,  495,  495,  496,  491,  491,  491,  491,
      491,  491,  491,  491,  496,  491,  516,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  795,  795,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  796,
      796,  796,  572,  571,  796,  796,  745,  547,  797,  797,
      580,  580,  582,  582,  797,  580,  580,  580,  798,  798,
      590,  590,  590,  590,  590,  590,  590,  798,  585,  799,

      799,  601,  601,  603,  603,  799,  601,  601,  601,  601,
      601,  601,  601,  601,  799,  601,  601,  615,  601,  601,
      601,  601,  601,  601,  601,  601,  615,  615,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  585,  580,  580,  582,  584,  584,
      585,  580,  580,  580,  580,  580,  580,  580,  580,  585,
      580,  580,  798,  615,  601,  601,  601,  601,  601,  601,
      601,  601,  615,  615,  615,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  585,  580,  580,  580,  580,  580,
      580,  580,  580,  585,  585,  615,  745,  547,  547,  547,
      547,  547,  547,  547,  585,  547,  547,  547,  547,  547,
      547,  547,  547,  547,    0,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745

    } ;

static yyconst flex_int16_t yy_nxt[8893] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       25,   26,   27,   28,   29,   30,   31,   12,   12,   12,
       12,   12,   12,   12,   32,    6,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   12,   43,   12,   44,
       12,   12,   12,   12,   45,   46,   47,   48,   49,   50,
       12,   12,   51,   52,   53,   54,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,   55,   56,   57,   58,   59,
       60,    6,   61,   62,   63,   64,    6,    6,    6,    6,
        6,    6,   66,   66,   85,   85,   85,   97,  112,   84,
      124,  114,   67,   67,   71,  125,   72,  145,  146,  113,
      115,  116,  126,   98,  148,  149,  152,   84,  153,   84,
       84,  155,   84,   84,  169,  201,   84,   84,  156,   84,
      202,   84,  158,  154,  157,  175,  117,   73,  118,  118,
      118,  159,  160,  165,  161,  127,  174,  139,  139,  139,
       84,   84,   84,  162,  178,   84,   84,  130,  131,  130,
      132,  163,  166,  177,  164,  168,  176,  435,  318,  167,

      315,  130,  131,  130,   85,   85,   85,  316,  132,  319,
       84,   86,   87,   88,   89,   90,   91,  201,   92,   93,
       94,   95,  202,  179,  151,  182,  182,  182,  182,  182,
      182,  182,  210,  210,  210,  423,   74,   74,   74,   74,
       74,   75,   76,   76,   76,   76,   76,   76,   77,   78,
       79,   80,   81,   82,  100,   84,   84,  119,  120,  121,
      122,  100,   84,  170,  171,  123,  140,  141,  142,  143,
      248,  248,  248,  172,  144,  436,  173,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  327,  101,  328,  325,
       84,   86,   87,   88,   89,   90,   91,  326,   92,   93,

       94,   95,  191,  191,  191,  192,  182,  182,  182,  193,
      196,  196,  196,  196,  196,  197,  197,  197,  197,  197,
      197,  197,  197,  209,  209,  209,  209,  209,  209,  659,
      195,   84,   85,   85,   85,  129,  129,  129,  198,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,  212,  212,  212,  429,  102,  102,  102,  102,
      102,  103,  104,  104,  104,  104,  104,  104,  105,  106,
      107,  108,  109,  110,  127,   84,  128,  128,  129,  212,
      212,  212,  212,  212,  212,  212,  130,  131,  130,  132,
      421,  133,   71,  428,   70,   85,   85,   85,   84,  204,

      130,  131,  130,  221,  221,  221,  222,  132,  205,  205,
      223,  370,  370,  370,   84,   85,   85,   85,  133,   86,
       87,   88,   89,   90,   91,   70,   92,   93,   94,   95,
      204,  225,  422,  420,  204,  226,  226,  226,  226,  226,
       84,  204,   84,  433,  204,   84,  204,  206,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  247,  247,  247,
      247,  247,  247,  440,   84,  134,  135,  136,  137,  118,
      118,  118,   84,  138,  183,  183,  184,  183,  184,  183,
      185,  183,  185,  183,  186,  183,  187,  183,  188,  188,
      183,  188,  183,  183,  183,  189,  183,  189,  183,   71,

      434,   72,   86,   87,   88,   89,   90,   91,   84,   92,
       93,   94,   95,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  227,  227,  227,  227,  227,  227,  227,  227,
       84,  100,   73,  241,  118,  118,  118,   84,   99,  369,
      369,  369,  369,  369,  369,  228,  424,  242,  242,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  297,   84,   99,  425,  298,  426,  427,  241,
      299,   84,   84,  241,  129,  129,  129,  139,  139,  139,
      241,  300,  430,  241,  625,  241,  243,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  139,  139,  139,   84,

       84,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   71,
      232,   72,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  252,  431,
      252,  432,  253,  437,  253,  557,  254,  444,  255,   84,
      256,  256,   73,  256,   84,   84,   84,  257,   84,  257,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  139,  139,  139,  139,
      139,  139,  139,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  213,  213,  214,  213,  214,  213,  215,
      213,  215,  213,  216,  213,  217,  213,  218,  218,  213,
      218,  213,  213,  213,  219,  213,  219,  213,  100,  118,

      118,  118,  439,  438,  443,  230,   84,  447,   84,  250,
      251,  250,  139,  139,  139,  139,  139,  139,  139,  139,
      139,   84,  441,  250,  251,  250,   84,  446,   84,  561,
      739,  231,  261,  261,  261,  182,  182,  182,  182,  182,
      182,  182,  262,  263,  262,   84,   84,  127,  442,  128,
      128,  129,   84,  271,  271,  271,  262,  263,  262,  130,
      131,  130,  269,  445,  270,  550,  270,  448,  547,  271,
      271,  271,   84,  130,  131,  130,   84,   84,   84,  272,
      269,  272,  470,  470,  470,  470,  470,  470,  119,  120,
      121,  122,   84,  272,   84,  272,  123,  471,  471,  471,

      232,  232,  232,  232,  232,  233,  234,  234,  234,  234,
      234,  234,  235,  236,  237,  238,  239,  240,  100,  564,
       84,  264,  265,  266,  267,  230,  261,  261,  261,  268,
      212,  212,  212,  212,  212,  212,  212,   84,  134,  135,
      136,  137,  273,  274,  275,  276,  138,  261,  261,  261,
      277,  231,  271,  271,  271,  271,  271,  271,  273,  274,
      275,  276,   84,  568,  566,  552,  277,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  551,   84,   84,
       84,   84,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      232,  232,  232,  232,  232,  233,  234,  234,  234,  234,
      234,  234,  235,  236,  237,  238,  239,  240,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  127,  546,  129,  129,  129,  537,  278,   84,
      279,  279,  279,   84,  130,  131,  130,  565,  555,  279,
      279,  279,  279,  415,   84,  734,   84,  548,  130,  131,

      130,  279,  279,  279,  279,  279,  279,  280,   84,  280,
       84,  281,  559,  281,  415,  282,  549,  283,   84,  284,
      284,  127,  284,  139,  139,  139,  285,   84,  285,  553,
       84,  563,   84,  130,  131,  130,  132,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  130,  131,  130,
       84,  554,  658,   84,  132,  118,  118,  118,  118,  118,
      118,  118,   84,  134,  135,  136,  137,  731,  287,  556,
      287,  138,  288,   84,  288,  560,  289,  562,  290,   84,
      291,  291,  127,  291,  330,  330,  330,  292,  558,  292,
       84,   84,  712,   84,  331,  332,  331,  339,  339,  339,

      339,  339,  339,  339,  339,  339,   84,  567,  331,  332,
      331,   84,  140,  141,  142,  143,  456,  456,  456,  656,
      144,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      100,  415,  364,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  365,  365,  330,  330,
      330,  729,  415,  333,  334,  335,  336,  382,  382,  382,
       84,  337,   71,  660,   71,  382,  382,  382,  364,  390,
      390,  390,  364,  390,  390,  390,   84,  650,  705,  364,

      649,   84,  364,   84,  364,  366,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  341,  230,  261,  261,  261,
      261,  261,  261,  261,   84,  229,  229,  229,   84,   84,
      733,   84,  651,  663,  229,  229,  229,  229,  271,  271,
      271,  271,  271,  271,  271,   84,  229,  229,  229,  229,
      229,  229,  381,  654,  381,   84,   84,  382,  382,  382,
       84,  652,  714,  723,  229,  713,   84,  250,  657,  250,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      709,  250,   84,  250,  342,  342,  342,  342,  342,  343,
      344,  344,  344,  344,  344,  344,  345,  346,  347,  348,

      349,  350,   71,   84,   72,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,   84,   73,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  383,  384,  385,  386,
      569,  569,  569,   84,  387,  261,  261,  261,  129,  129,
      129,  129,  129,  129,  129,  262,  263,  262,  389,   84,
      389,  711,   84,  390,  390,  390,   84,  662,   84,  262,
      263,  262,  730,  262,  706,  262,  261,  261,  261,  261,
      261,  261,  261,  261,  261,   84,   84,  262,   84,  262,

      449,  449,  449,  707,   74,   74,   74,   74,   74,   75,
       76,   76,   76,   76,   76,   76,   77,   78,   79,   80,
       81,   82,   71,   84,   72,  271,  271,  271,  139,  139,
      139,  139,  139,  139,  139,  272,  708,  272,  351,  351,
      351,  539,  539,  539,  264,  265,  266,  267,   84,  272,
      703,  272,  268,   84,   84,   73,  539,  539,  539,  737,
       84,  710,  391,  392,  393,  394,  728,  396,  740,  396,
      395,  397,  722,  397,   84,  398,   84,  399,  736,  400,
      400,  702,  400,  632,  632,  632,  401,  732,  401,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  342,  632,
      632,  632,   84,  741,  273,  274,  275,  276,   84,  211,
       84,  738,  277,   84,   74,   74,   74,  352,  353,  354,
      355,   76,   76,   76,   76,  356,   77,   78,   79,   80,
       81,   82,   71,  661,   71,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,   84,  742,  743,  357,  357,
      357,   84,   84,  655,   84,  653,  744,  357,  357,  357,
      357,   84,   84,   84,  646,  341,  645,  626,  211,  357,
      357,  357,  357,  357,  357,  576,  404,   84,  404,   84,
      405,   84,  405,   84,  406,   84,  407,  206,  408,  408,

       84,  408,  412,  412,  412,  409,  413,  409,  279,  279,
      279,  412,  412,  412,  412,   84,   84,  279,  279,  279,
      279,  414,  415,  412,  412,  412,  412,  412,  412,  279,
      279,  279,  279,  279,  279,   84,  533,  532,  525,  414,
      524,   84,   84,  415,  342,  342,  342,  342,  342,  343,
      344,  344,  344,  344,  344,  344,  345,  346,  347,  348,
      349,  350,   71,   84,   72,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,   84,   73,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,   84,   85,   85,   85,  456,
      456,  456,  456,  456,  456,  456,  207,  207,  207,  207,
      207,  207,  207,  463,   74,   74,   74,   74,   74,   75,
       76,   76,   76,   76,   76,   76,   77,   78,   79,   80,
       81,   82,   71,  418,   72,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  227,  227,  227,  227,  227,  227,

      227,  227,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,   73,   84,  464,  469,  469,
      469,  469,  469,  469,  469,  469,  469,   84,   84,   84,
      411,  410,  403,   86,   87,   88,   89,   90,   91,  402,
       92,   93,   94,   95,  211,  181,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,   74,   74,   74,   74,   74,   75,
       76,   76,   76,   76,   76,   76,   77,   78,   79,   80,

       81,   82,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  100,   85,
       85,   85,  329,  324,  323,  100,  322,  321,  320,  317,
       71,  314,  313,  312,  311,  310,  309,  465,  382,  382,

      382,  382,  382,  382,  382,  308,  466,  466,  307,  306,
      127,  231,  330,  330,  330,  305,  304,  303,  302,  301,
      296,  419,  331,  332,  331,  295,  294,  293,  465,  198,
      286,  259,  465,  258,  249,  220,  331,  332,  331,  465,
       68,  190,  465,  150,  465,  467,  390,  390,  390,  390,
      390,  390,  390,  147,   84,  382,  382,  382,  111,  390,
      390,  390,   96,   69,   68,  745,   86,   87,   88,   89,
       90,   91,  745,   92,   93,   94,   95,  745,  745,  745,
      232,  232,  232,  232,  232,  233,  234,  234,  234,  234,
      234,  234,  235,  236,  237,  238,  239,  240,  100,  745,

      745,  333,  334,  335,  336,  100,  745,  745,  745,  337,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  207,
      207,  207,  207,  207,  207,  207,  745,  745,  745,  745,
      745,  231,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  745,  745,  745,  383,  384,  385,  386,  391,  392,
      393,  394,  387,  745,  745,  745,  395,  745,  745,  745,
      745,  745,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,

      232,  232,  232,  232,  232,  233,  234,  234,  234,  234,
      234,  234,  235,  236,  237,  238,  239,  240,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  100,  229,  229,  229,  382,  382,  382,  230,
      745,  745,  229,  229,  229,  229,  250,  745,  250,  745,
      745,  745,  745,  745,  229,  229,  229,  229,  229,  229,
      250,  270,  250,  270,  745,  231,  449,  449,  449,  745,
      745,  745,  229,  745,  745,  745,  450,  745,  450,  745,

      367,  367,  367,  367,  367,  367,  367,  745,  745,  745,
      450,  745,  450,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  745,  518,  745,  518,  745,  519,   84,  519,
      745,  520,  745,  521,  745,  522,  522,  745,  522,  745,
      745,  745,  523,  745,  523,  383,  384,  385,  386,  745,
      745,  745,  745,  387,  232,  232,  232,  232,  232,  233,
      234,  234,  234,  234,  234,  234,  235,  236,  237,  238,
      239,  240,  100,  745,  745,  451,  452,  453,  454,  230,
      745,  745,  745,  455,  745,  515,  515,  515,  371,  371,
      371,  745,  745,  745,  515,  515,  515,  515,  261,  261,

      261,  261,  261,  261,  261,  231,  515,  515,  515,  515,
      515,  515,  745,  745,  745,  118,  118,  118,  745,  745,
      745,  745,  745,  745,  229,  250,  251,  250,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  745,  745,  250,
      251,  250,  745,  745,  745,  745,  390,  390,  390,  271,
      271,  271,  271,  271,  271,  271,  262,  745,  262,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  745,
      262,  745,  262,  745,  232,  232,  232,  372,  373,  374,
      375,  234,  234,  234,  234,  376,  235,  236,  237,  238,
      239,  240,  100,  745,  745,  745,  745,  745,  745,  100,

      745,  745,  745,  745,  119,  120,  121,  122,  377,  377,
      377,  745,  123,  745,  745,  745,  745,  377,  377,  377,
      377,  745,  745,  745,  745,  231,  745,  745,  745,  377,
      377,  377,  377,  377,  377,  391,  392,  393,  394,  745,
      526,  745,  526,  395,  527,  745,  527,  243,  528,  745,
      529,  745,  530,  530,  745,  530,  745,  745,  745,  531,
      745,  531,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  745,  745,  745,  232,  232,  232,  232,  232,  233,

      234,  234,  234,  234,  234,  234,  235,  236,  237,  238,
      239,  240,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  213,  213,  457,  213,  457,  213,
      458,  213,  458,  213,  459,  213,  460,  213,  461,  461,
      213,  461,  213,  213,  213,  462,  213,  462,  213,   71,
      745,   71,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  341,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  745,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  342,  342,  342,  342,  342,  343,  344,  344,  344,

      344,  344,  344,  345,  346,  347,  348,  349,  350,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,

      470,  470,  470,  470,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,   71,  745,   72,  569,  569,  569,  569,
      569,  569,  569,  745,  745,  745,  412,  412,  412,  472,
      472,  472,  745,  745,  745,  412,  412,  412,  412,  745,
      536,  745,  745,  745,  745,  745,   73,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  745,  745,  745,  745,
      745,  536,  412,  412,  412,  412,  538,  415,  538,  745,

      745,  539,  539,  539,  412,  412,  412,  412,  412,  412,
      745,  540,  745,  540,  745,  745,  745,  745,  415,  745,
      745,  745,  745,  745,  745,  540,  745,  540,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  456,  456,  456,
      456,  456,  456,  456,  745,   74,   74,   74,  473,  474,
      475,  476,   76,   76,   76,   76,  477,   77,   78,   79,
       80,   81,   82,   71,  745,   72,  227,  227,  227,  227,
      227,  227,  227,  227,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  745,  745,  745,  745,  745,  577,
      541,  542,  543,  544,  745,  745,   73,  745,  545,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  207,
      207,  207,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  745,  745,  745,  745,  745,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      478,  478,  478,  478,  478,  478,  478,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,   74,   74,   74,   74,   74,
       75,   76,   76,   76,   76,   76,   76,   77,   78,   79,
       80,   81,   82,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   74,   74,  479,   74,

      479,   74,  480,   74,  480,   74,  481,   74,  482,   74,
      483,  483,   74,  483,   74,   74,   74,  484,   74,  484,
       74,   74,  485,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  745,  745,   74,  745,   74,  745,
       74,  745,   74,  745,   74,  745,   74,  745,   74,   74,
      745,   74,  745,  745,  745,   74,  745,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,  745,  745,   74,  745,   74,  745,   74,  745,   74,
      745,   74,  745,   74,  745,   74,   74,  745,   74,  745,
      745,  745,   74,  745,   74,  486,   71,  745,   71,  207,

      207,  207,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  487,  487,  487,  745,  745,  745,  745,  745,
      745,  487,  487,  487,  487,  745,  745,  745,  745,  341,
      203,  203,  203,  487,  487,  487,  487,  487,  487,  203,
      203,  203,  203,  745,  207,  207,  207,  207,  207,  207,
      207,  203,  203,  203,  203,  203,  203,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  745,  745,  745,  203,
      207,  207,  207,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  207,  207,  207,  207,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  745,  745,  342,  342,

      342,  342,  342,  343,  344,  344,  344,  344,  344,  344,
      345,  346,  347,  348,  349,  350,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  100,  127,  745,  129,  129,  129,  745,  100,

      745,  745,  745,  745,  745,  130,  131,  130,  478,  478,
      478,  745,  207,  207,  207,  207,  207,  207,  207,  130,
      131,  130,  745,  745,  127,  231,  139,  139,  139,  207,
      207,  207,  207,  207,  207,  207,  130,  131,  130,  132,
      745,  745,  539,  539,  539,  745,  449,  449,  449,  745,
      130,  131,  130,  745,  745,  745,  450,  132,  450,  745,
      745,  745,  745,  127,  745,  330,  330,  330,  745,  745,
      450,  745,  450,  745,  745,  331,  332,  331,  745,  745,
      745,  745,  745,  745,  134,  135,  136,  137,   84,  331,
      332,  331,  138,  745,  232,  232,  232,  232,  232,  233,

      234,  234,  234,  234,  234,  234,  235,  236,  237,  238,
      239,  240,  100,  745,  745,  140,  141,  142,  143,  100,
      745,  745,  745,  144,  745,  745,  745,  745,  490,  490,
      490,  541,  542,  543,  544,  451,  452,  453,  454,  545,
      745,  745,  745,  455,  745,  231,  207,  207,  207,  207,
      207,  207,  207,  745,  333,  334,  335,  336,  745,  745,
      745,  745,  337,  207,  207,  207,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  745,  745,  745,  632,  632,  632,  207,
      207,  207,  207,  207,  207,  207,  478,  478,  478,  745,

      207,  207,  207,  207,  207,  207,  207,  367,  367,  367,
      367,  367,  367,  367,  232,  232,  232,  491,  492,  493,
      494,  234,  234,  234,  234,  495,  235,  236,  237,  238,
      239,  240,  100,  745,  745,  745,  745,  745,  745,  100,
      618,  618,  618,  618,  618,  618,  618,  745,  496,  496,
      496,  745,  745,  745,  745,  745,  745,  496,  496,  496,
      496,  745,  745,  745,  745,  231,  745,  745,  745,  496,
      496,  496,  496,  496,  496,  634,  635,  636,  637,  599,
      599,  599,  745,  638,  745,  745,  745,  366,  599,  599,
      599,  599,  745,  367,  367,  367,  367,  367,  367,  367,

      599,  599,  599,  599,  599,  599,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  745,  745,  745,  203,  367,
      367,  367,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  745,  745,  232,  232,  232,  232,  232,  233,
      234,  234,  234,  234,  234,  234,  235,  236,  237,  238,
      239,  240,  229,  229,  229,  745,  745,  745,  745,  745,
      745,  229,  229,  229,  229,  745,  367,  367,  367,  367,
      367,  367,  367,  229,  229,  229,  229,  229,  229,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  506,  506,
      506,  229,  367,  367,  367,  367,  367,  367,  367,  745,

      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  230,  745,  745,  745,  745,  745,
      230,  745,  745,  500,  500,  500,  745,  745,  745,  229,
      229,  229,  229,  229,  229,  229,  745,  745,  229,  229,
      229,  229,  745,  745,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  745,  619,  745,  619,
      745,  620,  229,  620,  745,  621,  745,  622,  745,  623,
      623,  745,  623,  745,  745,  745,  624,  745,  624,  367,
      367,  367,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  367,  367,  367,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  382,  382,  382,  382,  382,
      382,  382,  501,  502,  503,  504,  745,  745,  745,  745,
      505,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  506,  506,  506,  506,  506,  506,
      506,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  232,  232,  507,  232,  507,  232,  508,  232,
      508,  232,  509,  232,  510,  232,  511,  511,  232,  511,
      232,  232,  232,  512,  232,  512,  232,  232,  513,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      745,  745,  232,  745,  232,  745,  232,  745,  232,  745,
      232,  745,  232,  745,  232,  232,  745,  232,  745,  745,
      745,  232,  745,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  745,  745,  232,
      745,  232,  745,  232,  745,  232,  745,  232,  745,  232,
      745,  232,  232,  745,  232,  745,  745,  745,  232,  745,
      232,  514,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  213,  213,  570,  213,
      570,  213,  571,  213,  571,  213,  572,  213,  573,  213,

      574,  574,  213,  574,  213,  213,  213,  575,  213,  575,
      213,   71,  745,   71,  367,  367,  367,  367,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  367,  367,  367,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      745,  745,  745,  745,  341,  506,  506,  506,  506,  506,
      506,  506,  745,  745,  745,  745,  745,  745,  367,  367,
      367,  367,  367,  367,  367,  506,  506,  506,  745,  367,
      367,  367,  367,  367,  367,  367,  628,  628,  628,  745,
      745,  745,  745,  745,  745,  628,  628,  628,  628,  390,
      390,  390,  390,  390,  390,  390,  745,  628,  628,  628,

      628,  628,  628,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  342,  342,  342,  342,  342,  343,  344,
      344,  344,  344,  344,  344,  345,  346,  347,  348,  349,
      350,   71,  745,   71,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  745,  745,  745,  579,  579,  579,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      745,  745,  745,  745,  341,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  342,  342,  342,  580,  581,  582,  583,
      344,  344,  344,  344,  584,  345,  346,  347,  348,  349,
      350,   71,  745,   71,  539,  539,  539,  539,  539,  539,
      539,  745,  745,  468,  468,  468,  745,  585,  585,  585,
      671,  671,  671,  671,  671,  671,  585,  585,  585,  585,
      745,  745,  745,  745,  341,  745,  745,  745,  585,  585,
      585,  585,  585,  585,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  745,  745,  745,  467,  745,  745,  261,
      261,  261,  569,  569,  569,  569,  569,  569,  569,  262,
      263,  262,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  745,  262,  263,  262,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  468,  468,  468,  468,
      468,  468,  468,  342,  342,  342,  342,  342,  343,  344,
      344,  344,  344,  344,  344,  345,  346,  347,  348,  349,
      350,  203,  203,  203,  745,  745,  745,  745,  745,  745,
      203,  203,  203,  203,  367,  367,  367,  367,  367,  367,
      367,  745,  203,  203,  203,  203,  203,  203,  264,  265,

      266,  267,  745,  745,  745,  745,  268,  606,  606,  606,
      203,  367,  367,  367,  367,  367,  367,  367,  745,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  588,  588,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,   71,  745,   72,  271,  271,  271,  367,
      367,  367,  367,  367,  367,  367,  272,  745,  272,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  745,
      272,  745,  272,  631,  745,  631,   73,  745,  632,  632,
      632,  745,  539,  539,  539,  745,  745,  745,  633,  745,
      633,  745,  540,  745,  540,  745,  745,  639,  745,  639,
      745,  640,  633,  640,  633,  641,  540,  642,  540,  643,

      643,  745,  643,   85,   85,   85,  644,  745,  644,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  745,
      745,  745,  745,  647,  745,  273,  274,  275,  276,  745,
      745,  745,  745,  277,  745,   74,   74,   74,   74,   74,
       75,   76,   76,   76,   76,   76,   76,   77,   78,   79,
       80,   81,   82,   71,  745,   72,  745,  634,  635,  636,
      637,  541,  542,  543,  544,  638,  745,  745,  745,  545,
      207,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      745,  745,  745,  745,  745,  745,   73,  745,  745,  745,
       86,   87,   88,   89,   90,   91,  745,   92,   93,   94,

       95,  367,  367,  367,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  745,  745,  745,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      589,  589,  589,  589,  589,  589,  589,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,   74,   74,   74,   74,   74,
       75,   76,   76,   76,   76,   76,   76,   77,   78,   79,
       80,   81,   82,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   74,   74,  590,   74,
      590,   74,  591,   74,  591,   74,  592,   74,  593,   74,

      594,  594,   74,  594,   74,   74,   74,  595,   74,  595,
       74,   74,  596,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  745,  745,   74,  745,   74,  745,
       74,  745,   74,  745,   74,  745,   74,  745,   74,   74,
      745,   74,  745,  745,  745,   74,  745,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,  745,  745,   74,  745,   74,  745,   74,  745,   74,
      745,   74,  745,   74,  745,   74,   74,  745,   74,  745,
      745,  745,   74,  745,   74,  597,   71,  745,   72,   85,
       85,   85,  468,  468,  468,  468,  468,  468,  468,  745,

      745,  745,  472,  472,  472,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  648,  745,  745,  745,  745,   73,
      449,  449,  449,  632,  632,  632,  632,  632,  632,  632,
      450,  745,  450,  745,  745,  127,  745,  330,  330,  330,
      745,  745,  745,  745,  450,   84,  450,  331,  332,  331,
      539,  539,  539,  539,  539,  539,  539,  589,  589,  589,
      745,  331,  332,  331,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  745,  745,   86,   87,   88,   89,
       90,   91,  745,   92,   93,   94,   95,  745,   74,   74,
       74,  473,  474,  475,  476,   76,   76,   76,   76,  477,

       77,   78,   79,   80,   81,   82,  100,  745,  745,  451,
      452,  453,  454,  100,  745,  745,  745,  455,  745,  745,
      745,  745,  600,  600,  600,  745,  333,  334,  335,  336,
      745,  745,  745,  745,  337,  745,  745,  745,  745,  231,
      589,  589,  589,  589,  589,  589,  589,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  589,  589,  589,  745,
      745,  745,  745,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  367,  367,  367,  367,  367,  367,  367,
      745,  745,  745,  745,  745,  745,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  745,  745,  745,  232,  232,
      232,  601,  602,  603,  604,  234,  234,  234,  234,  605,
      235,  236,  237,  238,  239,  240,  100,  204,  204,  204,
      745,  745,  745,  100,  745,  745,  204,  204,  204,  204,
      715,  715,  715,  715,  715,  715,  715,  745,  204,  204,
      204,  204,  204,  204,  745,  745,  745,  745,  745,  231,
      367,  367,  367,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  367,  367,  367,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  745,  745,  745,  745,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  606,  606,  606,  606,  606,  606,  606,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  232,  232,
      232,  232,  232,  233,  234,  234,  234,  234,  234,  234,
      235,  236,  237,  238,  239,  240,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  232,
      232,  607,  232,  607,  232,  608,  232,  608,  232,  609,
      232,  610,  232,  611,  611,  232,  611,  232,  232,  232,
      612,  232,  612,  232,  232,  613,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  745,  745,  232,

      745,  232,  745,  232,  745,  232,  745,  232,  745,  232,
      745,  232,  232,  745,  232,  745,  745,  745,  232,  745,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  745,  745,  232,  745,  232,  745,
      232,  745,  232,  745,  232,  745,  232,  745,  232,  232,
      745,  232,  745,  745,  745,  232,  745,  232,  614,  100,
      745,  745,  745,  606,  606,  606,  100,  367,  367,  367,
      367,  367,  367,  367,  745,  615,  615,  615,  745,  745,
      745,  745,  745,  745,  615,  615,  615,  615,  745,  745,
      745,  745,  231,  745,  745,  745,  615,  615,  615,  615,

      615,  615,  367,  367,  367,  367,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  367,  367,  367,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  745,  745,  745,  745,  745,
      745,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  232,  232,  232,  232,  232,  233,  234,  234,  234,
      234,  234,  234,  235,  236,  237,  238,  239,  240,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  230,  745,  745,  745,  745,
      745,  230,  745,  745,  500,  500,  500,  745,  745,  745,
      229,  229,  229,  229,  229,  229,  229,  745,  745,  229,
      229,  229,  229,  745,  745,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  367,  367,  367,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      367,  367,  367,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  367,  367,  367,  367,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  367,  367,  367,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  745,
      745,  745,  745,  501,  502,  503,  504,  745,  745,  745,
      745,  505,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

       71,  745,   71,  618,  618,  618,  745,  367,  367,  367,
      367,  367,  367,  367,  745,  745,  665,  665,  665,  745,
      745,  618,  618,  618,  618,  618,  618,  618,  745,  745,
      745,  745,  745,  341,  367,  367,  367,  367,  367,  367,
      367,  618,  618,  618,  745,  367,  367,  367,  367,  367,
      367,  367,  241,  241,  241,  382,  382,  382,  745,  745,
      745,  241,  241,  241,  241,  250,  745,  250,  745,  745,
      390,  390,  390,  241,  241,  241,  241,  241,  241,  250,
      262,  250,  262,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  745,  262,  745,  262,  745,  745,  745,

      745,  745,  342,  342,  342,  666,  667,  668,  669,  344,
      344,  344,  344,  670,  345,  346,  347,  348,  349,  350,
       71,  696,   71,  696,  745,  697,  745,  697,  745,  698,
      745,  699,  745,  700,  700,  745,  700,  745,  745,  745,
      701,  745,  701,  745,  383,  384,  385,  386,  745,  745,
      745,  745,  387,  341,  745,  745,  745,  745,  745,  391,
      392,  393,  394,  745,  745,  745,  745,  395,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  745,  745,
      745,  745,  745,  745,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  671,  671,  671,

      671,  671,  671,  671,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  342,  342,  342,  342,  342,  343,  344,  344,
      344,  344,  344,  344,  345,  346,  347,  348,  349,  350,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  342,  342,  672,  342,  672,  342,  673,
      342,  673,  342,  674,  342,  675,  342,  676,  676,  342,
      676,  342,  342,  342,  677,  342,  677,  342,  342,  678,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  745,  745,  342,  745,  342,  745,  342,  745,  342,

      745,  342,  745,  342,  745,  342,  342,  745,  342,  745,
      745,  745,  342,  745,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  745,  745,
      342,  745,  342,  745,  342,  745,  342,  745,  342,  745,
      342,  745,  342,  342,  745,  342,  745,  745,  745,  342,
      745,  342,  679,   71,  745,   71,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  745,  745,  745,  680,
      680,  680,  745,  745,  745,  745,  745,  745,  680,  680,
      680,  680,  745,  745,  745,  745,  341,  745,  745,  745,
      680,  680,  680,  680,  680,  680,  704,  704,  704,  704,

      704,  704,  704,  704,  704,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  203,  203,  203,  745,  745,
      745,  745,  745,  745,  203,  203,  203,  203,  745,  468,
      468,  468,  468,  468,  468,  468,  203,  203,  203,  203,
      203,  203,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  745,  745,  745,  745,  342,  342,  342,  342,  342,
      343,  344,  344,  344,  344,  344,  344,  345,  346,  347,
      348,  349,  350,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,   71,
      745,   72,  632,  632,  632,  745,  745,  745,  468,  468,
      468,  745,  633,  745,  633,  671,  671,  671,  671,  671,
      671,  745,  745,  745,  745,  745,  633,  745,  633,  468,
      468,  468,   73,  449,  449,  449,  671,  671,  671,  671,
      671,  671,  745,  450,  745,  450,  671,  671,  671,  745,

      468,  468,  468,  468,  468,  468,  468,  450,   84,  450,
      716,  745,  716,  745,  717,  745,  717,  745,  718,  745,
      719,  745,  720,  720,  745,  720,  745,  745,  745,  721,
      745,  721,  468,  468,  468,  468,  468,  468,  468,  745,
      745,  634,  635,  636,  637,  745,  745,  745,  745,  638,
      745,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   71,
      745,   72,  451,  452,  453,  454,  745,  745,  745,  745,
      455,  468,  468,  468,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  745,  745,  745,  725,  725,  725,

      745,  745,   73,  665,  665,  665,  725,  725,  725,  725,
      745,  745,  203,  203,  203,  203,  745,  745,  725,  725,
      725,  725,  725,  725,  203,  203,  203,  203,  203,  203,
      745,  745,  745,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   71,
      745,   72,  666,  667,  668,  669,  745,  745,  745,  745,

      670,  745,  745,  745,  745,  472,  472,  472,  468,  468,
      468,  468,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  745,   73,  671,  671,  671,  671,  671,  671,  671,
      745,  745,  745,  745,  745,  745,  468,  468,  468,  468,
      468,  468,  468,  671,  671,  671,  745,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  229,  229,  229,  745,  745,  745,  367,  367,  367,
      229,  229,  229,  229,  684,  684,  684,  684,  684,  684,
      745,  745,  229,  229,  229,  229,  229,  229,  745,  745,
      745,   74,   74,   74,  473,  474,  475,  476,   76,   76,

       76,   76,  477,   77,   78,   79,   80,   81,   82,  100,
      367,  367,  367,  745,  745,  745,  100,  684,  684,  684,
      684,  684,  684,  367,  367,  367,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  745,  745,  745,  745,
      745,  745,  231,  367,  367,  367,  367,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  367,  367,  367,  745,
      745,  745,  745,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  745,  367,  367,  367,  367,  367,  367,  367,
      684,  684,  684,  684,  684,  684,  684,  745,  745,  745,
      745,  745,  745,  367,  367,  367,  367,  367,  367,  367,

      684,  684,  684,  745,  367,  367,  367,  367,  367,  367,
      367,  232,  232,  232,  232,  232,  233,  234,  234,  234,
      234,  234,  234,  235,  236,  237,  238,  239,  240,  100,
      364,  364,  364,  745,  745,  745,  100,  745,  745,  364,
      364,  364,  364,  745,  745,  745,  745,  745,  230,  745,
      745,  364,  364,  364,  364,  364,  364,  229,  229,  229,
      745,  745,  231,  745,  745,  745,  229,  229,  229,  229,
      632,  632,  632,  632,  632,  632,  632,  745,  229,  229,
      229,  229,  229,  229,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  367,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  684,  684,  684,  684,
      684,  684,  684,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  232,  232,  232,  232,  232,  233,  234,  234,  234,
      234,  234,  234,  235,  236,  237,  238,  239,  240,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  232,  232,  685,  232,  685,  232,  686,  232,
      686,  232,  687,  232,  688,  232,  689,  689,  232,  689,
      232,  232,  232,  690,  232,  690,  232,  232,  691,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      745,  745,  232,  745,  232,  745,  232,  745,  232,  745,
      232,  745,  232,  745,  232,  232,  745,  232,  745,  745,
      745,  232,  745,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  745,  745,  232,
      745,  232,  745,  232,  745,  232,  745,  232,  745,  232,
      745,  232,  232,  745,  232,  745,  745,  745,  232,  745,
      232,  692,  100,  600,  600,  600,  745,  745,  745,  100,
      745,  745,  229,  229,  229,  229,  745,  745,  600,  600,
      600,  745,  745,  745,  229,  229,  229,  229,  229,  229,
      745,  745,  745,  745,  745,  231,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  745,  539,  539,  539,
      745,  745,  745,  745,  745,  745,  745,  540,  745,  540,
      745,  745,  601,  602,  603,  604,  745,  745,  745,  745,
      605,  540,  745,  540,  232,  232,  232,  601,  602,  603,
      604,  234,  234,  234,  234,  605,  235,  236,  237,  238,
      239,  240,  100,  745,  745,  745,  715,  715,  715,  100,
      468,  468,  468,  468,  468,  468,  468,  745,  694,  694,

      694,  745,  745,  745,  745,  745,  745,  694,  694,  694,
      694,  745,  745,  745,  745,  231,  745,  745,  745,  694,
      694,  694,  694,  694,  694,  745,  541,  542,  543,  544,
      203,  203,  203,  745,  545,  745,  745,  745,  745,  203,
      203,  203,  203,  745,  745,  745,  745,  745,  745,  745,
      745,  203,  203,  203,  203,  203,  203,  468,  468,  468,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      468,  468,  468,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  745,  232,  232,  232,  232,  232,  233,
      234,  234,  234,  234,  234,  234,  235,  236,  237,  238,

      239,  240,  230,  745,  745,  465,  465,  465,  745,  745,
      745,  500,  500,  500,  465,  465,  465,  465,  745,  745,
      229,  229,  229,  229,  745,  745,  465,  465,  465,  465,
      465,  465,  229,  229,  229,  229,  229,  229,  468,  468,
      468,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  468,  468,  468,  468,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  468,  468,  468,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  745,  745,  745,  745,  745,  745,
      468,  468,  468,  468,  468,  468,  468,  745,  745,  745,

      501,  502,  503,  504,  745,  745,  745,  745,  505,   71,
      745,   72,  715,  715,  715,  745,  468,  468,  468,  468,
      468,  468,  468,  745,  745,  229,  229,  229,  745,  745,
      745,  745,  745,  745,  229,  229,  229,  229,  745,  745,
      745,  745,   73,  665,  665,  665,  229,  229,  229,  229,
      229,  229,  203,  203,  203,  203,  745,  745,  745,  745,
      632,  632,  632,  745,  203,  203,  203,  203,  203,  203,
      633,  745,  633,  745,  745,  745,  745,  745,  203,  203,
      203,  745,  745,  745,  633,  745,  633,  203,  203,  203,
      203,  745,  745,  745,  745,  745,  745,  745,  745,  203,

      203,  203,  203,  203,  203,  745,  745,  745,  745,  745,
      745,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,  745,
      745,  745,  666,  667,  668,  669,  745,  745,  745,  745,
      670,  745,  745,  745,  745,  745,  745,  745,  745,  634,
      635,  636,  637,  745,  745,  745,  745,  638,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       83,  745,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,  180,  180,  745,  180,  180,  181,  181,  181,
      181,  181,  181,  183,  183,  183,  183,  183,  183,  194,
      194,  194,  196,  196,  196,  196,  196,  196,  199,  745,
      199,  745,  199,  199,  199,  199,  199,  199,  199,  200,
      745,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,   83,  745,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   84,   84,  745,   84,   84,  211,  211,  211,
      211,  211,  211,  213,  213,  213,  213,  213,  213,  224,
      224,  224,  226,  226,  226,  226,  226,  226,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  260,
      745,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      181,  181,  181,  181,  181,  181,  339,  339,  339,  339,
      339,  339,  180,  180,  180,  180,  180,  180,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  199,  745,  199,
      745,  199,  199,  199,  199,  199,  199,  199,  200,  745,
      200,  745,  745,  200,  200,  200,  200,  200,  200,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  211,  211,  211,  211,  211,  211,  362,  362,  362,

      362,  362,  362,   84,   84,   84,   84,   84,   84,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  260,
      745,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      211,  211,  211,  211,  211,  211,  213,  213,  213,  213,
      213,  213,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  211,  211,  211,  211,  211,
      211,  213,  213,  213,  213,  213,  213,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  203,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      211,  211,  211,  211,  211,  211,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,    5,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745

    } ;

static yyconst flex_int16_t yy_chk[8893] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,   12,   12,   12,   14,   19,   36,
       23,   21,    3,    4,   10,   23,   10,   28,   28,   19,
       21,   21,   23,   14,   30,   30,   36,   37,   36,   45,
       38,   38,   48,   47,   45,   67,  795,   39,   38,   42,
       67,   40,   39,   37,   38,   48,   22,   10,   22,   22,
       22,   39,   40,   42,   40,   25,   47,   25,   25,   25,
       41,   44,   49,   40,   52,   50,   43,   25,   25,   25,
       25,   41,   43,   50,   41,   44,   49,  315,  169,   43,

      167,   25,   25,   25,   35,   35,   35,  167,   25,  169,
      315,   12,   12,   12,   12,   12,   12,  201,   12,   12,
       12,   12,  201,   52,   35,   57,   57,   57,   57,   57,
       57,   57,   82,   82,   82,  303,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   15,   46,  303,   22,   22,   22,
       22,   15,  784,   46,   46,   22,   25,   25,   25,   25,
      110,  110,  110,   46,   25,  317,   46,   58,   58,   58,
       58,   58,   58,   58,   58,   58,  176,   15,  176,  175,
      317,   35,   35,   35,   35,   35,   35,  175,   35,   35,

       35,   35,   61,   61,   61,   61,  189,  189,  189,   61,
       62,   62,   62,   62,   62,   64,   64,   64,   64,   64,
       64,   64,   64,   80,   80,   80,   80,   80,   80,  562,
       61,  562,   84,   84,   84,  198,  198,  198,   64,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,  219,  219,  219,  308,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   24,  308,   24,   24,   24,   88,
       88,   88,   88,   88,   88,   88,   24,   24,   24,   24,
      300,   24,   73,  307,   73,  228,  228,  228,  300,   73,

       24,   24,   24,   92,   92,   92,   92,   24,   73,   73,
       92,  240,  240,  240,  307,   85,   85,   85,   24,   84,
       84,   84,   84,   84,   84,   73,   84,   84,   84,   84,
       73,   92,  302,  299,   73,   93,   93,   93,   93,   93,
      302,   73,  299,  312,   73,  760,   73,   73,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  108,  108,  108,
      108,  108,  108,  321,  312,   24,   24,   24,   24,  257,
      257,  257,  321,   24,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   70,

      314,   70,   85,   85,   85,   85,   85,   85,  314,   85,
       85,   85,   85,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   95,   95,   95,   95,   95,   95,   95,   95,
      749,  101,   70,  101,  259,  259,  259,  744,  101,  238,
      238,  238,  238,  238,  238,   95,  304,  101,  101,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  151,  304,  101,  305,  151,  306,  306,  101,
      151,  305,  306,  101,  285,  285,  285,  292,  292,  292,
      101,  151,  309,  101,  504,  101,  101,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  294,  294,  294,  309,

      743,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   74,
      504,   74,  119,  119,  119,  119,  119,  119,  119,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  121,  310,
      121,  311,  121,  318,  121,  435,  121,  325,  121,  310,
      121,  121,   74,  121,  435,  325,  318,  121,  311,  121,
      134,  134,  134,  134,  134,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  140,  140,  140,  140,
      140,  140,  140,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   99,  118,

      118,  118,  320,  319,  324,   99,  319,  328,  320,  118,
      118,  118,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  324,  322,  118,  118,  118,  322,  327,  328,  440,
      737,   99,  127,  127,  127,  190,  190,  190,  190,  190,
      190,  190,  127,  127,  127,  327,  440,  128,  323,  128,
      128,  128,  323,  270,  270,  270,  127,  127,  127,  128,
      128,  128,  128,  326,  131,  423,  131,  329,  419,  131,
      131,  131,  419,  128,  128,  128,  326,  423,  329,  131,
      128,  131,  348,  348,  348,  348,  348,  348,  118,  118,
      118,  118,  734,  131,  733,  131,  118,  350,  350,  350,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  102,  443,
      732,  127,  127,  127,  127,  102,  401,  401,  401,  127,
      220,  220,  220,  220,  220,  220,  220,  443,  128,  128,
      128,  128,  270,  270,  270,  270,  128,  403,  403,  403,
      270,  102,  409,  409,  409,  411,  411,  411,  131,  131,
      131,  131,  731,  448,  445,  427,  131,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  426,  427,  445,
      448,  426,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  129,  418,  129,  129,  129,  414,  133,  729,
      133,  133,  133,  418,  129,  129,  129,  444,  432,  133,
      133,  133,  133,  414,  432,  714,  444,  420,  129,  129,

      129,  133,  133,  133,  133,  133,  133,  136,  420,  136,
      712,  136,  438,  136,  414,  136,  421,  136,  438,  136,
      136,  139,  136,  139,  139,  139,  136,  421,  136,  428,
      710,  442,  428,  139,  139,  139,  139,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  139,  139,  139,
      442,  429,  561,  561,  139,  258,  258,  258,  258,  258,
      258,  258,  429,  129,  129,  129,  129,  709,  142,  433,
      142,  129,  142,  433,  142,  439,  142,  441,  142,  439,
      142,  142,  182,  142,  182,  182,  182,  142,  437,  142,
      441,  661,  661,  437,  182,  182,  182,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  558,  447,  182,  182,
      182,  447,  139,  139,  139,  139,  462,  462,  462,  558,
      139,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      231,  537,  231,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  231,  231,  464,  464,
      464,  707,  537,  182,  182,  182,  182,  523,  523,  523,
      563,  182,  203,  563,  203,  525,  525,  525,  231,  531,
      531,  531,  231,  533,  533,  533,  548,  549,  647,  231,

      548,  549,  231,  647,  231,  231,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  203,  244,  264,  264,  264,
      264,  264,  264,  264,  552,  244,  244,  244,  705,  567,
      713,  713,  552,  567,  244,  244,  244,  244,  273,  273,
      273,  273,  273,  273,  273,  555,  244,  244,  244,  244,
      244,  244,  251,  555,  251,  553,  663,  251,  251,  251,
      559,  553,  663,  670,  244,  662,  651,  251,  559,  251,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      651,  251,  660,  251,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  204,  659,  204,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  658,  204,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  251,  251,  251,  251,
      575,  575,  575,  657,  251,  261,  261,  261,  286,  286,
      286,  286,  286,  286,  286,  261,  261,  261,  263,  566,
      263,  656,  655,  263,  263,  263,  648,  566,  708,  261,
      261,  261,  708,  263,  648,  263,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  649,  654,  263,  653,  263,

      577,  577,  577,  649,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  205,  650,  205,  271,  271,  271,  293,  293,
      293,  293,  293,  293,  293,  271,  650,  271,  205,  205,
      205,  644,  644,  644,  261,  261,  261,  261,  652,  271,
      638,  271,  261,  730,  706,  205,  646,  646,  646,  730,
      738,  652,  263,  263,  263,  263,  706,  266,  738,  266,
      263,  266,  669,  266,  728,  266,  711,  266,  728,  266,
      266,  637,  266,  701,  701,  701,  266,  711,  266,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  669,  703,
      703,  703,  736,  739,  271,  271,  271,  271,  739,  573,
      568,  736,  271,  565,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  206,  564,  206,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  560,  740,  741,  206,  206,
      206,  740,  741,  557,  556,  554,  742,  206,  206,  206,
      206,  742,  551,  550,  545,  206,  544,  505,  460,  206,
      206,  206,  206,  206,  206,  454,  275,  450,  275,  446,
      275,  436,  275,  434,  275,  431,  275,  206,  275,  275,

      430,  275,  278,  278,  278,  275,  279,  275,  279,  279,
      279,  278,  278,  278,  278,  425,  424,  279,  279,  279,
      279,  279,  279,  278,  278,  278,  278,  278,  278,  279,
      279,  279,  279,  279,  279,  422,  395,  394,  387,  279,
      386,  363,  362,  279,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  207,  361,  207,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  340,  207,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  339,  297,  297,  297,  333,
      333,  333,  333,  333,  333,  333,  358,  358,  358,  358,
      358,  358,  358,  336,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  208,  297,  208,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  337,  337,  337,  337,  337,  337,

      337,  337,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  208,  331,  337,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  316,  313,  301,
      277,  276,  268,  297,  297,  297,  297,  297,  297,  267,
      297,  297,  297,  297,  217,  187,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  229,  298,
      298,  298,  177,  174,  173,  229,  172,  171,  170,  168,
      341,  165,  164,  163,  162,  161,  160,  341,  383,  383,

      383,  383,  383,  383,  383,  159,  341,  341,  158,  157,
      330,  229,  330,  330,  330,  156,  155,  154,  153,  152,
      149,  298,  330,  330,  330,  145,  144,  143,  341,  138,
      137,  123,  341,  122,  117,   91,  330,  330,  330,  341,
       68,   60,  341,   34,  341,  341,  391,  391,  391,  391,
      391,  391,  391,   29,  330,  381,  381,  381,   18,  389,
      389,  389,   13,    9,    7,    5,  298,  298,  298,  298,
      298,  298,    0,  298,  298,  298,  298,    0,    0,    0,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  232,    0,

        0,  330,  330,  330,  330,  232,    0,    0,    0,  330,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  353,
      353,  353,  353,  353,  353,  353,    0,    0,    0,    0,
        0,  232,  353,  353,  353,  353,  353,  353,  353,  353,
      353,    0,    0,    0,  381,  381,  381,  381,  389,  389,
      389,  389,  381,    0,    0,    0,  389,    0,    0,    0,
        0,    0,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  241,  367,  367,  367,  382,  382,  382,  241,
        0,    0,  367,  367,  367,  367,  382,    0,  382,    0,
        0,    0,    0,    0,  367,  367,  367,  367,  367,  367,
      382,  332,  382,  332,    0,  241,  332,  332,  332,    0,
        0,    0,  367,    0,    0,    0,  332,    0,  332,    0,

      373,  373,  373,  373,  373,  373,  373,    0,    0,    0,
      332,    0,  332,  373,  373,  373,  373,  373,  373,  373,
      373,  373,    0,  385,    0,  385,    0,  385,  332,  385,
        0,  385,    0,  385,    0,  385,  385,    0,  385,    0,
        0,    0,  385,    0,  385,  382,  382,  382,  382,    0,
        0,    0,    0,  382,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  242,    0,    0,  332,  332,  332,  332,  242,
        0,    0,    0,  332,    0,  377,  377,  377,  242,  242,
      242,    0,    0,    0,  377,  377,  377,  377,  402,  402,

      402,  402,  402,  402,  402,  242,  377,  377,  377,  377,
      377,  377,    0,    0,    0,  388,  388,  388,    0,    0,
        0,    0,    0,    0,  377,  388,  388,  388,  392,  392,
      392,  392,  392,  392,  392,  392,  392,    0,    0,  388,
      388,  388,    0,    0,    0,    0,  390,  390,  390,  410,
      410,  410,  410,  410,  410,  410,  390,    0,  390,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,    0,
      390,    0,  390,    0,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  243,    0,    0,    0,    0,    0,    0,  243,

        0,    0,    0,    0,  388,  388,  388,  388,  243,  243,
      243,    0,  388,    0,    0,    0,    0,  243,  243,  243,
      243,    0,    0,    0,    0,  243,    0,    0,    0,  243,
      243,  243,  243,  243,  243,  390,  390,  390,  390,    0,
      393,    0,  393,  390,  393,    0,  393,  243,  393,    0,
      393,    0,  393,  393,    0,  393,    0,    0,    0,  393,
        0,  393,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  399,  399,  399,  399,  399,  399,  399,  399,
      399,    0,    0,    0,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  342,
        0,  342,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  400,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  342,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,    0,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  351,    0,  351,  451,  451,  451,  451,
      451,  451,  451,    0,    0,    0,  412,  412,  412,  351,
      351,  351,    0,    0,    0,  412,  412,  412,  412,    0,
      412,    0,    0,    0,    0,    0,  351,  412,  412,  412,
      412,  412,  412,  413,  413,  413,    0,    0,    0,    0,
        0,  412,  413,  413,  413,  413,  415,  413,  415,    0,

        0,  415,  415,  415,  413,  413,  413,  413,  413,  413,
        0,  415,    0,  415,    0,    0,    0,    0,  413,    0,
        0,    0,    0,    0,    0,  415,    0,  415,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  463,  463,  463,
      463,  463,  463,  463,    0,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  352,    0,  352,  455,  455,  455,  455,
      455,  455,  455,  455,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,    0,    0,    0,    0,    0,  455,
      415,  415,  415,  415,    0,    0,  352,    0,  415,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,    0,    0,    0,    0,    0,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,    0,    0,  355,    0,  355,    0,
      355,    0,  355,    0,  355,    0,  355,    0,  355,  355,
        0,  355,    0,    0,    0,  355,    0,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,    0,    0,  356,    0,  356,    0,  356,    0,  356,
        0,  356,    0,  356,    0,  356,  356,    0,  356,    0,
        0,    0,  356,    0,  356,  356,  357,    0,  357,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  357,  357,  357,    0,    0,    0,    0,    0,
        0,  357,  357,  357,  357,    0,    0,    0,    0,  357,
      468,  468,  468,  357,  357,  357,  357,  357,  357,  468,
      468,  468,  468,    0,  474,  474,  474,  474,  474,  474,
      474,  468,  468,  468,  468,  468,  468,  474,  474,  474,
      474,  474,  474,  474,  474,  474,    0,    0,    0,  468,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,    0,    0,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  364,  416,    0,  416,  416,  416,    0,  364,

        0,    0,    0,    0,    0,  416,  416,  416,  484,  484,
      484,    0,  484,  484,  484,  484,  484,  484,  484,  416,
      416,  416,    0,    0,  417,  364,  417,  417,  417,  488,
      488,  488,  488,  488,  488,  488,  417,  417,  417,  417,
        0,    0,  538,  538,  538,    0,  449,  449,  449,    0,
      417,  417,  417,    0,    0,    0,  449,  417,  449,    0,
        0,    0,    0,  456,    0,  456,  456,  456,    0,    0,
      449,    0,  449,    0,    0,  456,  456,  456,    0,    0,
        0,    0,    0,    0,  416,  416,  416,  416,  449,  456,
      456,  456,  416,    0,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  365,    0,    0,  417,  417,  417,  417,  365,
        0,    0,    0,  417,    0,    0,    0,    0,  365,  365,
      365,  538,  538,  538,  538,  449,  449,  449,  449,  538,
        0,    0,    0,  449,    0,  365,  489,  489,  489,  489,
      489,  489,  489,    0,  456,  456,  456,  456,    0,    0,
        0,    0,  456,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  485,  485,  485,  485,
      485,  485,  485,    0,    0,    0,  631,  631,  631,  485,
      485,  485,  485,  485,  485,  485,  486,  486,  486,    0,

      486,  486,  486,  486,  486,  486,  486,  497,  497,  497,
      497,  497,  497,  497,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  366,    0,    0,    0,    0,    0,    0,  366,
      501,  501,  501,  501,  501,  501,  501,    0,  366,  366,
      366,    0,    0,    0,    0,    0,    0,  366,  366,  366,
      366,    0,    0,    0,    0,  366,    0,    0,    0,  366,
      366,  366,  366,  366,  366,  631,  631,  631,  631,  487,
      487,  487,    0,  631,    0,    0,    0,  366,  487,  487,
      487,  487,    0,  492,  492,  492,  492,  492,  492,  492,

      487,  487,  487,  487,  487,  487,  492,  492,  492,  492,
      492,  492,  492,  492,  492,    0,    0,    0,  487,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,    0,    0,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  368,  368,  368,    0,    0,    0,    0,    0,
        0,  368,  368,  368,  368,    0,  502,  502,  502,  502,
      502,  502,  502,  368,  368,  368,  368,  368,  368,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  512,  512,
      512,  368,  512,  512,  512,  512,  512,  512,  512,    0,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  371,    0,    0,    0,    0,    0,
      500,    0,    0,  371,  371,  371,    0,    0,    0,  500,
      500,  500,  371,  371,  371,  371,    0,    0,  500,  500,
      500,  500,    0,    0,  371,  371,  371,  371,  371,  371,
      500,  500,  500,  500,  500,  500,    0,  503,    0,  503,
        0,  503,  371,  503,    0,  503,    0,  503,    0,  503,
      503,    0,  503,    0,    0,    0,  503,    0,  503,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  524,  524,  524,  524,  524,
      524,  524,  371,  371,  371,  371,    0,    0,    0,    0,
      371,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
        0,    0,  375,    0,  375,    0,  375,    0,  375,    0,
      375,    0,  375,    0,  375,  375,    0,  375,    0,    0,
        0,  375,    0,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,    0,    0,  376,
        0,  376,    0,  376,    0,  376,    0,  376,    0,  376,
        0,  376,  376,    0,  376,    0,    0,    0,  376,    0,
      376,  376,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  465,    0,  465,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
        0,    0,    0,    0,  465,  513,  513,  513,  513,  513,
      513,  513,    0,    0,    0,    0,    0,    0,  513,  513,
      513,  513,  513,  513,  513,  514,  514,  514,    0,  514,
      514,  514,  514,  514,  514,  514,  515,  515,  515,    0,
        0,    0,    0,    0,    0,  515,  515,  515,  515,  532,
      532,  532,  532,  532,  532,  532,    0,  515,  515,  515,

      515,  515,  515,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  466,    0,  466,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,    0,    0,    0,  466,  466,  466,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
        0,    0,    0,    0,  466,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  527,  527,  527,  527,  527,  527,

      527,  527,  527,  527,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  467,    0,  467,  541,  541,  541,  541,  541,  541,
      541,    0,    0,  672,  672,  672,    0,  467,  467,  467,
      672,  672,  672,  672,  672,  672,  467,  467,  467,  467,
        0,    0,    0,    0,  467,    0,    0,    0,  467,  467,
      467,  467,  467,  467,  542,  542,  542,  542,  542,  542,

      542,  542,  542,    0,    0,    0,  467,    0,    0,  534,
      534,  534,  576,  576,  576,  576,  576,  576,  576,  534,
      534,  534,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,    0,  534,  534,  534,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  586,  586,  586,  586,
      586,  586,  586,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  469,  469,  469,    0,    0,    0,    0,    0,    0,
      469,  469,  469,  469,  616,  616,  616,  616,  616,  616,
      616,    0,  469,  469,  469,  469,  469,  469,  534,  534,

      534,  534,    0,    0,    0,    0,  534,  612,  612,  612,
      469,  612,  612,  612,  612,  612,  612,  612,    0,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  472,    0,  472,  535,  535,  535,  617,
      617,  617,  617,  617,  617,  617,  535,    0,  535,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,    0,
      535,    0,  535,  536,    0,  536,  472,    0,  536,  536,
      536,    0,  539,  539,  539,    0,    0,    0,  536,    0,
      536,    0,  539,    0,  539,    0,    0,  543,    0,  543,
        0,  543,  536,  543,  536,  543,  539,  543,  539,  543,

      543,    0,  543,  546,  546,  546,  543,    0,  543,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,    0,
        0,    0,    0,  546,    0,  535,  535,  535,  535,    0,
        0,    0,    0,  535,    0,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  473,    0,  473,    0,  536,  536,  536,
      536,  539,  539,  539,  539,  536,    0,    0,    0,  539,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
        0,    0,    0,    0,    0,    0,  473,    0,    0,    0,
      546,  546,  546,  546,  546,  546,    0,  546,  546,  546,

      546,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,    0,    0,    0,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,    0,    0,  476,    0,  476,    0,
      476,    0,  476,    0,  476,    0,  476,    0,  476,  476,
        0,  476,    0,    0,    0,  476,    0,  476,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,    0,    0,  477,    0,  477,    0,  477,    0,  477,
        0,  477,    0,  477,    0,  477,  477,    0,  477,    0,
        0,    0,  477,    0,  477,  477,  478,    0,  478,  547,
      547,  547,  581,  581,  581,  581,  581,  581,  581,    0,

        0,    0,  478,  478,  478,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  547,    0,    0,    0,    0,  478,
      569,  569,  569,  634,  634,  634,  634,  634,  634,  634,
      569,    0,  569,    0,    0,  578,    0,  578,  578,  578,
        0,    0,    0,    0,  569,  569,  569,  578,  578,  578,
      645,  645,  645,  645,  645,  645,  645,  595,  595,  595,
        0,  578,  578,  578,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,    0,    0,  547,  547,  547,  547,
      547,  547,    0,  547,  547,  547,  547,    0,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  490,    0,    0,  569,
      569,  569,  569,  490,    0,    0,    0,  569,    0,    0,
        0,    0,  490,  490,  490,    0,  578,  578,  578,  578,
        0,    0,    0,    0,  578,    0,    0,    0,    0,  490,
      596,  596,  596,  596,  596,  596,  596,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  597,  597,  597,    0,
        0,    0,    0,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  602,  602,  602,  602,  602,  602,  602,
        0,    0,    0,    0,    0,    0,  602,  602,  602,  602,

      602,  602,  602,  602,  602,    0,    0,    0,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  491,  599,  599,  599,
        0,    0,    0,  491,    0,    0,  599,  599,  599,  599,
      666,  666,  666,  666,  666,  666,  666,    0,  599,  599,
      599,  599,  599,  599,    0,    0,    0,    0,    0,  491,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,    0,    0,    0,    0,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,    0,    0,  494,

        0,  494,    0,  494,    0,  494,    0,  494,    0,  494,
        0,  494,  494,    0,  494,    0,    0,    0,  494,    0,
      494,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,    0,    0,  495,    0,  495,    0,
      495,    0,  495,    0,  495,    0,  495,    0,  495,  495,
        0,  495,    0,    0,    0,  495,    0,  495,  495,  496,
        0,    0,    0,  614,  614,  614,  496,  614,  614,  614,
      614,  614,  614,  614,    0,  496,  496,  496,    0,    0,
        0,    0,    0,    0,  496,  496,  496,  496,    0,    0,
        0,    0,  496,    0,    0,    0,  496,  496,  496,  496,

      496,  496,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  613,  613,
      613,  613,  613,  613,  613,    0,    0,    0,    0,    0,
        0,  613,  613,  613,  613,  613,  613,  613,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  506,    0,    0,    0,    0,
        0,  618,    0,    0,  506,  506,  506,    0,    0,    0,
      618,  618,  618,  506,  506,  506,  506,    0,    0,  618,
      618,  618,  618,    0,    0,  506,  506,  506,  506,  506,
      506,  618,  618,  618,  618,  618,  618,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,    0,
        0,    0,    0,  506,  506,  506,  506,    0,    0,    0,
        0,  506,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      579,    0,  579,  624,  624,  624,    0,  624,  624,  624,
      624,  624,  624,  624,    0,    0,  579,  579,  579,    0,
        0,  625,  625,  625,  625,  625,  625,  625,    0,    0,
        0,    0,    0,  579,  625,  625,  625,  625,  625,  625,
      625,  626,  626,  626,    0,  626,  626,  626,  626,  626,
      626,  626,  628,  628,  628,  629,  629,  629,    0,    0,
        0,  628,  628,  628,  628,  629,    0,  629,    0,    0,
      630,  630,  630,  628,  628,  628,  628,  628,  628,  629,
      630,  629,  630,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,    0,  630,    0,  630,    0,    0,    0,

        0,    0,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      580,  636,  580,  636,    0,  636,    0,  636,    0,  636,
        0,  636,    0,  636,  636,    0,  636,    0,    0,    0,
      636,    0,  636,    0,  629,  629,  629,  629,    0,    0,
        0,    0,  629,  580,    0,    0,    0,    0,    0,  630,
      630,  630,  630,    0,    0,    0,    0,  630,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,    0,    0,
        0,    0,    0,    0,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,    0,    0,  583,    0,  583,    0,  583,    0,  583,

        0,  583,    0,  583,    0,  583,  583,    0,  583,    0,
        0,    0,  583,    0,  583,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,    0,    0,
      584,    0,  584,    0,  584,    0,  584,    0,  584,    0,
      584,    0,  584,  584,    0,  584,    0,    0,    0,  584,
        0,  584,  584,  585,    0,  585,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,    0,    0,    0,  585,
      585,  585,    0,    0,    0,    0,    0,    0,  585,  585,
      585,  585,    0,    0,    0,    0,  585,    0,    0,    0,
      585,  585,  585,  585,  585,  585,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  665,  665,  665,    0,    0,
        0,    0,    0,    0,  665,  665,  665,  665,    0,  667,
      667,  667,  667,  667,  667,  667,  665,  665,  665,  665,
      665,  665,  667,  667,  667,  667,  667,  667,  667,  667,
      667,    0,    0,    0,    0,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  589,
        0,  589,  632,  632,  632,    0,    0,    0,  673,  673,
      673,    0,  632,    0,  632,  673,  673,  673,  673,  673,
      673,    0,    0,    0,    0,    0,  632,    0,  632,  676,
      676,  676,  589,  664,  664,  664,  676,  676,  676,  676,
      676,  676,    0,  664,    0,  664,  677,  677,  677,    0,

      677,  677,  677,  677,  677,  677,  677,  664,  664,  664,
      668,    0,  668,    0,  668,    0,  668,    0,  668,    0,
      668,    0,  668,  668,    0,  668,    0,    0,    0,  668,
        0,  668,  681,  681,  681,  681,  681,  681,  681,    0,
        0,  632,  632,  632,  632,    0,    0,    0,    0,  632,
        0,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  590,
        0,  590,  664,  664,  664,  664,    0,    0,    0,    0,
      664,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,    0,    0,    0,  680,  680,  680,

        0,    0,  590,  671,  671,  671,  680,  680,  680,  680,
        0,    0,  671,  671,  671,  671,    0,    0,  680,  680,
      680,  680,  680,  680,  671,  671,  671,  671,  671,  671,
        0,    0,    0,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  598,
        0,  598,  671,  671,  671,  671,    0,    0,    0,    0,

      671,    0,    0,    0,    0,  598,  598,  598,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,    0,  598,  678,  678,  678,  678,  678,  678,  678,
        0,    0,    0,    0,    0,    0,  678,  678,  678,  678,
      678,  678,  678,  679,  679,  679,    0,  679,  679,  679,
      679,  679,  679,  679,  682,  682,  682,  682,  682,  682,
      682,  684,  684,  684,    0,    0,    0,  685,  685,  685,
      684,  684,  684,  684,  685,  685,  685,  685,  685,  685,
        0,    0,  684,  684,  684,  684,  684,  684,    0,    0,
        0,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  598,  600,
      686,  686,  686,    0,    0,    0,  600,  686,  686,  686,
      686,  686,  686,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,    0,    0,    0,    0,
        0,    0,  600,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  689,  689,  689,    0,
        0,    0,    0,  689,  689,  689,  689,  689,  689,  690,
      690,  690,    0,  690,  690,  690,  690,  690,  690,  690,
      691,  691,  691,  691,  691,  691,  691,    0,    0,    0,
        0,    0,    0,  691,  691,  691,  691,  691,  691,  691,

      692,  692,  692,    0,  692,  692,  692,  692,  692,  692,
      692,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  601,
      694,  694,  694,    0,    0,    0,  601,    0,    0,  694,
      694,  694,  694,    0,    0,    0,    0,    0,  695,    0,
        0,  694,  694,  694,  694,  694,  694,  695,  695,  695,
        0,    0,  601,    0,    0,    0,  695,  695,  695,  695,
      702,  702,  702,  702,  702,  702,  702,    0,  695,  695,
      695,  695,  695,  695,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

        0,    0,  604,    0,  604,    0,  604,    0,  604,    0,
      604,    0,  604,    0,  604,  604,    0,  604,    0,    0,
        0,  604,    0,  604,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,    0,    0,  605,
        0,  605,    0,  605,    0,  605,    0,  605,    0,  605,
        0,  605,  605,    0,  605,    0,    0,    0,  605,    0,
      605,  605,  606,  693,  693,  693,    0,    0,    0,  606,
        0,    0,  693,  693,  693,  693,    0,    0,  606,  606,
      606,    0,    0,    0,  693,  693,  693,  693,  693,  693,
        0,    0,    0,    0,    0,  606,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,    0,  704,  704,  704,
        0,    0,    0,    0,    0,    0,    0,  704,    0,  704,
        0,    0,  693,  693,  693,  693,    0,    0,    0,    0,
      693,  704,    0,  704,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  615,    0,    0,    0,  721,  721,  721,  615,
      721,  721,  721,  721,  721,  721,  721,    0,  615,  615,

      615,    0,    0,    0,    0,    0,    0,  615,  615,  615,
      615,    0,    0,    0,    0,  615,    0,    0,    0,  615,
      615,  615,  615,  615,  615,    0,  704,  704,  704,  704,
      715,  715,  715,    0,  704,    0,    0,    0,    0,  715,
      715,  715,  715,    0,    0,    0,    0,    0,    0,    0,
        0,  715,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,    0,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  627,    0,    0,  725,  725,  725,    0,    0,
        0,  627,  627,  627,  725,  725,  725,  725,    0,    0,
      627,  627,  627,  627,    0,    0,  725,  725,  725,  725,
      725,  725,  627,  627,  627,  627,  627,  627,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  722,  722,  722,
      722,  722,  722,  722,    0,    0,    0,    0,    0,    0,
      722,  722,  722,  722,  722,  722,  722,    0,    0,    0,

      627,  627,  627,  627,    0,    0,    0,    0,  627,  683,
        0,  683,  723,  723,  723,    0,  723,  723,  723,  723,
      723,  723,  723,    0,    0,  726,  726,  726,    0,    0,
        0,    0,    0,    0,  726,  726,  726,  726,    0,    0,
        0,    0,  683,  724,  724,  724,  726,  726,  726,  726,
      726,  726,  724,  724,  724,  724,    0,    0,    0,    0,
      727,  727,  727,    0,  724,  724,  724,  724,  724,  724,
      727,    0,  727,    0,    0,    0,    0,    0,  735,  735,
      735,    0,    0,    0,  727,    0,  727,  735,  735,  735,
      735,    0,    0,    0,    0,    0,    0,    0,    0,  735,

      735,  735,  735,  735,  735,    0,    0,    0,    0,    0,
        0,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,    0,
        0,    0,  724,  724,  724,  724,    0,    0,    0,    0,
      724,    0,    0,    0,    0,    0,    0,    0,    0,  727,
      727,  727,  727,    0,    0,    0,    0,  727,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      748,    0,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  750,  750,  750,  750,  750,  750,  750,  750,  750,

      750,  750,  751,  751,    0,  751,  751,  752,  752,  752,
      752,  752,  752,  753,  753,  753,  753,  753,  753,  754,
      754,  754,  755,  755,  755,  755,  755,  755,  756,    0,
      756,    0,  756,  756,  756,  756,  756,  756,  756,  757,
        0,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  759,    0,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  761,  761,    0,  761,  761,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  764,
      764,  764,  765,  765,  765,  765,  765,  765,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  767,
        0,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      768,  768,  768,  768,  768,  768,  769,  769,  769,  769,
      769,  769,  770,  770,  770,  770,  770,  770,  771,  771,
      771,  771,  771,  771,  772,  772,  772,  773,    0,  773,
        0,  773,  773,  773,  773,  773,  773,  773,  774,    0,
      774,    0,    0,  774,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  777,  777,  777,  777,  777,  777,  778,  778,  778,

      778,  778,  778,  779,  779,  779,  779,  779,  779,  780,
      780,  780,  780,  780,  780,  781,  781,  781,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  783,
        0,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      785,  785,  785,  785,  785,  785,  786,  786,  786,  786,
      786,  786,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  790,  790,  790,  790,  790,
      790,  791,  791,  791,  791,  791,  791,  792,  792,  792,

      792,  792,  792,  792,  792,  792,  792,  792,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      796,  796,  796,  796,  796,  796,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "cc.ll"
#line 2 "cc.ll"
/*--   Copyright (C) 2009 Jonathan Schmidt-Dominé <devel@the-user.org>
--   Derived from the KDevelop-Java-Lexer
--
--   This library is free software; you can redistribute it and/or
--   modify it under the terms of the GNU Library General Public
--   License as published by the Free Software Foundation; either
--   version 2 of the License, or (at your option) any later version.
--
--   This library is distributed in the hope that it will be useful,
--   but WITHOUT ANY WARRANTY; without even the implied warranty of
--   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--   Library General Public License for more details.
--
--   You should have received a copy of the GNU Library General Public License
--   along with this library; see the file COPYING.LIB.  If not, write to
--   the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
--   Boston, MA 02111-1307, USA.*/
#line 27 "cc.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "lexer.h"
#include <kdebug.h>

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* \u0024, \u0041-\u005a, \u005f, \u0061-\u007a: one byte in UTF-8 */
/* \u00c0-\u00d6, \u00d8-\u00f6, \u00f8-\u00ff */
/* \u0100-\u1fff */
/* \u3040-\u318f */
/* \u3300-\u337f */
/* \u3400-\u3d2d */
/* \u4e00-\u9fff */
/* \uf900-\ufaff */
/* \u0030-\u0039: ISO-LATIN-1 digits */
/* \u0660-\u0669, \u06f0-\u06f9: Arabic-Indic and extended Ar.-Indic digits */
/* \u0966-\u096f, \u09e6-\u09ef: Devanagari digits */
/* \u0a66-\u0a6f, \u0ae6-\u0aef */
/* \u0b66-\u0b6f, \u0be7-\u0bef */
/* \u0c66-\u0c6f, \u0ce6-\u0cef, \u0d66-\u0d6f */
/* \u0e50-\u0e59, \u0ed0-\u0ed9 */
/* \u1040-\u1049 */
/* \uff10-\uff19: Fullwidth digits */
/* \u0080-\uffff */
/* \u10000-\u1fffff */
/* \u200000-\u3ffffff */
/* \u4000000-\u7fffffff */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* non-Unicode stuff */

#line 2689 "cclexer.cpp"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 122 "cc.ll"


 /* whitespace, newlines, preprocessor-statements and comments */

#line 2795 "cclexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 746 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8770 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 126 "cc.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 127 "cc.ll"
/* skip */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 129 "cc.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 130 "cc.ll"
/* preprocessor statement, skip */ ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "cc.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 134 "cc.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 135 "cc.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 136 "cc.ll"
/* skip */ ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 137 "cc.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 138 "cc.ll"
{
    kDebug() << "Encountered end of file in an unclosed block comment";
    return Parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 10:
YY_RULE_SETUP
#line 147 "cc.ll"
return Parser::Token_LPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 148 "cc.ll"
return Parser::Token_RPAREN;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 149 "cc.ll"
return Parser::Token_LBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 150 "cc.ll"
return Parser::Token_RBRACE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 151 "cc.ll"
return Parser::Token_LBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 152 "cc.ll"
return Parser::Token_RBRACKET;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 153 "cc.ll"
return Parser::Token_COMMA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 154 "cc.ll"
return Parser::Token_SEMICOLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 155 "cc.ll"
return Parser::Token_DOT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "cc.ll"
return Parser::Token_ARROW;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 157 "cc.ll"
return Parser::Token_COLON;
	YY_BREAK
/* operators */
case 21:
YY_RULE_SETUP
#line 162 "cc.ll"
return Parser::Token_QUESTION;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 163 "cc.ll"
return Parser::Token_NOT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "cc.ll"
return Parser::Token_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 165 "cc.ll"
return Parser::Token_EQUAL_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 166 "cc.ll"
return Parser::Token_LESS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 167 "cc.ll"
return Parser::Token_LESS_EQUAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 168 "cc.ll"
return Parser::Token_GREATER;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 169 "cc.ll"
return Parser::Token_GREATER_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 170 "cc.ll"
return Parser::Token_NOT_EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 171 "cc.ll"
return Parser::Token_AND_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 172 "cc.ll"
return Parser::Token_OR_OR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 173 "cc.ll"
return Parser::Token_PLUS_PLUS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 174 "cc.ll"
return Parser::Token_MINUS_MINUS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 175 "cc.ll"
return Parser::Token_EQUAL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 176 "cc.ll"
return Parser::Token_PLUS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 177 "cc.ll"
return Parser::Token_PLUS_EQUAL;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 178 "cc.ll"
return Parser::Token_MINUS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 179 "cc.ll"
return Parser::Token_MINUS_EQUAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 180 "cc.ll"
return Parser::Token_STAR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 181 "cc.ll"
return Parser::Token_STAR_EQUAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 182 "cc.ll"
return Parser::Token_DIVIDE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 183 "cc.ll"
return Parser::Token_DIVIDE_EQUAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 184 "cc.ll"
return Parser::Token_AND;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 185 "cc.ll"
return Parser::Token_AND_EQUAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 186 "cc.ll"
return Parser::Token_OR;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 187 "cc.ll"
return Parser::Token_OR_EQUAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 188 "cc.ll"
return Parser::Token_XOR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 189 "cc.ll"
return Parser::Token_XOR_EQUAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 190 "cc.ll"
return Parser::Token_REMAINDER;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 191 "cc.ll"
return Parser::Token_REMAINDER_EQUAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 192 "cc.ll"
return Parser::Token_LSHIFT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 193 "cc.ll"
return Parser::Token_LSHIFT_EQUAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 194 "cc.ll"
return Parser::Token_RSHIFT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 195 "cc.ll"
return Parser::Token_RSHIFT_EQUAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 196 "cc.ll"
return Parser::Token_ELLIPSIS;
	YY_BREAK
/* keywords */
case 56:
YY_RULE_SETUP
#line 200 "cc.ll"
return Parser::Token_BREAK;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 201 "cc.ll"
return Parser::Token_CASE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 202 "cc.ll"
return Parser::Token_CONTINUE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 203 "cc.ll"
return Parser::Token_DEFAULT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 204 "cc.ll"
return Parser::Token_DO;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 205 "cc.ll"
return Parser::Token_ELSE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 206 "cc.ll"
return Parser::Token_ENUM;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 207 "cc.ll"
return Parser::Token_FOR;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 208 "cc.ll"
return Parser::Token_GOTO;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 209 "cc.ll"
return Parser::Token_IF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 210 "cc.ll"
return Parser::Token_RETURN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 211 "cc.ll"
return Parser::Token_SWITCH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 212 "cc.ll"
return Parser::Token_WHILE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 213 "cc.ll"
return Parser::Token_STATIC;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 214 "cc.ll"
return Parser::Token_VOLATILE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "cc.ll"
return Parser::Token_VOLATILE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 216 "cc.ll"
return Parser::Token_CONST;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "cc.ll"
return Parser::Token_TYPEDEF;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 218 "cc.ll"
return Parser::Token_EXTERN;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 219 "cc.ll"
return Parser::Token_AUTO;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 220 "cc.ll"
return Parser::Token_REGISTER;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 221 "cc.ll"
return Parser::Token_VOID;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 222 "cc.ll"
return Parser::Token_INT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 223 "cc.ll"
return Parser::Token_CHAR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 224 "cc.ll"
return Parser::Token_SHORT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 225 "cc.ll"
return Parser::Token_LONG;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 226 "cc.ll"
return Parser::Token_SIGNED;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 227 "cc.ll"
return Parser::Token_UNSIGNED;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 228 "cc.ll"
return Parser::Token_FLOAT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 229 "cc.ll"
return Parser::Token_DOUBLE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 230 "cc.ll"
return Parser::Token_UNION;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 231 "cc.ll"
return Parser::Token_ASM;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 232 "cc.ll"
return Parser::Token_ASM;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 233 "cc.ll"
return Parser::Token_EXTENSION;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 234 "cc.ll"
return Parser::Token_INLINE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 235 "cc.ll"
return Parser::Token_INLINE;
	YY_BREAK
/* characters and strings (C with unicode-support) */
case 92:
YY_RULE_SETUP
#line 239 "cc.ll"
return Parser::Token_X_CONSTANT;
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 240 "cc.ll"
{
    kDebug() << QString("Invalid character literal: %1").arg(yytext);
    return Parser::Token_X_CONSTANT;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 245 "cc.ll"
return Parser::Token_STRING_LITERAL;
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 246 "cc.ll"
{
    kDebug() << QString("Invalid string literal: %1").arg(yytext);
    return Parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* identifiers and number literals */
case 96:
YY_RULE_SETUP
#line 254 "cc.ll"
return Parser::Token_IDENTIFIER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 256 "cc.ll"
return Parser::Token_X_CONSTANT;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 257 "cc.ll"
return Parser::Token_X_CONSTANT;
	YY_BREAK
/* everything else is not a valid lexeme */
case 99:
YY_RULE_SETUP
#line 262 "cc.ll"
{
                        kDebug() << "INVALID TOKEN";
                        exit(-1);
                   }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 267 "cc.ll"
ECHO;
	YY_BREAK
#line 3406 "cclexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 746 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 746 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 745);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 267 "cc.ll"



namespace cc
{

Lexer::Lexer( Parser *parser, char *contents )
{
    restart( parser, contents );
}

void Lexer::restart( Parser *parser, char *contents )
{
    m_parser = parser;
    m_locationTable = parser->tokenStream->locationTable();
    m_contents = contents;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;

    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':
        m_locationTable->newline( m_currentOffset - 1 );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

} // end of namespace cc

