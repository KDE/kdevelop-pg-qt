#line 2 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#line 4 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[514] =
    {   0,
        1,    1,  127,  127,   60,   60,  103,  103,  106,  106,
      122,  122,  136,  134,  135,    1,  134,  135,    2,  135,
        2,  134,  135,  134,  135,   13,  134,  135,  134,  135,
       22,  134,  135,    7,  134,  135,    8,  134,  135,   18,
      134,  135,   17,  134,  135,   11,  134,  135,  134,  135,
       14,  134,  135,   12,  132,  134,  135,  132,  134,  135,
       15,  134,  135,    4,  134,  135,   16,  134,  135,   19,
      134,  135,   20,  134,  135,  130,  131,  134,  135,   72,
      134,  135,  131,  134,  135,  131,  134,  135,  131,  134,
      135,    9,  134,  135,   21,  134,  135,   10,  134,  135,

      127,  135,  126,  135,  126,  135,  128,  135,   71,  135,
       60,   71,  135,   61,  135,   61,   71,  135,   62,   71,
      135,   70,   71,  135,   71,  135,   71,  135,   71,  135,
       71,  135,  103,  135,  100,  135,  100,  135,  102,  135,
      104,  135,  105,  135,  120,  135,  106,  120,  135,  107,
      135,  107,  120,  135,  110,  120,  135,  120,  135,  118,
      120,  135,  109,  120,  135,  117,  120,  135,  118,  120,
      135,  119,  120,  135,  118,  120,  135,  118,  120,  135,
      118,  120,  135,  118,  120,  135,  118,  120,  135,  122,
      124,  135,  121,  135,  121,  124,  135,  123,  124,  135,

      135,   98,  135,   74,  135,   74,  135,  135,   87,  135,
       81,  135,   82,  135,   89,  135,   90,  135,  135,   92,
      135,   97,  135,16480,   78,  135,   77,  135,   83,  135,
       91,  135,   97,  135,16479,16480,   79,  135,  135,   80,
      135,   85,  135,  135,   84,  135,   88,  135,    1,    2,
      133,   52,   53,    3,    5,    6,  132,    4,  131,  130,
      131,  125,  131,  131,  127,  126,  128,  128,  129,   60,
       61,  103,  100,  101,  106,  107,  108,  118,  109,  118,
      118,  118,  118,  118,  118,  118,  122,  121,   74,   99,
       73,   93,   97,16480, 8288,16460,   77, 8287, 8288,   97,

    16479,16480,   94,   97,   97,   97,   97,   97,  133,    3,
      131,  131,  101,  108,  118,  118,  118,  118,  118,  118,
       99,   73,   86,   97,   97,   97,   97,   97, 8268,   97,
       97,   97,   97,   75,   46,   47,  131,   69,  118,  118,
      114,  118,  118,  118,  118,   86,   86,   86,   86,   97,
       97,   97,   97,   97,   97,   97,   97,   54,   48,   49,
       25,  131,  118,  118,  118,  115,  118,  118,   86,   86,
       86,   86,   97,   97,   97,   97,   97,   97,   97,   58,
       50,   55,   28,   63,  118,  111,  118,  118,  118,   86,
       86,   86,   86,   97,   97,   97,   97,   97,   97,   56,

       64,  118,  118,  118,   86,   86,   86,   97,   97,   97,
       97,   97,   97,   57,  113,  118,  118,  116,  118,   86,
       86,   86,   97,   97,   97,   97,   97,   97,   43,   59,
       51,   65,  112,  118,   86,   86,   86,   97,   97,   97,
       97,   97,   30,   68,   86,   86,   97,   97,   97,   37,
       32,   23,   67,   66,   86,   86,   97,   97,   44,   31,
       41,   24,   86,   97,   97,   26,   33,   29,   86,   97,
       97,   86,   97,   97,   40,   42,   86,   97,   97,   86,
       97,   97,   86,   97,   97,   34,   45,   86,   97,   97,
       36,   86,   97,   97,   27,   86,   97,   97,   86,   97,

       97,   86,   97,   97,   86,   97,   97,   86,   97,   39,
       86,   35,   38
    } ;

static yyconst flex_int16_t yy_accept[658] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
       11,   12,   13,   13,   13,   14,   16,   19,   21,   24,
       26,   29,   31,   34,   37,   40,   43,   46,   49,   51,
       54,   58,   61,   64,   67,   70,   73,   76,   80,   83,
       86,   89,   92,   95,   98,  101,  103,  105,  107,  109,
      111,  114,  116,  119,  122,  125,  127,  129,  131,  133,
      135,  137,  139,  141,  143,  145,  147,  150,  152,  155,
      158,  160,  163,  166,  169,  172,  175,  178,  181,  184,
      187,  190,  193,  195,  198,  201,  202,  204,  206,  208,
      209,  211,  213,  215,  217,  219,  220,  222,  225,  227,

      229,  231,  233,  237,  239,  240,  242,  244,  245,  247,
      249,  250,  251,  251,  252,  252,  253,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  255,
      256,  257,  258,  259,  260,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  272,  272,  272,  272,
      272,  273,  274,  274,  275,  275,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  290,  291,  291,  292,  293,  293,  293,  295,  296,
      296,  297,  297,  298,  298,  300,  303,  304,  305,  306,
      307,  308,  309,  309,  309,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  311,  312,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  314,  314,  315,  316,  317,  318,
      319,  320,  321,  321,  322,  322,  323,  324,  324,  325,
      326,  327,  328,  329,  330,  330,  331,  332,  333,  334,
      334,  335,  335,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  337,  337,  337,  337,  337,  337,
      337,  338,  338,  339,  339,  339,  339,  339,  339,  339,
      340,  341,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  353,  354,  354,  355,  356,  357,  358,  358,

      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  360,  361,  361,  363,  363,  363,
      363,  363,  363,  363,  363,  364,  365,  366,  368,  369,
      370,  371,  372,  373,  374,  375,  376,  377,  378,  379,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  381,
      381,  382,  382,  382,  383,  383,  383,  384,  384,  384,
      384,  384,  384,  384,  384,  385,  386,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      400,  400,  400,  400,  400,  400,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      402,  402,  403,  404,  405,  406,  407,  408,  409,  410,
      411,  412,  413,  414,  414,  414,  414,  414,  414,  414,
      414,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  417,  418,  420,  421,
      422,  423,  424,  425,  426,  427,  428,  429,  430,  430,
      430,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      433,  435,  436,  437,  438,  439,  440,  441,  442,  443,
      443,  443,  443,  443,  443,  443,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  445,

      446,  447,  448,  449,  450,  450,  451,  451,  451,  451,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  453,
      453,  454,  455,  456,  457,  458,  459,  459,  459,  459,
      459,  460,  460,  460,  461,  461,  462,  462,  462,  463,
      464,  465,  466,  466,  467,  467,  468,  468,  468,  468,
      468,  469,  470,  471,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  473,  474,  475,  475,  475,  476,  476,
      476,  477,  477,  477,  478,  479,  480,  480,  480,  480,
      480,  480,  480,  480,  481,  482,  483,  483,  483,  483,
      483,  483,  483,  483,  484,  485,  486,  487,  487,  487,

      487,  487,  488,  488,  489,  490,  491,  491,  492,  492,
      492,  492,  493,  494,  495,  496,  496,  496,  496,  497,
      498,  499,  499,  499,  499,  500,  501,  502,  502,  502,
      502,  503,  504,  505,  505,  505,  505,  506,  507,  508,
      508,  508,  508,  509,  510,  510,  510,  511,  512,  513,
      513,  513,  513,  513,  513,  514,  514
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,   10,    6,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   30,   30,   31,   30,   30,
       32,   32,   32,   32,   32,   33,   32,   32,   34,   32,
       32,   35,   32,   32,   36,   32,   32,   36,   37,   32,
       38,   39,   40,   41,   42,    6,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   52,   65,
       66,   52,   67,   68,   69,   70,    6,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    2,    3,    3,    4,    5,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    5,    5,    8,    8,
        8,    8,    9,   10,    5,    5,    5,    5,    5,   11,
       11,   12,   12,   12,   12,   12,   12,    6,   13,    6,
        5,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,    5,    5,   14,    5
    } ;

static yyconst flex_int16_t yy_base[692] =
    {   0,
        0,    0,   68,   70,   73,   77,   92,   98,  138,    0,
       83,  100,  208,    0, 1810, 1811,   92, 1811, 1806,   76,
     1811,  254, 1811, 1811, 1811, 1811, 1811, 1811,   82, 1782,
       91,  106, 1811, 1783, 1811, 1811, 1811,  252, 1783,    0,
     1762, 1744, 1811, 1811, 1811,    0, 1811, 1800,   93, 1811,
      132, 1811, 1799, 1811, 1811, 1750, 1743, 1752,  230,    0,
     1811, 1795,  284, 1811, 1811, 1811,  290, 1811, 1794, 1811,
     1780,    0,  298, 1811,  298, 1811,  305,  309,  313,  317,
      323,    0, 1811, 1792, 1811, 1811, 1811, 1811, 1791,  302,
     1811, 1811, 1811, 1811, 1811,  280, 1811,  344, 1811,  373,

     1811, 1811,  396, 1770,  348, 1811, 1811,    0, 1811, 1811,
      348, 1811,  315, 1811,  333, 1811, 1811, 1731, 1740, 1733,
     1724,  250, 1741, 1744,  330, 1735, 1738,  312,    0, 1811,
     1811,  387, 1760,    0,  409, 1811, 1721, 1716,    0, 1811,
      281,  340, 1811,  356, 1811, 1719, 1724,   45,   57, 1735,
        0, 1811,  364, 1811,  379,  386, 1811,    0,    0,  390,
      402,  428,  433,  437,  441,  445,  449,    0, 1811, 1811,
      386, 1811,  395,    0, 1811,  470, 1739,  476, 1811,  453,
      501, 1761,  518,  509, 1811, 1760, 1811,  365,  508,  516,
      540,  524, 1706,  469,  500,  519, 1712, 1717, 1716, 1713,

     1712,  382,  371, 1714, 1708, 1706,  435, 1717, 1706, 1720,
     1703, 1709,    0, 1716, 1742, 1698, 1697, 1703, 1694, 1691,
     1692, 1699,  534,  538,  539,    0,  529,  545,  574,  578,
      582,  586,  573,  574,  575,    0, 1811,  586,  515,  619,
      626,  650,  611, 1728,  348,  640,  666,  687,  672, 1682,
     1811, 1708, 1811, 1687, 1691, 1684, 1699, 1694, 1682, 1696,
     1695,  349, 1679, 1811, 1683, 1689, 1675, 1683, 1680, 1688,
     1684, 1673, 1811, 1670, 1688, 1670, 1686, 1681, 1676,  655,
      680,  693,  700,  704,  718,  722,  555,    0,  482,  729,
      743,  764,  736,  549,  750,  757,  794,  781,  743, 1675,

     1665, 1662, 1675, 1673, 1811, 1661, 1659, 1663, 1671, 1811,
     1657, 1654, 1668, 1667, 1811, 1657,    0,  310, 1652, 1651,
     1647, 1647, 1663, 1662,  783,  807,  812,  824,  829,  833,
      590,    0,  549,  840,  849,  870,  855,  864,  900,  886,
     1663, 1640, 1657, 1647, 1640, 1659, 1638, 1649, 1653, 1639,
     1811, 1636, 1644, 1811, 1638, 1651, 1650, 1646, 1636, 1626,
     1645, 1642, 1613, 1595, 1811,  876,  888,  907,  914,  918,
      605,    0,  571,  933,  954,  940,  942,  984,  950, 1595,
     1588, 1606, 1569, 1589,  572, 1811, 1556, 1550, 1547,  573,
     1514, 1517, 1494, 1482, 1485, 1487, 1479, 1459, 1458, 1811,

     1458,  971,  988,  997, 1001,    0,  634, 1018, 1039, 1026,
     1033, 1069, 1055, 1451, 1431, 1440, 1438, 1426, 1424, 1405,
     1811, 1413, 1408,  447, 1385, 1365, 1378, 1373,  435, 1355,
     1362, 1284, 1294, 1287, 1297, 1057, 1076, 1082, 1086,    0,
      644, 1102, 1124, 1109, 1111,  618, 1118, 1811, 1299, 1294,
     1811, 1297, 1293, 1276, 1274, 1287,   49, 1286, 1289, 1811,
     1288, 1264, 1279, 1262, 1274, 1267, 1252, 1241, 1237, 1811,
     1139, 1143,    0,  648, 1157,  639, 1164,  742, 1166, 1244,
     1225, 1229, 1216, 1215, 1200, 1811, 1189, 1187, 1198, 1177,
     1183, 1179, 1182, 1177, 1163, 1174, 1157, 1157, 1811, 1168,

      664,  749, 1175, 1181, 1156, 1811, 1142, 1153, 1155, 1811,
     1146, 1131, 1127, 1114, 1127, 1106, 1101, 1110, 1811, 1098,
     1811, 1811, 1811,  670, 1188, 1190, 1100, 1083, 1084, 1071,
     1811, 1078, 1076, 1811, 1046, 1811, 1068, 1054, 1811,  684,
     1196, 1202, 1038, 1050, 1025, 1811, 1030, 1013, 1021, 1016,
     1014,  709, 1212, 1214, 1007,  993,  992,  989,  992,  966,
      978,  980,  727, 1220, 1226,  966,  965, 1811,  968,  934,
     1811,  950,  748,  734, 1228, 1236,  934,  945,  941,  931,
      924,  916,  909,  760, 1238, 1244,  906,  905,  894,  867,
      880,  857,  838,  798, 1250, 1252, 1811,  846,  827,  822,

      806, 1811,  805,  802, 1260, 1262,  763, 1811,  777,  763,
      748,  816, 1268, 1274, 1811,  742,  712,  720,  838, 1276,
     1284,  689,  665,  630,  844, 1286, 1292,  605,  587,  582,
      857, 1298, 1300,  570,  516,  510,  862, 1308,  926,  491,
      443,  377,  892,  941,  356,  312, 1811, 1811, 1811,  266,
      259,  234,   82,   60, 1811, 1811, 1347, 1361, 1375, 1389,
     1403, 1410, 1422, 1436, 1450, 1464, 1471, 1476, 1488, 1502,
     1515, 1525, 1533, 1545, 1559, 1573, 1587, 1601, 1615, 1622,
     1632, 1640, 1647, 1658, 1672,  975, 1039, 1055, 1056, 1128,
     1141

    } ;

static yyconst flex_int16_t yy_def[692] =
    {   0,
      656,    1,  657,  657,  658,  658,  659,  659,  656,    9,
      660,  660,  656,   13,  656,  656,  656,  656,  656,  661,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  662,  656,  662,
      662,  662,  656,  656,  656,  663,  656,  656,  664,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  665,
      656,  656,  666,  656,  656,  656,  656,  656,  656,  656,
      656,  667,  656,  656,  668,  656,  668,  668,  668,  668,
      668,  669,  656,  656,  656,  656,  656,  656,  656,  670,
      656,  656,  656,  656,  656,  656,  656,  671,  656,  656,

      656,  656,  671,  656,  672,  656,  656,  673,  656,  656,
      656,  656,  661,  656,  674,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  675,  656,
      656,  656,  656,  662,  662,  656,  662,  662,  663,  656,
      664,  664,  656,  656,  656,  656,  656,  656,  656,  656,
      665,  656,  666,  656,  676,  656,  656,  677,  667,  656,
      668,  668,  668,  668,  668,  668,  668,  669,  656,  656,
      670,  656,  678,  679,  656,  656,  680,  671,  656,  681,
      656,  656,  656,  656,  656,  103,  656,  682,  682,  682,
      682,  682,  683,  661,  661,  674,  656,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  675,  662,  662,  656,  656,  656,  656,  656,
      656,  656,  666,  666,  676,  677,  668,  668,  668,  668,
      668,  668,  670,  670,  678,  679,  656,  684,  682,  682,
      682,  191,  682,  656,  685,  682,  682,  191,  682,  683,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      662,  656,  656,  656,  656,  656,  656,  656,  656,  668,
      668,  668,  668,  668,  668,  656,  656,  686,  656,  682,
      682,  242,  682,  685,  682,  682,  191,  682,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  662,  656,  656,  656,
      656,  656,  656,  656,  668,  668,  668,  668,  668,  656,
      656,  687,  656,  682,  682,  242,  682,  682,  191,  682,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  668,  668,  668,  668,  656,
      656,  688,  656,  682,  242,  682,  682,  191,  682,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  668,  668,  668,  656,  689,  656,  682,  242,  682,
      682,  191,  682,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  668,  668,  668,  656,  690,
      656,  682,  242,  682,  682,  682,  682,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      668,  656,  691,  656,  682,  682,  682,  682,  682,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  682,  682,  682,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  682,  682,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      682,  682,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  682,  682,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  682,  682,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  682,  682,  656,  656,  656,  656,
      656,  656,  656,  656,  682,  682,  656,  656,  656,  656,
      656,  656,  656,  656,  682,  682,  656,  656,  656,  656,

      656,  656,  656,  656,  682,  682,  656,  656,  656,  656,
      656,  656,  682,  682,  656,  656,  656,  656,  656,  682,
      682,  656,  656,  656,  656,  682,  682,  656,  656,  656,
      656,  682,  682,  656,  656,  656,  656,  682,  682,  656,
      656,  656,  656,  682,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,    0,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656

    } ;

static yyconst flex_int16_t yy_nxt[1882] =
    {   0,
       16,   17,   18,   19,   17,   16,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   16,   31,   32,
       32,   32,   33,   34,   16,   35,   16,   36,   37,   38,
       38,   38,   38,   38,   38,   38,   38,   39,   16,   16,
       16,   38,   40,   40,   41,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   42,   40,   40,   40,   40,   43,   44,   45,   16,
       47,   48,   47,   48,   51,   52,   53,   51,   51,   52,
       53,   51,  114,   54,   55,   83,   84,   54,   55,  218,
       49,  487,   49,  111,   61,   62,  111,  129,   63,  488,

       61,   62,   83,   84,   63,  219,   85,  220,  130,  132,
      132,  132,  132,  221,  115,  142,   56,   57,   58,  655,
       56,   57,   58,   85,  132,  132,  132,  132,  654,   64,
       59,   65,  143,  144,   59,   64,  144,   65,   66,   67,
       68,   69,   67,   66,   66,   70,   66,   66,   66,   66,
       66,   66,   66,   71,   66,   66,   72,   72,   72,   72,
       73,   74,   66,   66,   66,   66,   66,   75,   75,   75,
       75,   75,   75,   75,   75,   66,   66,   76,   66,   75,
       77,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   78,   79,   75,   75,   75,   75,   75,   80,

       75,   81,   75,   75,   66,   66,   66,   66,   86,   87,
       88,   89,   87,   86,   90,   86,   86,   91,   92,   93,
       94,   95,   86,   96,   97,   86,   98,   98,   98,   98,
       99,  100,   86,   86,   86,  101,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  104,  105,  106,  107,  103,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,  108,  109,   86,  110,  116,  653,
      117,  135,  135,  135,  135,  135,  135,  135,  135,  149,
      154,  156,  150,  135,  156,  174,  118,  119,  120,  160,

      121,  652,  160,  656,  122,  201,  175,  123,  172,  124,
      202,  125,  651,  126,  127,  128,  159,  159,  159,  159,
      656,  114,  155,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  195,
      173,  159,  159,  159,  159,  176,  176,  176,  176,  111,
      181,  181,  111,  115,  210,  163,  358,  144,  211,  177,
      144,  650,  142,  165,  162,  167,  359,  179,  212,  164,
      154,  196,  205,  166,  181,  181,  181,  181,  189,  656,
      177,  190,  180,  191,  192,  224,  206,  156,  182,  207,
      156,  160,  172,  189,  160,  308,  183,  184,  184,  184,

      184,  234,  155,  180,  190,  132,  132,  132,  132,  309,
      191,  177,  191,  192,  257,  649,  258,  225,  259,  185,
      159,  159,  159,  159,  173,  186,  186,  186,  186,  186,
      186,  186,  186,  235,  180,  260,  647,  186,  135,  135,
      135,  135,  135,  135,  135,  135,  159,  159,  159,  159,
      135,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  176,  176,  176,  176,  114,  227,  176,  176,  176,
      176,  264,  229,  240,  646,  265,  241,  228,  242,  243,
      457,  656,  458,  179,  463,  230,  464,  231,  240,  179,

      333,  333,  181,  181,  181,  181,  114,  115,  232,  241,
      184,  184,  184,  184,  180,  242,  182,  242,  243,  181,
      181,  181,  181,  177,  244,  195,  246,  246,  246,  246,
      656,  177,  185,  182,  247,  247,  247,  645,  115,  177,
      154,  183,  249,  249,  154,  224,  180,  159,  159,  159,
      159,  181,  181,  180,  180,  177,  642,  196,  248,  248,
      248,  248,  180,  159,  159,  159,  159,  373,  373,  248,
      248,  641,  155,  331,  331,  331,  155,  225,  180,  172,
      172,  234,  248,  248,  248,  248,  248,  248,  281,  407,
      407,  280,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  371,  371,
      371,  173,  173,  235,  424,  640,  286,  425,  419,  287,
      282,  288,  289,  371,  371,  371,  656,  636,  284,  293,
      293,  286,  420,  177,  656,  283,  285,  290,  290,  290,
      290,  656,  287,  635,  291,  291,  291,  634,  288,  180,
      288,  289,  441,  441,  656,  177,  180,  180,  295,  295,
      295,  295,  474,  474,  180,  656,  501,  501,  292,  292,
      292,  292,  630,  159,  159,  159,  159,  180,  180,  292,
      292,  177,  524,  524,  296,  296,  296,  177,  540,  540,
      298,  298,  292,  292,  292,  292,  292,  292,  159,  159,

      159,  159,  552,  552,  180,  297,  297,  297,  297,  325,
      180,  159,  159,  159,  159,  629,  297,  297,  159,  159,
      159,  159,  159,  159,  159,  159,  326,  563,  563,  297,
      297,  297,  297,  297,  297,  628,  159,  159,  159,  159,
      330,  330,  330,  330,  656,  574,  574,  334,  334,  334,
      334,  656,  584,  584,  337,  337,  327,  177,  656,  328,
      329,  335,  335,  335,  656,  177,  624,  180,  338,  338,
      338,  338,  177,  623,  180,  296,  296,  296,  594,  594,
      180,  180,  336,  336,  336,  336,  341,  180,  180,  342,
      582,  622,  343,  336,  336,  180,  177,  618,  583,  340,

      340,  159,  159,  159,  159,  617,  336,  336,  336,  336,
      336,  336,  339,  339,  339,  339,  604,  604,  616,  180,
      612,  612,  615,  339,  339,  159,  159,  159,  159,  366,
      159,  159,  159,  159,  619,  619,  339,  339,  339,  339,
      339,  339,  159,  159,  159,  159,  611,  159,  159,  159,
      159,  370,  370,  370,  370,  656,  625,  625,  374,  374,
      374,  374,  631,  631,  656,  610,  367,  335,  335,  335,
      656,  368,  369,  376,  376,  637,  637,  609,  180,  177,
      643,  643,  377,  377,  377,  377,  608,  180,  375,  375,
      375,  375,  607,  180,  159,  159,  159,  159,  603,  375,

      375,  177,  180,  602,  379,  379,  159,  159,  159,  159,
      648,  648,  375,  375,  375,  375,  375,  375,  378,  378,
      378,  378,  601,  600,  180,  159,  159,  159,  159,  378,
      378,  402,  159,  159,  159,  159,  405,  405,  405,  405,
      599,  177,  378,  378,  378,  378,  378,  378,  656,  403,
      598,  408,  408,  408,  408,  656,  656,  177,  410,  410,
      411,  411,  411,  411,  180,  177,  597,  404,  413,  413,
      593,  180,  409,  409,  409,  409,  592,  591,  180,  180,
      180,  590,  332,  409,  409,  332,  589,  588,  180,  159,
      159,  159,  159,  587,  581,  580,  409,  409,  409,  409,

      409,  409,  412,  412,  412,  412,  159,  159,  159,  159,
      579,  578,  577,  412,  412,  159,  159,  159,  159,  439,
      439,  439,  439,  573,  572,  571,  412,  412,  412,  412,
      412,  412,  436,  656,  570,  569,  442,  442,  442,  442,
      568,  656,  567,  438,  444,  444,  372,  437,  177,  372,
      566,  445,  445,  445,  445,  562,  180,  443,  443,  443,
      443,  561,  406,  440,  180,  406,  440,  560,  443,  443,
      177,  180,  559,  447,  447,  159,  159,  159,  159,  558,
      557,  443,  443,  443,  443,  443,  443,  446,  446,  446,
      446,  556,  555,  180,  159,  159,  159,  159,  446,  446,

      159,  159,  159,  159,  472,  472,  472,  472,  551,  550,
      549,  446,  446,  446,  446,  446,  446,  656,  548,  547,
      475,  475,  475,  475,  656,  546,  177,  477,  477,  478,
      478,  478,  478,  177,  545,  473,  479,  479,  473,  544,
      180,  471,  476,  476,  476,  476,  543,  180,  237,  180,
      539,  237,  538,  476,  476,  537,  180,  159,  159,  159,
      159,  500,  500,  500,  500,  536,  476,  476,  476,  476,
      476,  476,  656,  535,  534,  502,  502,  502,  502,  656,
      533,  177,  503,  503,  504,  504,  523,  523,  523,  523,
      656,  532,  531,  525,  525,  180,  177,  530,  529,  526,

      526,  528,  180,  656,  180,  177,  541,  541,  542,  542,
      527,  656,  522,  180,  553,  553,  521,  177,  520,  180,
      554,  554,  519,  518,  517,  516,  180,  656,  180,  177,
      564,  564,  565,  565,  180,  656,  515,  514,  575,  575,
      180,  177,  513,  656,  576,  576,  585,  585,  512,  511,
      180,  177,  180,  656,  586,  586,  595,  595,  180,  177,
      510,  509,  596,  596,  180,  656,  180,  177,  605,  605,
      606,  606,  508,  507,  180,  656,  180,  177,  613,  613,
      614,  614,  180,  656,  506,  505,  620,  620,  180,  177,
      180,  656,  621,  621,  626,  626,  499,  498,  180,  177,

      180,  656,  627,  627,  632,  632,  180,  177,  497,  496,
      633,  633,  180,  656,  180,  177,  638,  638,  639,  639,
      495,  494,  180,  656,  180,  493,  644,  644,  492,  491,
      180,  490,  489,  486,  485,  484,  180,  483,  180,  482,
      481,  480,  470,  469,  468,  467,  180,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,  113,  113,  466,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  134,  465,  462,
      134,  134,  139,  139,  461,  139,  139,  139,  139,  139,
      460,  139,  139,  139,  139,  139,  141,  141,  459,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      151,  151,  456,  151,  151,  455,  151,  151,  151,  151,
      151,  151,  151,  151,  153,  153,  454,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  159,  453,
      452,  159,  159,  161,  451,  450,  161,  161,  168,  168,
      449,  168,  168,  168,  168,  168,  168,  448,  168,  168,

      168,  168,  171,  171,  435,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  178,  178,  178,  434,
      433,  178,  178,  432,  178,  178,  178,  178,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  193,
      431,  430,  429,  193,  193,  194,  194,  428,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  213,
      213,  427,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  223,  223,  426,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  226,  226,  423,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  233,  233,  422,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  236,  236,  421,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  237,
      418,  417,  237,  237,  237,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  416,  415,
      239,  239,  239,  250,  250,  414,  401,  250,  250,  400,
      250,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,

      385,  384,  383,  382,  381,  380,  365,  364,  363,  362,
      361,  360,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      251,  244,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  263,  262,  261,  256,
      255,  254,  253,  252,  251,  656,  245,  238,  222,  217,
      216,  215,  214,  133,  209,  208,  204,  203,  200,  199,
      198,  197,  187,  170,  169,  158,  157,  152,  148,  147,

      146,  145,  140,  138,  137,  136,  133,  131,  112,  656,
       15,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656
    } ;

static yyconst flex_int16_t yy_chk[1882] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    4,    4,    5,    5,    5,    5,    6,    6,
        6,    6,   20,    5,    5,   11,   11,    6,    6,  148,
        3,  457,    4,   17,    7,    7,   17,   29,    7,  457,

        8,    8,   12,   12,    8,  148,   11,  149,   29,   31,
       31,   31,   31,  149,   20,   49,    5,    5,    5,  654,
        6,    6,    6,   12,   32,   32,   32,   32,  653,    7,
        5,    7,   49,   51,    6,    8,   51,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   22,  652,
       22,   38,   38,   38,   38,   38,   38,   38,   38,   59,
       63,   67,   59,   38,   67,   96,   22,   22,   22,   73,

       22,  651,   73,  141,   22,  122,   96,   22,   90,   22,
      122,   22,  650,   22,   22,   22,   75,   75,   75,   75,
      141,  113,   63,   77,   77,   77,   77,   78,   78,   78,
       78,   79,   79,   79,   79,   80,   80,   80,   80,  115,
       90,   81,   81,   81,   81,   98,   98,   98,   98,  111,
      245,  245,  111,  113,  128,   78,  318,  144,  128,   98,
      144,  646,  142,   80,   77,   81,  318,   98,  128,   79,
      153,  115,  125,   80,  100,  100,  100,  100,  105,  142,
      188,  105,   98,  105,  105,  155,  125,  156,  100,  125,
      156,  160,  171,  105,  160,  262,  100,  103,  103,  103,

      103,  173,  153,  188,  105,  132,  132,  132,  132,  262,
      105,  103,  105,  105,  202,  645,  202,  155,  203,  103,
      161,  161,  161,  161,  171,  103,  103,  103,  103,  103,
      103,  103,  103,  173,  103,  203,  642,  103,  135,  135,
      135,  135,  135,  135,  135,  135,  162,  162,  162,  162,
      135,  163,  163,  163,  163,  164,  164,  164,  164,  165,
      165,  165,  165,  166,  166,  166,  166,  167,  167,  167,
      167,  176,  176,  176,  176,  194,  162,  178,  178,  178,
      178,  207,  164,  180,  641,  207,  180,  163,  180,  180,
      424,  178,  424,  176,  429,  165,  429,  166,  180,  178,

      289,  289,  181,  181,  181,  181,  195,  194,  167,  180,
      184,  184,  184,  184,  178,  180,  181,  180,  180,  183,
      183,  183,  183,  189,  181,  196,  189,  189,  189,  189,
      239,  190,  184,  183,  190,  190,  190,  640,  195,  192,
      223,  183,  192,  192,  224,  225,  189,  227,  227,  227,
      227,  294,  294,  239,  190,  191,  636,  196,  191,  191,
      191,  191,  192,  228,  228,  228,  228,  333,  333,  191,
      191,  635,  223,  287,  287,  287,  224,  225,  191,  233,
      234,  235,  191,  191,  191,  191,  191,  191,  228,  373,
      373,  227,  229,  229,  229,  229,  230,  230,  230,  230,

      231,  231,  231,  231,  232,  232,  232,  232,  331,  331,
      331,  233,  234,  235,  390,  634,  238,  390,  385,  238,
      229,  238,  238,  371,  371,  371,  243,  630,  231,  243,
      243,  238,  385,  446,  240,  230,  232,  240,  240,  240,
      240,  241,  238,  629,  241,  241,  241,  628,  238,  243,
      238,  238,  407,  407,  476,  246,  446,  240,  246,  246,
      246,  246,  441,  441,  241,  242,  474,  474,  242,  242,
      242,  242,  624,  280,  280,  280,  280,  476,  246,  242,
      242,  247,  501,  501,  247,  247,  247,  249,  524,  524,
      249,  249,  242,  242,  242,  242,  242,  242,  281,  281,

      281,  281,  540,  540,  247,  248,  248,  248,  248,  280,
      249,  282,  282,  282,  282,  623,  248,  248,  283,  283,
      283,  283,  284,  284,  284,  284,  281,  552,  552,  248,
      248,  248,  248,  248,  248,  622,  285,  285,  285,  285,
      286,  286,  286,  286,  290,  563,  563,  290,  290,  290,
      290,  293,  574,  574,  293,  293,  283,  478,  291,  284,
      285,  291,  291,  291,  502,  295,  618,  290,  295,  295,
      295,  295,  296,  617,  293,  296,  296,  296,  584,  584,
      478,  291,  292,  292,  292,  292,  299,  502,  295,  299,
      573,  616,  299,  292,  292,  296,  298,  611,  573,  298,

      298,  325,  325,  325,  325,  610,  292,  292,  292,  292,
      292,  292,  297,  297,  297,  297,  594,  594,  609,  298,
      604,  604,  607,  297,  297,  326,  326,  326,  326,  325,
      327,  327,  327,  327,  612,  612,  297,  297,  297,  297,
      297,  297,  328,  328,  328,  328,  603,  329,  329,  329,
      329,  330,  330,  330,  330,  334,  619,  619,  334,  334,
      334,  334,  625,  625,  335,  601,  326,  335,  335,  335,
      337,  327,  329,  337,  337,  631,  631,  600,  334,  338,
      637,  637,  338,  338,  338,  338,  599,  335,  336,  336,
      336,  336,  598,  337,  366,  366,  366,  366,  593,  336,

      336,  340,  338,  592,  340,  340,  367,  367,  367,  367,
      643,  643,  336,  336,  336,  336,  336,  336,  339,  339,
      339,  339,  591,  590,  340,  368,  368,  368,  368,  339,
      339,  366,  369,  369,  369,  369,  370,  370,  370,  370,
      589,  639,  339,  339,  339,  339,  339,  339,  374,  368,
      588,  374,  374,  374,  374,  376,  644,  377,  376,  376,
      377,  377,  377,  377,  639,  379,  587,  369,  379,  379,
      583,  374,  375,  375,  375,  375,  582,  581,  376,  644,
      377,  580,  686,  375,  375,  686,  579,  578,  379,  402,
      402,  402,  402,  577,  572,  570,  375,  375,  375,  375,

      375,  375,  378,  378,  378,  378,  403,  403,  403,  403,
      569,  567,  566,  378,  378,  404,  404,  404,  404,  405,
      405,  405,  405,  562,  561,  560,  378,  378,  378,  378,
      378,  378,  402,  408,  559,  558,  408,  408,  408,  408,
      557,  410,  556,  404,  410,  410,  687,  403,  411,  687,
      555,  411,  411,  411,  411,  551,  408,  409,  409,  409,
      409,  550,  688,  689,  410,  688,  689,  549,  409,  409,
      413,  411,  548,  413,  413,  436,  436,  436,  436,  547,
      545,  409,  409,  409,  409,  409,  409,  412,  412,  412,
      412,  544,  543,  413,  437,  437,  437,  437,  412,  412,

      438,  438,  438,  438,  439,  439,  439,  439,  538,  537,
      535,  412,  412,  412,  412,  412,  412,  442,  533,  532,
      442,  442,  442,  442,  444,  530,  445,  444,  444,  445,
      445,  445,  445,  447,  529,  690,  447,  447,  690,  528,
      442,  437,  443,  443,  443,  443,  527,  444,  691,  445,
      520,  691,  518,  443,  443,  517,  447,  471,  471,  471,
      471,  472,  472,  472,  472,  516,  443,  443,  443,  443,
      443,  443,  475,  515,  514,  475,  475,  475,  475,  477,
      513,  479,  477,  477,  479,  479,  500,  500,  500,  500,
      503,  512,  511,  503,  503,  475,  504,  509,  508,  504,

      504,  507,  477,  525,  479,  526,  525,  525,  526,  526,
      505,  541,  498,  503,  541,  541,  497,  542,  496,  504,
      542,  542,  495,  494,  493,  492,  525,  553,  526,  554,
      553,  553,  554,  554,  541,  564,  491,  490,  564,  564,
      542,  565,  489,  575,  565,  565,  575,  575,  488,  487,
      553,  576,  554,  585,  576,  576,  585,  585,  564,  586,
      485,  484,  586,  586,  565,  595,  575,  596,  595,  595,
      596,  596,  483,  482,  576,  605,  585,  606,  605,  605,
      606,  606,  586,  613,  481,  480,  613,  613,  595,  614,
      596,  620,  614,  614,  620,  620,  469,  468,  605,  621,

      606,  626,  621,  621,  626,  626,  613,  627,  467,  466,
      627,  627,  614,  632,  620,  633,  632,  632,  633,  633,
      465,  464,  621,  638,  626,  463,  638,  638,  462,  461,
      627,  459,  458,  456,  455,  454,  632,  453,  633,  452,
      450,  449,  435,  434,  433,  432,  638,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  661,  661,  431,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  662,  430,  428,
      662,  662,  663,  663,  427,  663,  663,  663,  663,  663,
      426,  663,  663,  663,  663,  663,  664,  664,  425,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      665,  665,  423,  665,  665,  422,  665,  665,  665,  665,
      665,  665,  665,  665,  666,  666,  420,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  667,  419,
      418,  667,  667,  668,  417,  416,  668,  668,  669,  669,
      415,  669,  669,  669,  669,  669,  669,  414,  669,  669,

      669,  669,  670,  670,  401,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  671,  671,  671,  399,
      398,  671,  671,  397,  671,  671,  671,  671,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  673,
      396,  395,  394,  673,  673,  674,  674,  393,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  392,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  676,  676,  391,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  677,  677,  389,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,

      677,  678,  678,  388,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  679,  679,  387,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  680,
      384,  383,  680,  680,  680,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  682,  682,  382,  381,
      682,  682,  682,  683,  683,  380,  364,  683,  683,  363,
      683,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  362,  361,  360,  359,
      358,  357,  356,  355,  353,  352,  350,  349,  348,  347,

      346,  345,  344,  343,  342,  341,  324,  323,  322,  321,
      320,  319,  316,  314,  313,  312,  311,  309,  308,  307,
      306,  304,  303,  302,  301,  300,  279,  278,  277,  276,
      275,  274,  272,  271,  270,  269,  268,  267,  266,  265,
      263,  261,  260,  259,  258,  257,  256,  255,  254,  252,
      250,  244,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  212,  211,  210,  209,  208,  206,  205,  204,  201,
      200,  199,  198,  197,  193,  186,  182,  177,  150,  147,
      146,  138,  137,  133,  127,  126,  124,  123,  121,  120,
      119,  118,  104,   89,   84,   71,   69,   62,   58,   57,

       56,   53,   48,   42,   41,   39,   34,   30,   19,   15,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
#line 2 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* This file is part of kdev-pg-qt
   Copyright (C) 2006 Jakob Petsovits <jpetso@gmx.at>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.
*/

#include <QtCore/QDebug>
// #include <iostream>
// #include <cstdio>
#include "kdev-pg.h"
#include "kdev-pg-parser.hh"

#include <QtCore/QFile>
#include <QtCore/QFileInfo>
#include <QtCore/QTextStream>

int inp();
void appendLineBuffer();
void newline();
void yyerror(const char* );
extern int yyLine;
extern int currentOffset;

namespace KDevPG
{
  extern QFile file;
  extern QFileInfo fileInfo;
  extern QTextStream checkOut;
}

#define YY_INPUT(buf, result, max_size) \
  { \
    char c = inp(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
  }

#define YY_USER_ACTION  appendLineBuffer();

#define COPY_TO_YYLVAL(string, len) \
    yylval.str = (char*) calloc(len+1, sizeof(char)); \
    strncpy(yylval.str, string, len); \
    yylval.str[len] = '\0';
#define COPY_CODE_TO_YYLVAL(string, len) \
    if(KDevPG::globalSystem.beautifulCode) \
    { \
      COPY_TO_YYLVAL(string, len) \
    } \
    else \
    { \
      QByteArray tmp("\n\01!ASIgnore\"!!\n# "); \
      tmp += QString::number(firstCodeLine).toLocal8Bit(); \
      tmp += " \"" + KDevPG::fileInfo.absoluteFilePath().toLocal8Bit() + "\" 1\n"; \
      size_t memlen = tmp.size() + firstCodeColumn + len + 16 + 1; \
      yylval.str = (char*) calloc(memlen, sizeof(char)); \
      strncpy(yylval.str, tmp.data(), tmp.size()); \
      memset(yylval.str + tmp.size(), ' ', firstCodeColumn); \
      strncpy(yylval.str + tmp.size() + firstCodeColumn, yytext, len); \
      strncpy(yylval.str + memlen - 17, "\n\01!AS/Ignore\"!!\n", 16); \
      yylval.str[memlen-1] = '\0'; \
    }

#define ESCAPE_CHARACTER(chr) \
        yylval.str = (char*) calloc(2, sizeof(char)); yylval.str[0] = chr; yylval.str[1] = '\0'; return T_STRING;

namespace {
  enum RulePosition {
    RuleBody,
    RuleFooter,
    RuleLexer
  };
  RulePosition rulePosition = RuleBody;
  int openBrackets; // for rule arguments and regexp usage
  int firstCodeLine; // where the current code-block begins
  int firstCodeColumn;
}







#line 1263 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#define INITIAL 0
#define CODE 1
#define PARSERCLASS 2
#define RULE_ARGUMENTS 3
#define RULE_PARAMETERS_HEADER 4
#define RULE_PARAMETERS_VARNAME 5
#define RULE_LEXER 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 105 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"



#line 1455 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 657 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1811 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 108 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 109 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 112 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; return ';';
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 113 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
if(rulePosition == RuleLexer) BEGIN(RULE_LEXER); else rulePosition = RuleFooter; return T_ARROW;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_INLINE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 116 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '(';
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ')';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '{';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '}';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ',';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 121 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '0';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '#';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '.';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ':';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '=';
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 126 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '+';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 127 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '*';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '?';
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '@';
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '|';
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '&';
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TRY_RECOVER;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 134 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TRY_ROLLBACK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CATCH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_EXPORT_MACRO;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_EXPORT_MACRO_HEADER;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_DECLARATION;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_DECLARATION;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_NAMESPACE_DECLARATION;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(PARSERCLASS); return T_PARSERCLASS_DECLARATION;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(PARSERCLASS); return T_LEXERCLASS_DECLARATION;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_INPUT_STREAM;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_DECLARATION;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_DECLARATION_HEADER;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_BITS_HEADER;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_HEADER;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 149 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_DECLARATION_HEADER;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_BITS_HEADER;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_INPUT_ENCODING;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 152 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TABLE_LEXER;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 153 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_SEQUENCE_LEXER;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 154 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_BASE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 155 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_BASE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 156 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_BASE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 157 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_BIN;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 158 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 159 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_POST;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TERN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PAREN;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRIORITY;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; return T_LOPR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleFooter; return T_ROPR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 165 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_LEFT_ASSOC;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 166 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_RIGHT_ASSOC;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 167 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_IS_LEFT_ASSOC;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 168 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_IS_RIGHT_ASSOC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 169 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleLexer; return T_LEXER;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 170 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CONTINUE;
	YY_BREAK

case 60:
YY_RULE_SETUP
#line 173 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 174 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 175 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '(';
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 176 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PUBLIC;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 177 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRIVATE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PROTECTED;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_DECLARATION;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CONSTRUCTOR;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 181 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_DESTRUCTOR;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 182 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_BITS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); return ')';
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 184 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK

case 72:
YY_RULE_SETUP
#line 188 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    if (rulePosition == RuleBody) { /* use the arguments in a rule call */
      firstCodeLine = yyLine;
      openBrackets = 0;
      BEGIN(RULE_ARGUMENTS);
    }
    else if (rulePosition == RuleFooter) { /* declare the arguments */
      BEGIN(RULE_PARAMETERS_HEADER); return '[';
    }
}
	YY_BREAK

case 73:
YY_RULE_SETUP
#line 200 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 201 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 202 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
++yytext; COPY_TO_YYLVAL(yytext,yyleng-2); return T_NAMED_REGEXP;
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 203 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; BEGIN(INITIAL); return ';';
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 204 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 205 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 206 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
++openBrackets; return '[';
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 207 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
--openBrackets; return ']';
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 208 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
++openBrackets; return '(';
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 209 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
--openBrackets; return ')';
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 210 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '?';
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 211 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '|';
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 212 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '^';
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 213 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_RANGE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 214 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '&';
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 215 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '~';
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 216 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '*';
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 217 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '+';
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 218 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '@';
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 219 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '.';
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 220 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_ARROW;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 221 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
firstCodeLine = yyLine; firstCodeColumn = currentOffset + 2; BEGIN(CODE);
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 222 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_TERMINAL;
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 223 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 224 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_UNQUOTED_STRING;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 225 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 226 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yytext++; COPY_TO_YYLVAL(yytext,yyleng-2); return T_STRING;
	YY_BREAK
case YY_STATE_EOF(RULE_LEXER):
#line 228 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    BEGIN(INITIAL); // is not set automatically by yyrestart()
    KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule lexer definition..." << endl;
    yyerror("");
    return 0;
  }
	YY_BREAK


case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 237 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 238 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* this and... */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 239 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* ...this prevent brackets inside strings to be counted */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 240 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a bracket, and append what comes next */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 241 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
openBrackets++; yymore();
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 242 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      openBrackets--;
      if (openBrackets < 0) {
        COPY_CODE_TO_YYLVAL(yytext,(yyleng-1)); /* cut off the trailing bracket */
        BEGIN(INITIAL);
        return T_RULE_ARGUMENTS;
      }
  }
	YY_BREAK
case YY_STATE_EOF(RULE_ARGUMENTS):
#line 250 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      BEGIN(INITIAL); // is not set automatically by yyrestart()
      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule argument specification..." << endl;
      yyerror("");
      return 0;
  }
	YY_BREAK


case 106:
YY_RULE_SETUP
#line 259 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 260 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 261 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 262 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(RULE_PARAMETERS_VARNAME); return ':';
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 263 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '#';
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 264 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_MEMBER;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 265 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TEMPORARY;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 266 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_ARGUMENT;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 267 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_NODE;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 268 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 269 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_VARIABLE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 270 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';  /* only used for "token" types */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 271 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 272 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); return ']';
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 273 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK


case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 277 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 278 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a semicolon, and append what comes next */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 279 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      // strip trailing whitespace
      int length = yyleng-1; // and first, the trailing semicolon
      for (int i = length-1; i < 1; i--) {
        switch(yytext[i-1])
        {
          case ' ':
          case '\f':
          case '\t':
            continue;
          default:
            length = i;
            break;
        }
      }
      COPY_TO_YYLVAL(yytext,length);
      BEGIN(RULE_PARAMETERS_HEADER);
      return T_IDENTIFIER;
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 298 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK

case 125:
YY_RULE_SETUP
#line 302 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
firstCodeLine = yyLine; firstCodeColumn = currentOffset + 2; BEGIN(CODE);
	YY_BREAK

case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 304 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 305 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a colon, and append what comes next */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 306 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* also gather colons that are not followed by colons or newlines */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 307 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      COPY_CODE_TO_YYLVAL(yytext, (yyleng-2)); /* cut off the trailing stuff */
      if(rulePosition == RuleLexer)
        BEGIN(RULE_LEXER);
      else
        BEGIN(INITIAL);
      return T_CODE;
  }
	YY_BREAK
case YY_STATE_EOF(CODE):
#line 315 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      BEGIN(INITIAL); // is not set automatically by yyrestart()
      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed code segment..." << endl;
      yyerror("");
      return 0;
  }
	YY_BREAK

case 130:
YY_RULE_SETUP
#line 324 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_TERMINAL;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 325 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 326 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_NUMBER;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 329 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
   yytext++;                         /* start inside the quotes */
   COPY_TO_YYLVAL(yytext,yyleng-2);  /* cut off the trailing quote */
   return T_STRING;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 335 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
  KDevPG::checkOut << "Unexpected character: ``" << yytext[0] << "''" << endl;
  yyerror("");
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 341 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
ECHO;
	YY_BREAK
#line 2348 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(PARSERCLASS):
			case YY_STATE_EOF(RULE_PARAMETERS_HEADER):
			case YY_STATE_EOF(RULE_PARAMETERS_VARNAME):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 657 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 657 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 656);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 341 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"



int ch;
int yyLine = 1, currentOffset = 0;
bool endOfLine = false;
char yyTextLine[256 * 1024];

int inp()
{
  if( KDevPG::file.atEnd() )
    return EOF;
  KDevPG::file.getChar( (char*)&ch );
  return ch;
}

void newline()
{
  yyLine++;
  endOfLine = true;
}

/* initialize the line buffer */
void clearLineBuffer()
{
  yyTextLine[0] = '\0';
  currentOffset = 0;
  endOfLine = false;
}

 /* add the current token to the current line */
void appendLineBuffer()
{
  if (endOfLine == true)
    clearLineBuffer();

  currentOffset = strlen(yyTextLine); /* start of current */
  strcpy(yyTextLine+currentOffset, yytext); /* append current */
  /* strcpy is faster than strcat */
}

void yyerror(const char* msg )
{
  Q_UNUSED(msg);
  KDevPG::checkOut << "** LEXICAL ERROR at line " << yyLine << " column " << currentOffset << endl;

  char *current_end = yyTextLine + strlen(yyTextLine);
  char *p;

  /* get the rest of the line if we are not already at the end */
  if(!endOfLine)
    {
      p = current_end;
      int c = ch;

      while(c != EOF && c != '\n')
        {
          *p++ = c;
          c = inp();
        }

      *p++ = '\n';
      *p = 0;
    }

  /* yyTextLine[] now has the whole line, with the current token */
  /* at currentOffset */

  /* print error message and current line */
  KDevPG::checkOut << yyTextLine;

  /* print a ^ under the most recent token */
  KDevPG::checkOut << QString(currentOffset, ' ').append('^') << endl; /* currentOffset spaces, then ^ */

  exit(EXIT_FAILURE);
}

int yywrap() { return 1; }


