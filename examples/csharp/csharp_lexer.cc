
#line 3 "csharp_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1202] =
    {   0,
        0,    0,    5,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  182,  182,  200,  198,
        1,    2,    2,   22,  198,   50,   44,  198,    9,   10,
       40,   36,   15,   38,   17,   42,  196,  196,   18,   16,
       25,   35,   27,   20,  198,  195,   13,   14,   48,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,   11,   46,
       12,   23,  198,  198,  198,  198,  198,  198,  198,  198,
        1,  198,    5,    7,    7,    6,  165,  162,  164,  164,
      165,  169,  162,  168,  168,  169,  169,  167,  167,  167,

      169,  169,  169,  169,  169,  169,  169,  169,  181,  162,
      180,  180,  174,  181,  177,  178,  181,  181,  181,  179,
      179,  179,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  190,  162,  185,  185,  190,  190,  186,  190,  189,
      189,  190,  190,  190,  190,  190,  190,  190,  190,  191,
      192,  192,  193,  194,  194,  182,  184,  184,  183,  182,
      183,    1,    2,   29,    0,  147,  146,    0,    0,    0,
        0,    0,    0,    0,   51,   30,   45,    0,  145,    0,
        0,    0,    0,    0,    0,    0,   41,   33,   37,   34,
       39,   32,  197,    4,    3,   43,    0,  196,  197,    0,

      196,  196,    0,   19,   52,   26,   24,   28,   54,   21,
        0,  195,    0,    0,    0,    0,    0,    0,    0,    0,
      195,    0,    0,    0,    0,    0,    0,    0,    0,   49,
      195,  195,  195,   57,  195,  195,  195,  195,  195,  195,
      195,  195,  195,   72,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,   86,  195,   88,   92,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,   47,
       31,  195,  195,    0,    0,    0,    0,    0,    0,    0,

        0,    1,    0,    0,    0,  161,  161,  161,  161,  161,
      161,  161,  161,  161,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    7,    6,    6,    8,  162,  164,  164,
        0,  163,  162,  168,  168,    0,  163,  167,    0,    0,
        0,    0,    0,    0,    0,    0,  167,    0,    0,    0,
        0,    0,    0,    0,    0,  167,  167,  167,  167,    0,
        0,    0,    0,    0,    0,    0,    0,  162,  180,  180,
        0,  171,  172,  163,  170,  179,    0,    0,    0,    0,
        0,    0,    0,    0,  179,    0,    0,    0,    0,    0,
        0,    0,    0,  179,  179,  173,  179,  179,    0,    0,

        0,    0,    0,    0,    0,    0,  162,  185,  185,    0,
        0,  163,  186,  189,    0,    0,    0,    0,    0,    0,
        0,    0,  189,    0,    0,    0,    0,    0,    0,    0,
        0,  189,  189,  189,    0,    0,    0,    0,    0,    0,
        0,    0,  191,  192,  193,  194,  182,  184,  182,    0,
        0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  197,    0,    3,  197,    0,  197,  196,  196,
      196,   53,   55,    0,  148,  195,    0,    0,    0,    0,
        0,    0,    0,    0,  195,    0,    0,    0,    0,    0,

        0,    0,    0,  195,    0,    0,    0,    0,    0,    0,
        0,    0,  195,  133,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,   83,
      135,  195,  195,  195,   89,  195,  195,  195,   96,  195,
      195,  195,  100,  195,  195,  195,  195,  195,  195,  107,
      195,  195,  195,  195,  139,  195,  195,  195,  195,  195,
      195,  195,  195,  121,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      161,    0,    0,    0,    0,    0,    0,    0,    0,  161,

        0,    0,    0,    0,    0,    0,    0,    0,  161,  161,
      161,  161,  151,  161,  161,  161,  161,  161,  161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  163,    0,
      163,  167,    0,    0,    0,    0,    0,    0,    0,    0,
      167,    0,    0,    0,    0,    0,    0,    0,    0,  167,
        0,    0,    0,    0,    0,    0,    0,    0,  167,  167,
      167,  167,    0,  163,  179,    0,    0,    0,    0,    0,
        0,    0,    0,  179,    0,    0,    0,    0,    0,    0,
        0,    0,  179,    0,    0,    0,    0,    0,    0,    0,
        0,  179,  179,  179,  179,    0,  187,  163,  189,    0,

        0,    0,    0,    0,    0,    0,    0,  189,    0,    0,
        0,    0,    0,    0,    0,    0,  189,    0,    0,    0,
        0,    0,    0,    0,    0,  189,  189,  189,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      197,  197,    0,  197,  196,  196,  195,    0,    0,    0,
        0,    0,    0,    0,    0,  195,  195,  195,  195,  195,
      195,  195,   58,   59,  195,   61,   62,  195,   64,  195,
      195,  195,  195,  195,  195,  195,  195,   74,   75,  195,
      195,  195,  195,  195,  195,  195,  195,  195,   85,  195,

      195,   93,   94,  195,   97,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  118,  195,  120,  195,  123,
      195,  195,  195,  195,  195,  195,  195,  130,  195,  195,
      195,  195,  161,    0,    0,    0,    0,    0,    0,    0,
        0,  161,    0,    0,    0,    0,    0,    0,    0,    0,
      161,    0,    0,    0,    0,    0,    0,    0,    0,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,    0,    0,  167,    0,    0,    0,    0,    0,    0,
        0,    0,  167,  167,  167,  167,  167,  166,    0,  179,

        0,    0,    0,    0,    0,    0,    0,    0,  179,  179,
      179,  179,  179,  175,    0,  189,    0,    0,    0,    0,
        0,    0,    0,    0,  189,  189,  189,  189,  189,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  197,  196,  196,  195,
      195,  195,  134,  195,   60,   63,  195,   66,   67,  195,
      195,  195,  195,  195,   76,  195,  195,   79,  195,   81,
       82,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  109,  195,  111,
      195,  195,  195,  195,  195,  195,  119,  195,  124,  195,

      195,  195,  128,  140,  195,  195,  141,  132,  142,  161,
        0,    0,    0,    0,    0,    0,    0,    0,  161,  161,
      161,  161,  161,  152,  153,  161,  161,  161,  155,  161,
      161,  161,  161,  167,  167,  179,  179,  176,  189,  189,
      189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  195,  195,  195,  195,  195,  195,
      195,   73,  195,   78,  195,  195,  136,  195,  195,  195,
      195,   98,  195,  195,  102,  195,  195,  195,  105,  195,
      138,  108,  110,  112,  195,  114,  115,  116,  117,  122,
      195,  126,  127,  195,  195,  161,  161,  161,  154,  161,

      156,  161,  161,  150,  161,  189,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  195,  195,
       65,  195,   69,   70,  195,  195,   80,   84,  195,  195,
      195,  195,  195,  195,  137,  103,  195,  195,  195,  195,
      129,  195,  149,  161,  156,  160,  158,  161,  188,    0,
        0,    0,    0,    0,    0,    0,    0,   56,  143,   68,
       71,   77,   87,  195,   91,  195,   99,  101,  195,  106,
      195,  195,  131,  161,  160,  158,  157,    0,    0,    0,
        0,    0,    0,   90,   95,  104,  195,  125,  161,  157,
        0,    0,    0,    0,  113,  159,    0,    0,  159,    0,

        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   29,   30,   31,
       32,   32,   32,   32,   32,   33,   34,   32,   32,   32,
       32,   32,   32,   32,   35,   32,   32,   36,   32,   32,
       37,   38,   39,   40,   32,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   32,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,    1,   70,   71,   71,
       71,   71,   71,   72,   70,   70,   70,   70,   70,   73,
       73,   70,   70,   74,   74,   74,   74,   74,   74,   74,
       75,   76,   76,   76,   76,   76,   76,   76,   76,   77,
       77,   77,   77,   78,   78,   78,   78,   78,   78,   78,
       78,   77,   77,   79,   79,   79,   79,   79,   79,   80,
       81,   81,   82,   83,   83,   83,   83,   83,   83,   83,
       83,    1,    1,   84,   85,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   87,   88,   89,   90,   91,   92,   92,
       92,   92,   92,   89,   89,   89,   89,   89,   93,   94,
       95,   95,   95,   96,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[97] =
    {   0,
        1,    1,    2,    2,    1,    3,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    6,    7,    7,
        1,    1,    1,    1,    1,    1,    1,    8,    8,    8,
        8,    9,    8,    9,    8,    9,    1,    1,    1,    1,
        8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
        9,    8,    9,    9,    9,    9,    9,    9,    9,    8,
        9,    9,    9,    9,    9,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,    9,    9,    9,    1,    9,
        9,    9,    9,    1,    1,    1

    } ;

static yyconst flex_int16_t yy_base[1298] =
    {   0,
        0,   95,   95,   97,  101,  109,  127,    0,  223,    0,
      319,    0,  103,  111,  113,  117,  119,  414, 7410, 8384,
     7407, 8384, 7404, 7382,  419, 7381,  100,  513, 8384, 8384,
     7380,  405, 8384,  408,  407,  417,  593,  384, 7382, 8384,
      413, 7378,  414, 7371,  434,  358, 8384, 8384, 7372,  443,
      411,  436,  495,  418,  500,  512,  519,  524,  573,  599,
      606,  536,  623,  632,  649,  653,  662,  673, 8384,  404,
     8384, 8384,  656,  670,  677,  691,  704, 7312,  715, 7316,
      452,  797,    0, 8384, 7390,  443, 8384,  617, 8384, 7389,
     7373, 8384,  798, 8384, 7379, 7363,  499,  718,  778,  401,

      821,  835,  795,  849,  862, 7296,  873, 7300, 8384,  818,
     8384, 7374, 7352, 7366, 8384, 8384, 7356, 7345,  872,  881,
      920,  426, 7301,  905,  919,  937,  951,  964, 7284,  975,
     7288, 8384, 1057, 8384, 7362,    0, 7346,  445,  977,  986,
     1021, 1010, 1045, 1017, 1059, 1072, 7280, 1083, 7270,    0,
     8384, 7344,    0, 8384, 7343,    0, 8384, 7338, 8384,  490,
        0, 7338, 8384, 8384, 1164, 8384, 8384, 1258, 1319, 1101,
     1115, 1133, 1147, 1161, 8384, 8384, 8384, 1413, 8384, 1507,
     1568, 1208, 1256, 1270, 1288, 1302, 8384, 8384, 8384, 8384,
     8384, 8384, 1399, 8384,    0, 8384,  454, 1648, 8384,  798,

      458,  510, 1418, 8384, 7311, 8384, 8384, 8384, 7308, 8384,
     7325, 1380, 1404, 1457, 1192, 1509, 1522, 7247, 1537, 7251,
     1403, 1551, 1639, 1228, 1653, 1666, 7231, 1677, 7235, 8384,
     1703,  438,  440, 7254, 7249,  376,  441,  487,  501,  591,
      603,  576,  666,  442, 7248,  535,  538, 1045,  480,  615,
      628,  517,  629,  658,  641, 7243,  584,  776, 7240, 1377,
      558,  661,  755,  604,  634,  821, 1047,  946, 1243, 1205,
     1381, 1239, 1383, 1258,   60, 1500, 1218, 1463, 1458, 1143,
     1266, 1395,  838, 1466, 1374, 1188, 1494, 1502, 1411, 8384,
     8384, 7239, 7238, 1692, 1727, 1503, 1741, 1755, 1706, 1769,

     1783, 1548,    0,    0, 1782, 1791, 1826, 1645, 1220, 1376,
     1257, 7250, 1509, 1413, 1815, 1850, 1592, 1864, 1828, 7197,
     1878, 7201,    0, 8384,    0, 1667, 8384, 1685, 8384, 7275,
     7255, 1291, 1960, 8384, 7269, 7249, 1351, 1880, 1909, 1923,
     1930, 1944, 1957, 7181, 1968, 7185, 1967, 1991, 2005, 2012,
     2026, 2039, 7179, 2050, 7183, 2082,  763, 7194, 7193, 2065,
     2079, 1634, 2106, 2120, 2134, 2143, 2157, 1973, 8384, 7241,
     7221, 8384, 8384, 1383, 8384, 2156, 2180, 2194, 2201, 2215,
     2228, 7155, 2239, 7155, 2238, 2262, 2276, 2283, 2297, 2310,
     7147, 2321, 7151, 2353, 1050, 8384, 7176, 7175, 2336, 2350,

     2093, 2377, 2391, 2405, 2414, 2428, 2510, 8384, 7209, 7193,
     7204, 1600, 1616, 2430, 2459, 2473, 2480, 2494, 2507, 7122,
     2518, 7126, 2517, 2541, 2555, 2562, 2576, 2589, 7116, 2600,
     7118, 2638, 7149, 7148, 2615, 2629, 2364, 2662, 2676, 2643,
     2690, 2704,    0, 8384,    0, 8384,    0, 8384, 1684, 2785,
     2879, 2973, 2773, 2801, 3067, 3161, 3255, 8384, 2849, 3349,
     2848, 2862, 2876, 2950, 2964, 3436, 3501, 2820, 3055, 3083,
     3060, 3098, 8384, 2780,    0, 3163, 1676, 3167, 8384, 8384,
     2773, 8384, 8384, 7187, 7178, 2895, 3190, 3204, 2819, 3224,
     3150, 7100, 3238, 7103, 2963, 3252, 3290, 2454, 3318, 3332,

     3045, 3377, 3391, 3289, 3405, 3419, 2739, 3478, 3515, 3463,
     3529, 3543, 3568, 7121,  611, 1639, 2768,  928, 1503, 2777,
     2779, 2798, 1398, 2845, 1727, 1851, 1510, 1856, 2848,  679,
     2939, 1433, 1733, 1574, 2946, 2739, 2846, 2949, 2919, 2950,
     7120,  844, 1464, 2014, 2951, 2775, 1518, 2954, 7119, 2203,
     3031, 2748, 7118, 2778, 2948, 2795, 7117, 2285, 1925, 7112,
     2856, 2799, 7111, 2482, 7110, 2835, 3032, 2947, 3029, 7109,
     2855, 3049, 3035, 7108, 3036, 7107, 2668, 3136, 3051, 3089,
     2736, 2902, 7106, 2953, 3144, 3050, 2564, 2808, 7090, 7089,
     3477, 3558, 3592, 3445, 3606, 3571, 7060, 3620, 7064, 3619,

     3643, 3657, 3664, 3678, 3691, 7054, 3702, 7056, 3740, 3142,
     3101, 3158, 7087, 3033, 3164, 3103, 3168, 3160, 7086, 3717,
     3731, 3218, 3764, 3778, 3745, 3792, 3806, 3186, 3215, 3333,
     3351, 3805, 3829, 3843, 3850, 3864, 3877, 7048, 3888, 7037,
     3887, 3911, 3925, 3313, 3939, 3953, 3967, 3976, 3990, 3989,
     4013, 4027, 4041, 4045, 4059, 4073, 4082, 4096, 4122, 4136,
     7056, 7055, 3353, 3413, 4097, 4146, 4160, 4118, 4174, 4187,
     7022, 4198, 7026, 4197, 4221, 4235, 4132, 4249, 4263, 4277,
     4286, 4300, 4299, 4323, 4337, 4351, 4355, 4369, 4383, 4392,
     4406, 4432, 4148, 7045, 7044, 3500, 8384, 4188, 4406, 4430,

     4456, 4463, 4477, 4490, 7018, 4501, 7022, 4500, 4524, 4538,
     4552, 4556, 4570, 4584, 4593, 4607, 4606, 4630, 4644, 4658,
     4662, 4676, 4690, 4699, 4713, 4756, 7058, 7052, 4810, 4871,
     4728, 4808, 4822, 4840, 4854, 4949, 4955, 5030, 5124, 5218,
     5312, 5036, 5064, 5112, 5390, 5140, 5146, 5216, 4932, 4495,
     5219, 8384, 4802, 8384, 4151, 3600, 4740, 5203, 5217, 4764,
     5289, 5303, 4967, 5367, 5404, 5011, 5059, 5233, 5302, 5366,
     4766, 4459, 7035, 7031, 4802, 7015, 7014, 4806, 7002, 4804,
     4781, 4758, 4801, 4809, 2829, 1619, 3772, 6998, 6986, 4849,
     4808, 6980, 4815, 4919, 4991, 4881, 4464, 4931, 6958, 4819,

     6952, 6948, 6919, 4924, 6881, 4930, 5005, 6845, 4994, 5080,
     5012, 5043, 5115, 4961, 5028, 6840, 5091, 5116, 4995, 5056,
     5006, 5174, 5033, 5136, 5184, 6725, 5029, 6719, 5078, 6701,
     1833, 5180, 5121, 6675, 3025, 5185, 5172, 6644, 5192, 5195,
     5198, 5210, 5403, 5427, 5441, 5256, 5455, 5468, 6583, 5479,
     6532, 5478, 5502, 5516, 5198, 5530, 5544, 5558, 5567, 5581,
     5580, 5604, 5618, 5257, 5632, 5646, 5660, 5669, 5683, 5718,
     5298, 5089, 5365, 5296, 5303, 5217, 6523, 5366, 5363, 6479,
     6473, 5230, 5421, 5683, 5707, 5742, 5356, 5756, 5770, 5721,
     5784, 5798, 5797, 5806, 5815, 5824, 5841, 6471, 5797, 5850,

     5874, 5888, 5848, 5902, 5916, 5930, 5939, 5953, 5952, 5961,
     5970, 5979, 5996, 6465, 5919, 6005, 6029, 6043, 6003, 6057,
     6071, 6085, 6094, 6108, 6107, 6116, 6125, 6134, 6145, 6236,
     6330, 6224, 6252, 6258, 6408, 6336, 6364, 6489, 6583, 6677,
     6414, 6755, 6495, 6523, 6589, 5905, 6680, 8384, 8384, 6171,
     6220, 6311, 6252, 6470, 6399, 6393, 5304, 6358, 6315, 6026,
     6036, 3666, 6187, 5371, 6181, 6203, 6206, 6052, 3852, 5897,
     5730, 6207, 5450, 6233, 6419, 6306, 3598, 5121, 4179, 5259,
     6243, 5871, 6248, 6272, 6293, 6274, 6299, 5627, 6343, 5525,
     6205, 6276, 6327, 5760, 6250, 6037, 5467, 6344, 5413, 6346,

     6309, 6304, 5388, 5349, 6370, 4770, 5182, 5097, 5070, 6384,
     6566, 6580, 6359, 6664, 6732, 6426, 6769, 6783, 6504, 6598,
     6663, 6702, 6813, 5016, 4963, 6394, 5850, 6409, 4935, 6393,
     6413, 6459, 6457, 6731, 6783, 6792, 6801, 4925, 6822, 6831,
     6469, 6906, 6912, 6940, 6917, 6982, 6988, 7032, 7038, 7066,
     7110, 7116, 7144, 7172, 6502, 6507, 6420, 6154, 6546, 6563,
     6564, 4897, 6192, 4865, 6349, 6231, 4798, 6558, 6505, 6529,
     6574, 4653, 6452, 6506, 4547, 6640, 6559, 6651, 4453, 6652,
     4346, 4244, 4036, 3934, 6660, 3869, 3683, 3524, 3463, 3376,
     6008, 3336, 3316, 6661, 6675, 6887, 6954, 6671, 3284, 6705,

     2998, 6737, 3238, 3218, 3148, 6605, 7178, 7206, 7212, 7240,
     7246, 7274, 7280, 7308, 7314, 7342, 7370, 7398, 6718, 6715,
     3124, 6653, 3104, 3064, 6686, 6869, 2874, 2786, 6885, 6687,
     6878, 6738, 6839, 6919, 2564, 2477, 6920, 6903, 6887, 6921,
     2400, 6961, 2273, 6841, 2243, 6818, 7002, 6967, 2111, 7404,
     7432, 7438, 7466, 7472, 7500, 7506, 7534, 2014, 1932, 1595,
     1563, 1514, 1483, 7008, 1437, 7045, 1394, 1346, 6978, 1314,
     6891, 7047, 1158, 6994, 1167, 1083, 7052, 7540, 7568, 7574,
     7602, 7608, 7636,  967,  928,  825, 7022,  795,  623,  567,
     7642, 7670, 7676, 7704,  506, 7096, 7710, 7738,  488, 7744,

     8384, 7790, 7799, 7808, 7817, 7826, 7835, 7844, 7851, 7854,
     7863, 7872, 7874, 7877, 7879, 7882, 7891, 7893, 7896, 7905,
     7914, 7923, 7932, 7941, 7950, 7959, 7968, 7971, 7974, 7976,
     7979, 7988, 7997, 8006, 8015, 8018, 8021, 8030, 8033, 8036,
     8045, 8054, 8057, 8060, 8069, 8078, 8087, 8096, 8105, 8114,
     8123, 8126, 8134, 8137, 8140, 8143, 8146, 8155, 8164, 8173,
     8182, 8185, 8188, 8197, 8206, 8209, 8212, 8221, 8230, 8233,
     8236, 8245, 8254, 8263, 8266, 8269, 8272, 8275, 8284, 8293,
     8296, 8299, 8308, 8311, 8314, 8323, 8326, 8329, 8338, 8347,
     8356, 8359, 8362, 8365, 8368, 8371, 8374

    } ;

static yyconst flex_int16_t yy_def[1298] =
    {   0,
     1201,    1, 1202, 1202, 1203, 1203, 1201,    7, 1201,    9,
     1201,   11, 1204, 1204, 1205, 1205, 1206, 1206, 1201, 1201,
     1201, 1201, 1201, 1201, 1207, 1201, 1201, 1208, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201,   37, 1201, 1201,
     1201, 1201, 1201, 1201, 1209, 1210, 1201, 1201, 1201, 1210,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1211, 1201, 1201, 1212, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1213, 1214, 1214,   99,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1215, 1216,
     1216,  121, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1217, 1201, 1201, 1218, 1219,
     1219, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1220,
     1201, 1201, 1221, 1201, 1201, 1222, 1201, 1201, 1201, 1222,
       82, 1201, 1201, 1201, 1223, 1201, 1201, 1224, 1223,  169,
      169,  169,  169,  169, 1201, 1201, 1201, 1225, 1201, 1225,
     1225,  181,  181,  181,  181,  181, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1226, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1227, 1228, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1229, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1229,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231, 1201,
     1201,  231,  231, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201,   82,   82, 1230, 1231, 1231,  307,  307,  307,
      307,  307,  307,  307, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1232, 1201, 1233, 1233, 1201, 1201, 1201, 1201,
     1201, 1234, 1201, 1201, 1201, 1201, 1235, 1236, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1237, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1237,  356,  356,  356, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1238, 1201, 1239, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1240, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1240,  394, 1201,  394,  394, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1241, 1242, 1201, 1243, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1244, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1244,  432,  432, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1245, 1201, 1246, 1201, 1247, 1201, 1247, 1248,
     1249, 1248,  452,  452, 1249, 1249, 1250, 1201, 1250, 1250,
      460,  460,  460,  460,  460,  460,  460,  467,  467,  467,
      460,  460, 1201, 1201, 1251, 1201, 1201, 1201, 1201, 1201,
     1252, 1201, 1201, 1253, 1201, 1254, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1254, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1255, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1255,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
     1256, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1257,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1257,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1258, 1259, 1260,
     1261, 1262, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1262, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1263,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1263,  659,
      659,  659, 1264, 1265, 1266, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1266, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1267, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1267,  692,  692,  692, 1268, 1201, 1269, 1270, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1270, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1271, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1271,  726,  726, 1272, 1272,
      730,  730,  730,  730,  730,  730,  736, 1273, 1273, 1274,
     1274,  741,  741,  741,  741,  741,  741,  741,  745, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1275, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1275, 1275, 1276, 1276, 1276,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770, 1277, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1277, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1278, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1278,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870, 1279, 1280, 1281, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1281, 1281, 1282, 1282, 1282,  897, 1283, 1284,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1284, 1284,
     1285, 1285, 1285,  913, 1286, 1287, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1287, 1287, 1288, 1288, 1288, 1289,
     1289,  931,  931,  931,  931,  931,  931, 1290, 1291, 1291,
      940,  940,  940,  940,  940, 1201, 1201, 1201, 1201, 1292,
     1292, 1293, 1293, 1293,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,

      954,  954,  954,  954,  954,  954,  954,  954,  954, 1294,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1294, 1294,
     1295, 1295, 1295, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1296, 1296, 1297, 1297,  913, 1287, 1287,
      929,  931,  931,  931,  935,  931,  931, 1290,  940,  940,
      940,  940,  940,  940,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954, 1294, 1294, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023,  929,  931,  931,  931,  931,
     1048, 1048,  940,  940,  940,  940,  940,  940,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954, 1023, 1023, 1201, 1023, 1023, 1023,  929,  931,
      931,  931,  931,  940,  940,  940,  940,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954, 1023, 1201, 1201, 1023,  931,  931,  931,
      931,  940,  940,  954,  954,  954,  954,  954, 1023, 1201,
      931,  931,  940,  940,  954, 1023,  931,  940, 1201,  931,

        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201

    } ;

static yyconst flex_int16_t yy_nxt[8481] =
    {   0,
       20,   21,   22,   23,   24,   25,   20,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   47,   20,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   46,   57,   46,
       46,   58,   46,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   46,   68,   46,   69,   70,   71,   72,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   73,   74,   75,   76,   20,   77,
       78,   79,   80,   20,   20,   20,   81,   84,   85,   84,

       85,   82,   88,   89,   90,  151,  152,   86,  176,   86,
       88,   89,   90,  151,  152,  154,  155,  221,   91,  154,
      155,  157,  158,  177,  567,  159,   91,   92,   93,   94,
       95,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   96,   92,   92,   92,   92,   92,
       92,   92,   92,   97,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   92,   92,   92,   92,   98,   98,   98,
       98,   98,   99,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  100,   98,   98,   98,   98,
       98,   98,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  101,  102,  103,  104,   92,  105,  106,  107,  108,
       92,   92,   92,  109,  110,  111,  112,  113,  109,  109,
      109,  114,  109,  115,  116,  109,  109,  109,  109,  109,
      117,  109,  109,  109,  109,  109,  118,  109,  109,  119,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  109,
      109,  109,  109,  120,  120,  120,  120,  120,  121,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  122,  120,  120,  120,  120,  120,  120,  109,  123,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  124,  125,  126,
      127,  109,  128,  129,  130,  131,  109,  109,  109,  132,
      133,  134,  135,  132,  136,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  137,  138,  138,  132,
      132,  132,  132,  132,  132,  139,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  132,  132,  132,  132,  140,
      140,  140,  141,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  142,  143,  144,  145,  132,  146,  147,
      148,  149,  132,  132,  132,  160,  157,  158,  188, 1201,
      161,  166,  166,  190,  167,  193,  193,  290,  189,  194,
      518,  191,  192,  221,  195,  205,  206,  208,  209,  211,
      196,  347,  222,  223,  224,  225, 1201,  226,  227,  228,
      229,  235,  221,  302,  221,  326,  168,  357,  303,  221,
      327,  221,  221,  413,  413,  236,  385,  237,  221,  245,
      291,  246,  476,  476,  238,  221,  239,  221,  247,  221,
      248,  514,  395,  240,  231,  519,  232,  241,  515, 1199,
      242,  449,  479,  221,  233,  221,  303,  221,  221,  221,

      234,  530,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  179,  179,  479,  213,  214,
      215,  216,  179,  217,  218,  219,  220,  222,  223,  224,
      225,  536,  226,  227,  228,  229,  221,  221,  221,  243,
      249,  221,  480,  221,  221,  520,  221,  221,  250,  244,
      180,  251,  221,  221,  252,  221,  253,  221,  521,  522,
      221,  480,  221,  254,  256,  221,  255,  221, 1190,  221,
      221,  257,  258,  540,  221,  221,  259,  221,  260,  221,
      271,  221,  533,  339,  340,  341,  342,  221,  343,  344,
      345,  346,  221,  221,  532,  221,  181,  181,  181,  182,

      183,  183,  183,  183,  183,  183,  184,  185,  186,  197,
      548,  198,  198,  261,  221,  221,  221,  262,  328,  329,
      330,  199,  200,  199,  221,  201,  199,  202,  203,  526,
      221,  523,  263,  221,  331,  524,  199,  200,  199,  544,
      264,  221,  221,  525,  201,  199,  268,  221,  221,  221,
      221,  771,  202,  551,  265,  203,  221,  221,  266,  267,
      221,  221,  269,  221,  272,  270,  221,  273,  537,  221,
      274,  275,  221,  221,  221,  221, 1196,  538,  552,  278,
      221,  276,  539,  221,  277,  221,  221,  541,  279,  221,
      221,  221,  221,  285,  221,  280,  221,  281,  221,  543,

      282,  286,  283,  221,  221,  221,  284,  287,  527,  288,
      221,  528,  542,  221,  221,  221,  221,  529,  221,  221,
      787,  289,  549,  221,  221,  292,  292,  292,  292,  292,
      221,  292,  292,  292,  292,  292,  292,  221,  292,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  295,  296,  297,  298,  298,  298,
      298,  298,  298,  299,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  304,  333,

      334,  335,  348,  349,  350,  351,  550,  352,  353,  354,
      355,  477,  221,  477,  347,  336,  478,  478,  356,  368,
      369,  370,  660,  305,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  221,  545,  371,  221,  306,  306,  306,
      307,  308,  306,  306,  306,  309,  306,  306,  310,  306,
      306,  306,  311,  312,  306,  306,  313,  306,  314,  306,
      306,  306,  348,  349,  350,  351,  221,  352,  353,  354,
      355,  360,  360,  360,  360,  360,  360,  360,  221,  553,
      578,  315,  316,  317,  318,  798,  319,  320,  321,  322,
      358,  358,  358,  358,  358,  579,  358,  358,  358,  358,

      358,  358,  221,  358,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  361,  362,  363,  364,  364,  364,  364,  364,
      364,  365,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  377,  378,  379,  380,
      394,  381,  382,  383,  384,  386,  387,  388,  389,  221,
      390,  391,  392,  393,  397,  397,  397,  397,  397,  774,
      397,  397,  397,  397,  397,  397,  221,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  555,  221,  386,  387,  388,  389,  221,  390,
      391,  392,  393,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  400,  401,  402,  403,  403,  403,
      403,  403,  403,  404,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  407,  408,
      409,  415,  416,  417,  418,  432,  419,  420,  421,  422,
      424,  425,  426,  427,  410,  428,  429,  430,  431,  433,
      433,  433,  433,  433, 1176,  433,  433,  433,  433,  433,
      433,  554,  433,  435,  435,  435,  435,  435,  435,  435,

      534,  385,  221,  535,  221,  424,  425,  426,  427,  693,
      428,  429,  430,  431,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  436,  437,  438,  439,  439,  439,  439,  439,
      439,  440,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  166,  166, 1175,  167,
      165,  165,  165,  165,  165,  165,  165,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  575,  221,

      221,  168,  165,  165,  165,  165,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  583,  221,  558,  169,  169,  169,
      170,  171,  171,  171,  171,  171,  171,  172,  173,  174,
      166,  166,  221,  165,  600,  613,  570,  451,  496,  496,
      496,  496,  496,  496,  496,  221,  451,  457,  457,  457,
      457,  457,  457,  457,  471,  471,  471,  471,  471,  471,
      471,  556,  452,  329,  330,  165,  221,  557,  451,  451,

      221,  600,  563,  451,  505,  505,  505,  505,  505,  505,
      505,  451,  566,  615,  451,  221,  451,  453,  451,  576,
      454,  166,  166,  221,  167,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  457,
      457,  457,  457,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  334,  335,  221,  168,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  369,  370,  221,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  179,  179,  193,  193,  546,
      600,  559,  458,  564,  614,  582,  560,  473,  474,  473,
      547,  221,  473,  561,  221,  221,  481,  481,  221,  562,
      221,  565,  473,  474,  473,  481,  481,  481,  481,  577,
      459,  473,  221,  618,  779,  588,  221,  600,  481,  481,
      481,  481,  481,  481,  487,  488,  489,  490,  221,  491,
      492,  493,  494,  212,  212,  212,  212,  212,  221,  212,
      212,  212,  212,  212,  212,  789,  212,  222,  223,  224,
      225,  221,  226,  227,  228,  229,  460,  460,  460,  461,

      462,  462,  462,  462,  462,  462,  463,  464,  465,  179,
      179,  571,  466,  580,  581,  221,  178,  573,  799,  572,
      221,  574,  221,  221,  221,  466,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      568,  467,  584,  775,  178,  585,  586,  466,  466,  302,
      587,  221,  466,  600,  303,  221,  569,  221,  784,  221,
      466,  221,  617,  466,  803,  466,  468,  466,  221,  469,
      179,  179,  589,  589,  589,  589,  221,  458,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  497,  498,  499,  500,  500,  500,  500,  500,

      500,  501,  408,  409,  221,  459,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      221,  221,  221,  221,  221,  791,  221,  221,  221,  221,
      221,  221,  221,  221,  413,  413,  221,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  460,  460,  460,  461,  462,  462,  462,  462,  462,
      462,  463,  464,  465,  197,  963,  198,  198,  620,  620,
      620,  620,  620,  620,  620,  221,  199,  200,  199,  326,
      201,  199,  202,  772,  327,  449,  328,  329,  330,  600,
      303,  199,  200,  199,  478,  478,  610,  221,  611,  201,

      199,  612,  331,  661,  661,  661,  661,  202,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  506,  507,  508,  509,
      509,  509,  509,  509,  509,  510,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      513,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  781,  221,  790,  222,  223,  224,
      225,  221,  226,  227,  228,  229,  589,  589,  589,  589,

      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  592,  593,  594,  595,
      609,  596,  597,  598,  599,  601,  602,  603,  604,  999,
      605,  606,  607,  608,  306,  306,  306,  306,  306,  221,
      306,  306,  306,  306,  306,  306,  785,  306,  621,  622,

      623,  624,  624,  624,  624,  624,  624,  625,  782,  783,
      601,  602,  603,  604,  221,  605,  606,  607,  608,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  333,  334,  335,  633,  634,  635,  636,  814,  637,
      638,  639,  640,  221,  368,  369,  370,  336,  338,  338,
      338,  338,  338,  221,  338,  338,  338,  338,  338,  338,
      371,  338,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  643,  644,  645,
      646,  646,  646,  646,  646,  646,  647,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  348,  349,  350,  351,  221,  352,  353,  354,  355,
      347,  347,  347,  347,  347,  800,  347,  347,  347,  347,
      347,  347,  221,  347,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  652,
      653,  654,  655,  655,  655,  655,  655,  655,  656,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  659,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  694,  694,  694,  694,  348,  349,  350,  351,
      423,  352,  353,  354,  355,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      666,  667,  668,  669, 1145,  670,  671,  672,  673,  376,
      376,  376,  376,  376,  805,  376,  376,  376,  376,  376,
      376,  221,  376,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  676,  677,

      678,  679,  679,  679,  679,  679,  679,  680,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  386,  387,  388,  389,  600,  390,  391,  392,
      393,  385,  385,  385,  385,  385,  813,  385,  385,  385,
      385,  385,  385,  221,  385,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      685,  686,  687,  688,  688,  688,  688,  688,  688,  689,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  692,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  727,  727,  727,  727,  386,  387,  388,
      389,  221,  390,  391,  392,  393,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  407,  408,  409,  700,  701,  702,  703,  221,  704,
      705,  706,  707,  766,  766,  766,  766,  410,  414,  414,
      414,  414,  414,  818,  414,  414,  414,  414,  414,  414,
      221,  414,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  710,  711,  712,
      713,  713,  713,  713,  713,  713,  714,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,

      715,  424,  425,  426,  427,  221,  428,  429,  430,  431,
      423,  423,  423,  423,  423,  841,  423,  423,  423,  423,
      423,  423,  221,  423,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  719,
      720,  721,  722,  722,  722,  722,  722,  722,  723,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  726,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  831,  424,  425,  426,  427,  221,  428,  429,  430,
      431,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  166,  166,  835,
      166,  737,  737,  750,  221,  750,  793,  221,  751,  751,

      737,  737,  737,  737,  807,  755,  221,  756,  768,  768,
      768,  768,  773,  737,  737,  737,  737,  737,  737,  738,
      738,  776,  729,  777,  755,  802,  221,  221,  738,  738,
      738,  738,  756,  221,  808,  221,  221,  221,  747,  747,
      778,  738,  738,  738,  738,  738,  738,  747,  747,  747,
      747,  179,  179,  221,  740,  811,  221,  221,  816,  842,
      747,  747,  747,  747,  747,  747,  221,  740,  730,  730,
      730,  731,  732,  732,  732,  732,  732,  732,  733,  734,
      735,  166,  166,  741,  167,  221,  794,  780,  962,  740,
      740,  819,  786,  221,  740,  758,  758,  758,  758,  758,

      758,  758,  740,  221,  221,  740,  221,  740,  742,  740,
      815,  743,  826,  221,  221,  221,  168,  457,  457,  457,
      457,  457,  457,  457,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  457,  457,  457,  457,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  796,
      221,  836,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  166,  166,  221,  166,  487,
      488,  489,  490,  788,  491,  492,  493,  494,  809,  821,
      792,  736,  736,  795,  797,  801,  838,  221,  804, 1145,

      736,  736,  736,  736,  221,  822,  810,  221,  221,  221,
      729,  221,  221,  736,  736,  736,  736,  736,  736,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  487,  488,  489,
      490,  600,  491,  492,  493,  494,  730,  730,  730,  731,
      732,  732,  732,  732,  732,  732,  733,  734,  735,  166,
      166, 1003,  167,  748,  748,  806,  820,  823,  600,  828,
      829,  221,  748,  748,  748,  748,  875,  221,  824,  221,
      221,  833,  458,  221,  221,  748,  748,  748,  748,  748,

      748,  457,  457,  827,  168,  221,  840,  221,  221,  221,
      457,  457,  457,  457,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  457,  457,  457,  457,  457,  457,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  834,  873,  221,  600,  221,  600,  877,
      169,  169,  169,  170,  171,  171,  171,  171,  171,  171,
      172,  173,  174,  166,  166,  221,  167,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  476,  476,  832,  839,  478,  478,  600,  329,  330,
      871,  752,  753,  752,  221,  754,  752,  754,  168,  872,

      754, 1148,  221,  600,  876,  600,  752,  753,  752,  600,
      754,  878,  754,  600,  874,  752,  879,  329,  330,  754,
      759,  760,  761,  762,  762,  762,  762,  762,  762,  763,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  169,  169,  169,  170,  171,  171,
      171,  171,  171,  171,  172,  173,  174,  179,  179,  486,
      486,  486,  486,  486,  179,  486,  486,  486,  486,  486,
      486,  600,  486,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  880,  880,  880,
      880, 1147,  459,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  334,  335,  600,  460,  460,
      460,  461,  462,  462,  462,  462,  462,  462,  463,  464,
      465,  179,  179,  334,  335,  369,  370,  221,  179,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  222,  223,  224,  225,  221,  226,  227,
      228,  229,  893,  893,  893,  893,  459,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  369,  370,  221,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  460,  460,  460,  461,  462,  462,  462,  462,
      462,  462,  463,  464,  465,  458,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  408,  409,  221,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  746,
      746,  853,  853,  853,  853,  853,  853,  853,  746,  746,
      746,  746,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  746,  746,  746,  746,  746,  746,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  844,  845,  846,  847,  221,  848,  849,  850,  851,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  770,  591,  591,  591,
      591,  591,  949,  591,  591,  591,  591,  591,  591,  221,
      591,  854,  855,  856,  857,  857,  857,  857,  857,  857,
      858,  949,  222,  223,  224,  225, 1072,  226,  227,  228,
      229,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,

      859,  859,  859,  601,  602,  603,  604,  221,  605,  606,
      607,  608,  600,  600,  600,  600,  600, 1060,  600,  600,
      600,  600,  600,  600,  221,  600,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  863,  864,  865,  866,  866,  866,  866,  866,  866,
      867,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  870,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  964,  601,  602,  603,  604,  221,  605,
      606,  607,  608,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  633,
      634,  635,  636,  221,  637,  638,  639,  640,  632,  632,

      632,  632,  632, 1065,  632,  632,  632,  632,  632,  632,
      221,  632,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  886,  887,  888,
      889,  889,  889,  889,  889,  889,  890,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  633,  634,  635,  636,  221,  637,  638,  639,  640,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  893,  893,  893,  893,  893,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  348,  349,  350,  351,  221,  352,  353,
      354,  355,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  895,  895,  895,  895,

      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  897,
      898,  666,  667,  668,  669,  948,  670,  671,  672,  673,
      408,  409,  914,  347,  901,  901,  901,  901,  901,  901,

      901,  909,  909,  909,  909,  385,  348,  349,  350,  351,
      948,  352,  353,  354,  355,  665,  665,  665,  665,  665,
      221,  665,  665,  665,  665,  665,  665, 1074,  665,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  902,  903,  904,
      905,  905,  905,  905,  905,  905,  906,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  666,  667,  668,  669,  221,  670,  671,  672,  673,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  386,  387,  388,  389,  221,  390,  391,
      392,  393,  683,  683,  683,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  683,  683,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  913,
      700,  701,  702,  703,  221,  704,  705,  706,  707,  699,

      699,  699,  699,  699,  972,  699,  699,  699,  699,  699,
      699,  954,  699,  751,  751,  221,  386,  387,  388,  389,
      221,  390,  391,  392,  393,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      918,  919,  920,  921,  921,  921,  921,  921,  921,  922,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  700,  701,  702,  703,  221,  704,
      705,  706,  707,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      424,  425,  426,  427,  221,  428,  429,  430,  431,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  929,  450,  450,  450,

      450,  450,  450,  450,  730,  730,  730,  730,  730,  730,
      730,  221,  166,  166,  221,  946,  959,  946, 1095,  930,
      947,  947,  221,  953,  487,  488,  489,  490,  930,  491,
      492,  493,  494,  950,  950,  950,  950,  221,  958,  221,
      424,  425,  426,  427,  931,  428,  429,  430,  431,  960,
      930,  930,  955,  956,  957,  930,  966,  221,  221,  968,
      221,  961,  221,  930,  221,  221,  930,  974,  930,  932,
      930,  221,  933,  166,  166,  221,  166,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  450,  450,  450,  450,  935,  935,  935,  935,  935,

      935,  935,  935,  935,  935,  221,  221,  965,  729,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  221,  221,  971,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  730,  730,  730,  731,  732,  732,
      732,  732,  732,  732,  733,  734,  735,  936,  936,  385,
      969,  973,  977,  937,  937,  221,  936,  936,  936,  936,
      221,  976,  937,  937,  937,  937,  221,  221,  600,  936,
      936,  936,  936,  936,  936,  937,  937,  937,  937,  937,

      937,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  985,  600,  221,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  166,  166,  970,  167,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  978,  980,  221,  938,  938,
      221,  221,  982,  990,  940,  940,  992,  938,  938,  938,
      938,  221,  221,  940,  940,  940,  940,  168,  221,  600,
      938,  938,  938,  938,  938,  938,  940,  940,  940,  940,
      940,  940,  941,  941,  221,  221,  994,  983,  986,  221,
      997,  941,  941,  941,  941,  487,  488,  489,  490,  221,

      491,  492,  493,  494,  941,  941,  941,  941,  941,  941,
      991,  221,  221,  169,  169,  169,  170,  171,  171,  171,
      171,  171,  171,  172,  173,  174,  166,  166,  981,  167,
      457,  457,  998, 1025,  221,  988,  221,  600,  221,  457,
      457,  457,  457,  487,  488,  489,  490,  221,  491,  492,
      493,  494,  457,  457,  457,  457,  457,  457,  943,  943,
      989,  168,  221,  984,  944,  944, 1001,  943,  943,  943,
      943,  221,  221,  944,  944,  944,  944,  221,  995, 1073,
      943,  943,  943,  943,  943,  943,  944,  944,  944,  944,
      944,  944,  221,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  169,  169,  169,
      170,  171,  171,  171,  171,  171,  171,  172,  173,  174,
      179,  179,  993,  221, 1000,  458,  996,  179,  221, 1004,
      221, 1005,  329,  330,  945,  945,  221,  751,  751, 1007,
      221,  221, 1008,  945,  945,  945,  945,  473,  221,  473,
     1006,  221,  473, 1009,  221,  459,  945,  945,  945,  945,
      945,  945,  473, 1030,  473,  600,  221, 1019, 1019, 1019,
     1019,  473,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,

      221,  460,  460,  460,  461,  462,  462,  462,  462,  462,
      462,  463,  464,  465,  179,  179, 1075,  222,  223,  224,
      225,  179,  226,  227,  228,  229, 1021, 1021, 1021, 1021,
      939,  939, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  939,
      939,  939,  939, 1024,  600,  221,  600, 1029, 1057,  459,
     1028,  600,  939,  939,  939,  939,  939,  939,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  222,  223,  224,  225,
      221,  226,  227,  228,  229,  460,  460,  460,  461,  462,

      462,  462,  462,  462,  462,  463,  464,  465,  457,  457,
     1032,  600,  221, 1026,  600, 1062, 1033,  457,  457,  457,
      457, 1027,  952,  334,  335, 1034, 1034, 1034, 1034,  221,
      457,  457,  457,  457,  457,  457,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      222,  223,  224,  225,  221,  226,  227,  228,  229,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  844,  845,  846,
      847,  221,  848,  849,  850,  851,  843,  843,  843,  843,

      843, 1067,  843,  843,  843,  843,  843,  843,  221,  843,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012, 1013,
     1014, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017,  844,  845,  846,  847,  221,  848,  849,  850,
      851,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  601,  602,  603,  604,  221,  605,
      606,  607,  608,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,

     1021,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600, 1023,  633,  634,  635,
      636,  221,  637,  638,  639,  640,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,  369,

      370,  221,  601,  602,  603,  604, 1087,  605,  606,  607,
      608, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  633,  634,  635,  636,  898,  637,  638,  639,  640,
      633,  634,  635,  636, 1100,  637,  638,  639,  640,  348,

      349,  350,  351,  600,  352,  353,  354,  355,  348,  349,
      350,  351,  221,  352,  353,  354,  355, 1036, 1036, 1036,
     1036,  408,  409,  947,  947,  348,  349,  350,  351, 1077,
      352,  353,  354,  355,  666,  667,  668,  669,  221,  670,
      671,  672,  673,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,

     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  666,  667,  668,  669,
     1038,  670,  671,  672,  673,  666,  667,  668,  669,  221,
      670,  671,  672,  673,  386,  387,  388,  389, 1140,  390,
      391,  392,  393,  386,  387,  388,  389,  221,  390,  391,
      392,  393, 1039, 1039, 1039, 1039, 1059,  221,  221, 1058,
      386,  387,  388,  389, 1089,  390,  391,  392,  393,  700,
      701,  702,  703,  221,  704,  705,  706,  707,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  700,  701,  702,  703,  221,  704,  705,  706,  707,

      700,  701,  702,  703, 1041,  704,  705,  706,  707,  424,
      425,  426,  427, 1122,  428,  429,  430,  431,  424,  425,
      426,  427,  221,  428,  429,  430,  431, 1061,  221,  424,
      425,  426,  427,  221,  428,  429,  430,  431,  166,  166,
     1126,  166, 1043, 1043,  221, 1063,  221,  221,  221, 1066,
     1084, 1043, 1043, 1043, 1043,  487,  488,  489,  490, 1064,
      491,  492,  493,  494, 1043, 1043, 1043, 1043, 1043, 1043,
     1044, 1044,  221,  729,  221, 1068,  450,  450, 1128, 1044,
     1044, 1044, 1044, 1076,  221,  450,  450,  450,  450,  221,
     1078,  221, 1044, 1044, 1044, 1044, 1044, 1044,  450,  450,

      450,  450,  450,  450,  487,  488,  489,  490, 1088,  491,
      492,  493,  494,  221, 1079,  221, 1085,  221, 1081,  730,
      730,  730,  731,  732,  732,  732,  732,  732,  732,  733,
      734,  735,  166,  166,  221,  166,  222,  223,  224,  225,
      221,  226,  227,  228,  229,  221, 1080,  221, 1042, 1042,
      221, 1055, 1082, 1092, 1046, 1046,  221, 1042, 1042, 1042,
     1042, 1071, 1093, 1046, 1046, 1046, 1046,  729,  221, 1086,
     1042, 1042, 1042, 1042, 1042, 1042, 1046, 1046, 1046, 1046,
     1046, 1046, 1047, 1047,  221,  221, 1083,  221, 1091, 1090,
      221, 1047, 1047, 1047, 1047,  222,  223,  224,  225,  221,

      226,  227,  228,  229, 1047, 1047, 1047, 1047, 1047, 1047,
     1094,  221, 1127,  730,  730,  730,  731,  732,  732,  732,
      732,  732,  732,  733,  734,  735,  450,  450, 1096, 1096,
     1096, 1096, 1051, 1051,  221,  450,  450,  450,  450, 1099,
      221, 1051, 1051, 1051, 1051, 1102,  600,  600,  450,  450,
      450,  450,  450,  450, 1051, 1051, 1051, 1051, 1051, 1051,
      221,  221,  600, 1121, 1069, 1101,  600, 1103,  844,  845,
      846,  847, 1070,  848,  849,  850,  851, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045,  166,  166,  221,  167, 1097, 1097, 1097, 1097, 1097,

     1097, 1097, 1097, 1097, 1104, 1105, 1133, 1048, 1048,  385,
      600, 1056,  600, 1052, 1052,  347, 1048, 1048, 1048, 1048,
     1106,  600, 1052, 1052, 1052, 1052,  168,  600,  423, 1048,
     1048, 1048, 1048, 1048, 1048, 1052, 1052, 1052, 1052, 1052,
     1052, 1053, 1053,  221, 1119, 1130,  221,  221,  221, 1134,
     1053, 1053, 1053, 1053,  222,  223,  224,  225, 1120,  226,
      227,  228,  229, 1053, 1053, 1053, 1053, 1053, 1053, 1131,
      221, 1031,  169,  169,  169,  170,  171,  171,  171,  171,
      171,  171,  172,  173,  174,  179,  179,  221,  844,  845,
      846,  847,  179,  848,  849,  850,  851, 1123,  458,  221,

      221, 1049, 1049, 1136,  221,  221, 1129, 1054, 1054, 1018,
     1049, 1049, 1049, 1049, 1132,  221, 1054, 1054, 1054, 1054,
      459, 1124, 1125, 1049, 1049, 1049, 1049, 1049, 1049, 1054,
     1054, 1054, 1054, 1054, 1054, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1149,  423, 1017,  460,  460,  460,  461,
      462,  462,  462,  462,  462,  462,  463,  464,  465,  179,
      179,  221,  844,  845,  846,  847,  179,  848,  849,  850,
      851, 1135,  221,  221,  221, 1050, 1050, 1160,  947,  947,

      221,  221,  221, 1138, 1050, 1050, 1050, 1050,  752, 1137,
      752, 1139, 1141,  752,  459, 1143,  221, 1050, 1050, 1050,
     1050, 1050, 1050,  752,  600,  752, 1142,  221,  221, 1164,
     1161, 1002,  752,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  601,  602,  603,
      604, 1144,  605,  606,  607,  608,  221,  221,  600,  221,
      460,  460,  460,  461,  462,  462,  462,  462,  462,  462,
      463,  464,  465,  457,  457,  221, 1158, 1146, 1159,  221,
     1166,  221,  457,  457,  457,  457,  601,  602,  603,  604,
      600,  605,  606,  607,  608,  457,  457,  457,  457,  457,

      457, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097,  633,  634,  635,  636, 1175,
      637,  638,  639,  640,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843, 1098,  633,  634,  635,
      636,  600,  637,  638,  639,  640,  666,  667,  668,  669,
      221,  670,  671,  672,  673,  666,  667,  668,  669, 1174,
      670,  671,  672,  673,  600, 1167,  987,  601,  602,  603,

      604,  979,  605,  606,  607,  608,  700,  701,  702,  703,
      221,  704,  705,  706,  707,  700,  701,  702,  703,  221,
      704,  705,  706,  707, 1107, 1107,  221, 1162,  221, 1165,
     1108, 1108,  221, 1107, 1107, 1107, 1107,  221, 1171, 1108,
     1108, 1108, 1108, 1163,  221, 1187, 1107, 1107, 1107, 1107,
     1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108, 1109, 1109,
      221,  221,  221, 1168, 1169, 1172, 1170, 1109, 1109, 1109,
     1109,  844,  845,  846,  847,  221,  848,  849,  850,  851,
     1109, 1109, 1109, 1109, 1109, 1109,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

     1110, 1110,  221, 1176,  221, 1173, 1111, 1111,  975, 1110,
     1110, 1110, 1110, 1177,  221, 1111, 1111, 1111, 1111,  221,
      600, 1186, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111,
     1111, 1111, 1111, 1111,  166,  166,  967,  167,  844,  845,
      846,  847,  221,  848,  849,  850,  851,  600, 1189,  221,
     1112, 1112, 1184, 1190,  221,  600, 1113, 1113,  221, 1112,
     1112, 1112, 1112,  221, 1195, 1113, 1113, 1113, 1113,  168,
      221,  221, 1112, 1112, 1112, 1112, 1112, 1112, 1113, 1113,
     1113, 1113, 1113, 1113, 1114, 1114,  221,  221,  221, 1185,
     1188,  221,  423, 1114, 1114, 1114, 1114, 1199,  423,  924,

      923,  385,  385,  908,  907,  600, 1114, 1114, 1114, 1114,
     1114, 1114,  347,  347,  892,  169,  169,  169,  170,  171,
      171,  171,  171,  171,  171,  172,  173,  174, 1115, 1115,
      891,  600,  600,  869, 1116, 1116,  868, 1115, 1115, 1115,
     1115,  860,  859, 1116, 1116, 1116, 1116,  221,  221,  600,
     1115, 1115, 1115, 1115, 1115, 1115, 1116, 1116, 1116, 1116,
     1116, 1116, 1117, 1117,  837,  830,  221,  825,  221,  817,
      221, 1117, 1117, 1117, 1117,  812,  221,  221,  221,  221,
      765,  458,  764,  484, 1117, 1117, 1117, 1117, 1117, 1117,
     1118, 1118,  485,  423,  423,  725, 1150, 1150,  724, 1118,

     1118, 1118, 1118,  716,  715, 1150, 1150, 1150, 1150,  697,
      696,  408, 1118, 1118, 1118, 1118, 1118, 1118, 1150, 1150,
     1150, 1150, 1150, 1150, 1151, 1151,  385,  385,  691,  690,
     1152, 1152,  682, 1151, 1151, 1151, 1151,  681,  663, 1152,
     1152, 1152, 1152,  369,  347,  347, 1151, 1151, 1151, 1151,
     1151, 1151, 1152, 1152, 1152, 1152, 1152, 1152, 1153, 1153,
      658,  657,  649,  648,  165,  165,  630, 1153, 1153, 1153,
     1153,  334,  628,  165,  165,  165,  165,  329,  627,  626,
     1153, 1153, 1153, 1153, 1153, 1153,  165,  165,  165,  165,
      165,  165,  165,  165,  616,  221,  221,  221, 1154, 1154,

      221,  165,  165,  165,  165,  531,  517, 1154, 1154, 1154,
     1154,  516,  512,  511,  165,  165,  165,  165,  165,  165,
     1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155,  503,  502,
      485,  483, 1156, 1156,  482, 1155, 1155, 1155, 1155,  162,
      448, 1156, 1156, 1156, 1156,  446,  444,  442, 1155, 1155,
     1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156,
     1157, 1157,  441,  412,  408,  406,  405,  396,  375, 1157,
     1157, 1157, 1157,  374,  373,  372,  369,  367,  366,  458,
      337,  334, 1157, 1157, 1157, 1157, 1157, 1157,  457,  457,
      332,  329,  324,  301,  300,  230,  210,  457,  457,  457,

      457,  207,  204,  187,  175,  164,  163,  458,  162, 1201,
      457,  457,  457,  457,  457,  457,  457,  457, 1201, 1201,
     1201, 1201, 1178, 1178, 1201,  457,  457,  457,  457, 1201,
     1201, 1178, 1178, 1178, 1178, 1201, 1201, 1201,  457,  457,
      457,  457,  457,  457, 1178, 1178, 1178, 1178, 1178, 1178,
     1179, 1179, 1201, 1201, 1201, 1201, 1180, 1180, 1201, 1179,
     1179, 1179, 1179, 1201, 1201, 1180, 1180, 1180, 1180, 1201,
     1201, 1201, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180,
     1180, 1180, 1180, 1180, 1181, 1181, 1201, 1201, 1201, 1201,
     1182, 1182, 1201, 1181, 1181, 1181, 1181, 1201, 1201, 1182,

     1182, 1182, 1182, 1201, 1201, 1201, 1181, 1181, 1181, 1181,
     1181, 1181, 1182, 1182, 1182, 1182, 1182, 1182,  457,  457,
     1201, 1201, 1201, 1201,  457,  457, 1201,  457,  457,  457,
      457, 1201, 1201,  457,  457,  457,  457, 1201, 1201, 1201,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457, 1183, 1183, 1201, 1201, 1201, 1201, 1191, 1191,
     1201, 1183, 1183, 1183, 1183, 1201, 1201, 1191, 1191, 1191,
     1191, 1201, 1201, 1201, 1183, 1183, 1183, 1183, 1183, 1183,
     1191, 1191, 1191, 1191, 1191, 1191,  450,  450, 1201, 1201,
     1201, 1201,  450,  450, 1201,  450,  450,  450,  450, 1201,

     1201,  450,  450,  450,  450, 1201, 1201, 1201,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
     1192, 1192, 1201, 1201, 1201, 1201, 1193, 1193, 1201, 1192,
     1192, 1192, 1192, 1201, 1201, 1193, 1193, 1193, 1193, 1201,
     1201, 1201, 1192, 1192, 1192, 1192, 1192, 1192, 1193, 1193,
     1193, 1193, 1193, 1193, 1194, 1194, 1201, 1201, 1201, 1201,
     1197, 1197, 1201, 1194, 1194, 1194, 1194, 1201, 1201, 1197,
     1197, 1197, 1197, 1201, 1201, 1201, 1194, 1194, 1194, 1194,
     1194, 1194, 1197, 1197, 1197, 1197, 1197, 1197, 1111, 1111,
     1201, 1201, 1201, 1201, 1198, 1198, 1201, 1111, 1111, 1111,

     1111, 1201, 1201, 1198, 1198, 1198, 1198, 1201, 1201, 1201,
     1111, 1111, 1111, 1111, 1111, 1111, 1198, 1198, 1198, 1198,
     1198, 1198, 1117, 1117, 1201, 1201, 1201, 1201, 1200, 1200,
     1201, 1117, 1117, 1117, 1117, 1201, 1201, 1200, 1200, 1200,
     1200, 1201, 1201, 1201, 1117, 1117, 1117, 1117, 1117, 1117,
     1200, 1200, 1200, 1200, 1200, 1200, 1155, 1155, 1201, 1201,
     1201, 1201, 1179, 1179, 1201, 1155, 1155, 1155, 1155, 1201,
     1201, 1179, 1179, 1179, 1179, 1201, 1201, 1201, 1155, 1155,
     1155, 1155, 1155, 1155, 1179, 1179, 1179, 1179, 1179, 1179,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   87,

       87,   87,   87,   87,   87,   87,   87,   87,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  212, 1201, 1201, 1201, 1201,  212,  212,
      221,  221,  221,  323, 1201,  323,  323, 1201,  323,  323,
      323,  323,  325, 1201,  325,  325,  325,  325,  325,  325,
      325,  338,  338,  347,  347,  347,  376,  376,  385,  385,
      385,  411, 1201, 1201,  411,  411,  411,  411,  411,  411,

      414,  414,  423,  423,  423,  443, 1201,  443,  443,  443,
      443,  443,  443,  443,  445, 1201,  445,  445,  445,  445,
      445,  445,  445,  447, 1201,  447, 1201,  447,  447,  447,
      447,  447,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  475,
     1201,  475,  475,  475,  475,  475,  475,  475,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  486,  486,  486,
      221,  221,  221,  591,  591,  600,  600,  600,  323, 1201,
      323,  323, 1201,  323,  323,  323,  323,  325, 1201,  325,

      325, 1201, 1201,  325,  325,  325,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  632,  632,  632,  347,  347,  347,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      665,  665,  385,  385,  385,  411, 1201,  411,  411,  411,
      411,  411,  411,  411,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  423,  423,  423,  443,
     1201,  443,  443,  443,  443,  443,  443,  443,  445, 1201,
      445,  445,  445,  445,  445,  445,  445,  447, 1201,  447,
     1201,  447,  447,  447,  447,  447,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  475, 1201,  475,  475,  475,  475,  475,
      475,  475,  481,  481,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  486,  486,  486,  221,  221,  221,  843,
      843,  843,  600,  600,  600,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  632,  632,  632,  347,  347,  347,  899,  899,  899,

      899,  899,  899,  899,  899,  899,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  665,  665,  665,  385,  385,
      385,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  699,
      699,  699,  423,  423,  423,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  486,  486,  486,  221,  221,  221,  843,  843,
      843,  600,  600,  600,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  883,  883,  883,  883,  883,  883,  883,

      883,  883,  632,  632,  632,  347,  347,  347,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  665,  665,  665,
      385,  385,  385,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  699,  699,  699,  423,  423,  423,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  486,  486,  486,  221,  221,
      221,  843,  843,  843,  600,  600,  600,  632,  632,  632,
      665,  665,  665,   19, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201
    } ;

static yyconst flex_int16_t yy_chk[8481] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    3,    3,    4,

        4,    2,    5,    5,    5,   13,   13,    3,   27,    4,
        6,    6,    6,   14,   14,   15,   15,  275,    5,   16,
       16,   17,   17,   27,  275,   17,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   18,   18,   18,   32,   38,
       18,   25,   25,   34,   25,   35,   35,   70,   32,   36,
      236,   34,   34,  236,   36,   41,   41,   43,   43,   45,
       36,  100,   46,   46,   46,   46,   38,   46,   46,   46,
       46,   51,   51,   81,   51,   86,   25,  100,   81,   54,
       86,   54,   51,  138,  138,   51,  122,   51,   51,   54,
       70,   54,  197,  197,   51,   54,   52,   52,   54,   52,
       54,  232,  122,   52,   50,  237,   50,   52,  233, 1199,
       52,  160,  201,   52,   50,  232,  160,  233,  237,  244,

       50,  244,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   28,   28,  201,   45,   45,
       45,   45,   28,   45,   45,   45,   45,   50,   50,   50,
       50,  249,   50,   50,   50,   50,   53,  249,   53,   53,
       55,   55,  202,   55,  238,  238,   53, 1195,   55,   53,
       28,   55,   53,   56,   55,   56,   56,   55,  239,  239,
       57,  202,   57,   56,   57,   58,   56,   58, 1190,   56,
       57,   57,   57,  252,  252,   58,   57,   62,   58,   62,
       62,   58,  247,   97,   97,   97,   97,   62,   97,   97,
       97,   97,  246,   62,  246,  247,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   37,
      261,   37,   37,   59,   59,  261,   59,   59,   88,   88,
       88,   37,   37,   37,   59,   37,   37,   37,   37,  242,
       59,  240,   59,  242,   88,  240,   37,   37,   37,  257,
       60,  257,   60,  241,   37,   37,   61,   61,  240,   61,
       60,  515,   37,  264,   60,   37,   60,   61,   60,   60,
      241,  264,   61,   61,   63,   61,   63,   63,  250,  515,
       63,   63,  250,   64,   63,   64, 1189,  250,  265,   64,
       63,   63,  251,   64,   63,  251,  253,  253,   64,   64,
       65,  265,   65,   66,   66,   64,   66,   65,  255,  255,

       65,   66,   65,   67,   66,   67,   65,   66,  243,   67,
       66,  243,  254,   67,   68,  254,   68,  243,  262,   67,
      530,   68,  262,  243,   68,   73,   73,   73,   73,   73,
       68,   73,   73,   73,   73,   73,   73,  530,   73,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   82,   93,

       93,   93,   98,   98,   98,   98,  263,   98,   98,   98,
       98,  200,  263,  200,  357,   93,  200,  200,   99,  110,
      110,  110,  357,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,  258,  258,  110, 1188,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   99,   99,   99,   99, 1186,   99,   99,   99,
       99,  103,  103,  103,  103,  103,  103,  103,  266,  266,
      283,   82,   82,   82,   82,  542,   82,   82,   82,   82,
      101,  101,  101,  101,  101,  283,  101,  101,  101,  101,

      101,  101,  542,  101,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  119,  119,  119,  119,
      121,  119,  119,  119,  119,  120,  120,  120,  120, 1185,
      120,  120,  120,  120,  124,  124,  124,  124,  124,  518,
      124,  124,  124,  124,  124,  124,  518,  124,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  268,  268,  121,  121,  121,  121, 1184,  121,
      121,  121,  121,  126,  126,  126,  126,  126,  126,  126,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  133,  133,
      133,  139,  139,  139,  139,  141,  139,  139,  139,  139,
      140,  140,  140,  140,  133,  140,  140,  140,  140,  142,
      142,  142,  142,  142, 1176,  142,  142,  142,  142,  142,
      142,  267,  142,  144,  144,  144,  144,  144,  144,  144,

      248,  395,  248,  248,  267,  141,  141,  141,  141,  395,
      141,  141,  141,  141,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  165,  165, 1175,  165,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  280, 1173,

      280,  165,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  286,  286,  270,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      168,  168,  270,  168,  309,  309,  277,  168,  215,  215,
      215,  215,  215,  215,  215,  277,  168,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  269,  168,  332,  332,  168,  272,  269,  168,  168,

      269,  311,  272,  168,  224,  224,  224,  224,  224,  224,
      224,  168,  274,  311,  168,  274,  168,  168,  168,  281,
      168,  169,  169,  281,  169,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  337,  337, 1170,  169,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  374,  374, 1168,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  178,  178,  193,  193,  260,
      310,  271,  178,  273,  310,  285,  271,  193,  193,  193,
      260,  285,  193,  271,  260, 1167,  203,  203,  271,  271,
      273,  273,  193,  193,  193,  203,  203,  203,  203,  282,
      178,  193,  282,  314,  523,  289,  523,  314,  203,  203,
      203,  203,  203,  203,  212,  212,  212,  212,  289,  212,
      212,  212,  212,  213,  213,  213,  213,  213, 1165,  213,
      213,  213,  213,  213,  213,  532,  213,  221,  221,  221,
      221,  532,  221,  221,  221,  221,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  180,
      180,  278,  180,  284,  284,  279,  180,  279,  543,  278,
      278,  279,  543,  284, 1163,  180,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      276,  180,  287,  519,  180,  287,  288,  180,  180,  302,
      288,  287,  180,  313,  302, 1162,  276,  276,  527,  288,
      180,  519,  313,  180,  547,  180,  180,  180,  527,  180,
      181,  181,  296,  296,  296,  296,  547,  181,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  412,  412, 1161,  181,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      222,  222,  222,  222,  222,  534,  222,  222,  222,  222,
      222,  222,  534,  222,  413,  413, 1160,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  198,  786,  198,  198,  317,  317,
      317,  317,  317,  317,  317,  786,  198,  198,  198,  326,
      198,  198,  198,  516,  326,  449,  328,  328,  328,  308,
      449,  198,  198,  198,  477,  477,  308,  516,  308,  198,

      198,  308,  328,  362,  362,  362,  362,  198,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      231,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  525,  525,  533,  231,  231,  231,
      231,  533,  231,  231,  231,  231,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  305,  305,  305,  305,
      307,  305,  305,  305,  305,  306,  306,  306,  306,  831,
      306,  306,  306,  306,  315,  315,  315,  315,  315,  831,
      315,  315,  315,  315,  315,  315,  528,  315,  319,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  526,  526,
      307,  307,  307,  307,  528,  307,  307,  307,  307,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  333,  333,  333,  338,  338,  338,  338,  559,  338,
      338,  338,  338, 1159,  368,  368,  368,  333,  339,  339,
      339,  339,  339,  559,  339,  339,  339,  339,  339,  339,
      368,  339,  340,  340,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  341,  341,  341,  341,
      341,  341,  341,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  347,  347,  347,  347, 1158,  347,  347,  347,  347,
      348,  348,  348,  348,  348,  544,  348,  348,  348,  348,
      348,  348,  544,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  350,  350,
      350,  350,  350,  350,  350,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  356,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  401,  401,  401,  401,  356,  356,  356,  356,
     1149,  356,  356,  356,  356,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      376,  376,  376,  376, 1145,  376,  376,  376,  376,  377,
      377,  377,  377,  377,  550,  377,  377,  377,  377,  377,
      377,  550,  377,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  379,  379,  379,
      379,  379,  379,  379,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  381,  381,

      381,  381,  381,  381,  381,  381,  381,  381,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  385,  385,  385,  385, 1143,  385,  385,  385,
      385,  386,  386,  386,  386,  386,  558,  386,  386,  386,
      386,  386,  386,  558,  386,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  388,
      388,  388,  388,  388,  388,  388,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  394,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  437,  437,  437,  437,  394,  394,  394,
      394, 1141,  394,  394,  394,  394,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  407,  407,  407,  414,  414,  414,  414, 1136,  414,
      414,  414,  414,  498,  498,  498,  498,  407,  415,  415,
      415,  415,  415,  564,  415,  415,  415,  415,  415,  415,
      564,  415,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  417,  417,  417,  417,
      417,  417,  417,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,  423,  423,  423,  423, 1135,  423,  423,  423,  423,
      424,  424,  424,  424,  424,  587,  424,  424,  424,  424,
      424,  424,  587,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  432,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  436,  436,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  577,  432,  432,  432,  432,  577,  432,  432,  432,
      432,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  450,  450,  581,
      450,  453,  453,  474,  581,  474,  536,  536,  474,  474,

      453,  453,  453,  453,  552,  481,  552,  481,  507,  507,
      507,  507,  517,  453,  453,  453,  453,  453,  453,  454,
      454,  520,  450,  521,  481,  546,  517, 1128,  454,  454,
      454,  454,  481,  546,  554,  520,  554,  521,  468,  468,
      522,  454,  454,  454,  454,  454,  454,  468,  468,  468,
      468,  459,  459,  556,  459,  556,  522,  562,  562,  588,
      468,  468,  468,  468,  468,  468,  588,  459,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  459,  451,  785,  537,  524,  785,  459,
      459,  566,  529,  566,  459,  489,  489,  489,  489,  489,

      489,  489,  459,  524,  537,  459,  529,  459,  459,  459,
      561,  459,  571,  571,  561, 1127,  451,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  539,
      582,  582,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  452,  452,  539,  452,  486,
      486,  486,  486,  531,  486,  486,  486,  486,  555,  568,
      535,  452,  452,  538,  540,  545,  584,  531,  548, 1101,

      452,  452,  452,  452,  535,  568,  555,  538,  540,  545,
      452,  584,  548,  452,  452,  452,  452,  452,  452,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  495,  495,  495,
      495, 1101,  495,  495,  495,  495,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  455,
      455,  835,  455,  469,  469,  551,  567,  569,  614,  573,
      575,  835,  469,  469,  469,  469,  614,  569,  569,  551,
      567,  579,  470,  573,  575,  469,  469,  469,  469,  469,

      469,  470,  470,  572,  455, 1124,  586,  572,  586,  579,
      470,  470,  470,  470,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  470,  470,  470,  470,  470,  470,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  580,  611, 1123,  611,  580,  616,  616,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  456,  456, 1121,  456,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  476,  476,  578,  585,  478,  478,  610,  628,  628,
      610,  476,  476,  476,  578,  478,  476,  478,  456,  610,

      478, 1105,  585,  612,  615,  618,  476,  476,  476,  615,
      478,  617,  478,  617,  612,  476,  618,  629,  629,  478,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  457,  457,  487,
      487,  487,  487,  487,  457,  487,  487,  487,  487,  487,
      487, 1104,  487,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  622,  622,  622,
      622, 1103,  457,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  490,  490,  490,  490,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  630,  630, 1099,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  460,  460,  631,  631,  663,  663, 1093,  460,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  504,  504,  504,  504, 1092,  504,  504,
      504,  504,  644,  644,  644,  644,  460,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  664,  664, 1090,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  466,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  696,  696, 1089,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  467,
      467,  594,  594,  594,  594,  594,  594,  594,  467,  467,
      467,  467,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  467,  467,  467,  467,  467,  467,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  591,  591,  591,  591, 1088,  591,  591,  591,  591,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  592,  592,  592,
      592,  592,  756,  592,  592,  592,  592,  592,  592,  977,
      592,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  756,  513,  513,  513,  513,  977,  513,  513,  513,
      513,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  600,  600,  600,  600,  962,  600,  600,
      600,  600,  601,  601,  601,  601,  601,  962,  601,  601,
      601,  601,  601,  601, 1087,  601,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      603,  603,  603,  603,  603,  603,  603,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  609,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  787,  609,  609,  609,  609,  787,  609,
      609,  609,  609,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  632,
      632,  632,  632,  969,  632,  632,  632,  632,  633,  633,

      633,  633,  633,  969,  633,  633,  633,  633,  633,  633,
     1086,  633,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  635,  635,  635,  635,
      635,  635,  635,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  641,  641,  641,  641, 1084,  641,  641,  641,  641,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  650,  650,  650,  650, 1083,  650,  650,
      650,  650,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      653,  653,  653,  653,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
      660,  665,  665,  665,  665,  755,  665,  665,  665,  665,
      698,  698,  693,  660,  668,  668,  668,  668,  668,  668,

      668,  677,  677,  677,  677,  693,  659,  659,  659,  659,
      755,  659,  659,  659,  659,  666,  666,  666,  666,  666,
      979,  666,  666,  666,  666,  666,  666,  979,  666,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  674,  674,  674,  674, 1082,  674,  674,  674,  674,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,

      675,  675,  675,  675,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  683, 1081,  683,  683,
      683,  683,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      686,  686,  686,  686,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  692,
      699,  699,  699,  699, 1079,  699,  699,  699,  699,  700,

      700,  700,  700,  700,  797,  700,  700,  700,  700,  700,
      700,  772,  700,  750,  750,  772,  692,  692,  692,  692,
      797,  692,  692,  692,  692,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  702,  702,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  708,  708,  708,  708, 1075,  708,
      708,  708,  708,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      717,  717,  717,  717, 1072,  717,  717,  717,  717,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  726,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731, 1006,  729,  729,  782,  753,  782,  753, 1006,  729,
      753,  753,  771,  771,  757,  757,  757,  757,  729,  757,
      757,  757,  757,  760,  760,  760,  760,  781,  781, 1067,
      726,  726,  726,  726,  729,  726,  726,  726,  726,  783,
      729,  729,  775,  778,  780,  729,  791,  783,  775,  793,
      780,  784,  778,  729,  791,  784,  729,  800,  729,  729,
      729,  793,  729,  730,  730,  800,  730,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  790, 1064,  790,  730,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  796, 1062,  796,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  736,  736, 1038,
      794,  798,  806,  737,  737,  794,  736,  736,  736,  736,
      804,  804,  737,  737,  737,  737,  806,  798, 1029,  736,
      736,  736,  736,  736,  736,  737,  737,  737,  737,  737,

      737,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  814, 1025,  814,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  738,  738,  795,  738,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  807,  809,  795,  738,  738,
      809,  819,  811,  819,  742,  742,  821,  738,  738,  738,
      738,  807,  821,  742,  742,  742,  742,  738,  811, 1024,
      738,  738,  738,  738,  738,  738,  742,  742,  742,  742,
      742,  742,  743,  743,  815,  827,  823,  812,  815,  823,
      827,  743,  743,  743,  743,  766,  766,  766,  766,  812,

      766,  766,  766,  766,  743,  743,  743,  743,  743,  743,
      820, 1009,  820,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  739,  739,  810,  739,
      744,  744,  829,  872,  829,  817,  810,  872, 1008,  744,
      744,  744,  744,  767,  767,  767,  767,  817,  767,  767,
      767,  767,  744,  744,  744,  744,  744,  744,  746,  746,
      818,  739,  978,  813,  747,  747,  833,  746,  746,  746,
      746,  813,  818,  747,  747,  747,  747,  833,  824,  978,
      746,  746,  746,  746,  746,  746,  747,  747,  747,  747,
      747,  747,  824,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      740,  740,  822, 1007,  832,  748,  825,  740,  837,  836,
      822,  837,  882,  882,  748,  748,  832,  751,  751,  840,
      825,  836,  841,  748,  748,  748,  748,  751,  839,  751,
      839,  840,  751,  842,  841,  740,  748,  748,  748,  748,
      748,  748,  751,  876,  751,  876,  842,  855,  855,  855,
      855,  751,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,

      980,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  741,  741,  980,  768,  768,  768,
      768,  741,  768,  768,  768,  768,  864,  864,  864,  864,
      741,  741,  846,  846,  846,  846,  846,  846,  846,  741,
      741,  741,  741,  871,  874,  957,  871,  875,  957,  741,
      874,  875,  741,  741,  741,  741,  741,  741,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  769,  769,  769,  769,
     1004,  769,  769,  769,  769,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  745,  745,
      878,  879,  964,  873,  878,  964,  879,  745,  745,  745,
      745,  873,  770,  883,  883,  887,  887,  887,  887, 1003,
      745,  745,  745,  745,  745,  745,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      770,  770,  770,  770,  999,  770,  770,  770,  770,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  843,  843,  843,
      843,  973,  843,  843,  843,  843,  844,  844,  844,  844,

      844,  973,  844,  844,  844,  844,  844,  844,  997,  844,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  852,  852,  852,  852,  990,  852,  852,  852,
      852,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  856,

      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  861,  861,  861,  861,  988,  861,
      861,  861,  861,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  870,  884,  884,  884,
      884,  971,  884,  884,  884,  884,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  899,

      899,  994,  870,  870,  870,  870,  994,  870,  870,  870,
      870,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  893,  893,  893,  893,  897,  893,  893,  893,  893,
      894,  894,  894,  894, 1027,  894,  894,  894,  894,  895,

      895,  895,  895, 1027,  895,  895,  895,  895,  896,  896,
      896,  896,  982,  896,  896,  896,  896,  903,  903,  903,
      903,  915,  915,  946,  946,  897,  897,  897,  897,  982,
      897,  897,  897,  897,  900,  900,  900,  900,  970,  900,
      900,  900,  900,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  909,  909,  909,  909,
      913,  909,  909,  909,  909,  910,  910,  910,  910, 1091,
      910,  910,  910,  910,  911,  911,  911,  911, 1091,  911,
      911,  911,  911,  912,  912,  912,  912,  960,  912,  912,
      912,  912,  919,  919,  919,  919,  961,  961,  996,  960,
      913,  913,  913,  913,  996,  913,  913,  913,  913,  916,
      916,  916,  916,  968,  916,  916,  916,  916,  917,  917,

      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  925,  925,  925,  925, 1058,  925,  925,  925,  925,

      926,  926,  926,  926,  929,  926,  926,  926,  926,  927,
      927,  927,  927, 1058,  927,  927,  927,  927,  928,  928,
      928,  928,  965,  928,  928,  928,  928,  963,  963,  929,
      929,  929,  929, 1063,  929,  929,  929,  929,  930,  930,
     1063,  930,  932,  932,  966,  966,  991,  967,  972,  972,
      991,  932,  932,  932,  932,  950,  950,  950,  950,  967,
      950,  950,  950,  950,  932,  932,  932,  932,  932,  932,
      933,  933, 1066,  930,  974,  974,  934,  934, 1066,  933,
      933,  933,  933,  981,  981,  934,  934,  934,  934,  983,
      983,  995,  933,  933,  933,  933,  933,  933,  934,  934,

      934,  934,  934,  934,  951,  951,  951,  951,  995,  951,
      951,  951,  951,  984,  984,  986,  992,  992,  986,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  931,  931,  985,  931,  953,  953,  953,  953,
      987,  953,  953,  953,  953, 1002,  985,  976,  931,  931,
     1001,  952,  987, 1001,  936,  936,  959,  931,  931,  931,
      931,  976, 1002,  936,  936,  936,  936,  931,  993,  993,
      931,  931,  931,  931,  931,  931,  936,  936,  936,  936,
      936,  936,  937,  937,  989,  998,  989, 1000, 1000,  998,
     1065,  937,  937,  937,  937,  952,  952,  952,  952,  958,

      952,  952,  952,  952,  937,  937,  937,  937,  937,  937,
     1005, 1005, 1065,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  935,  935, 1013, 1013,
     1013, 1013,  941,  941,  956,  935,  935,  935,  935, 1026,
      955,  941,  941,  941,  941, 1030, 1030, 1026,  935,  935,
      935,  935,  935,  935,  941,  941,  941,  941,  941,  941,
      975, 1057, 1028, 1057,  975, 1028, 1031, 1031, 1010, 1010,
     1010, 1010,  975, 1010, 1010, 1010, 1010,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  938,  938, 1073,  938, 1016, 1016, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1032, 1033, 1073,  938,  938,  914,
     1033,  954, 1032,  943,  943,  898,  938,  938,  938,  938,
     1041,  881,  943,  943,  943,  943,  938,  880, 1041,  938,
      938,  938,  938,  938,  938,  943,  943,  943,  943,  943,
      943,  944,  944, 1055, 1055, 1069, 1069, 1074, 1056, 1074,
      944,  944,  944,  944,  954,  954,  954,  954, 1056,  954,
      954,  954,  954,  944,  944,  944,  944,  944,  944, 1070,
     1070,  877,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  939,  939, 1059, 1019, 1019,
     1019, 1019,  939, 1019, 1019, 1019, 1019, 1059,  945, 1068,

     1077,  939,  939, 1077, 1060, 1061, 1068,  945,  945,  851,
      939,  939,  939,  939, 1071, 1071,  945,  945,  945,  945,
      939, 1060, 1061,  939,  939,  939,  939,  939,  939,  945,
      945,  945,  945,  945,  945, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1106, 1106,  849,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  940,
      940, 1076, 1020, 1020, 1020, 1020,  940, 1020, 1020, 1020,
     1020, 1076, 1078, 1080, 1122,  940,  940, 1122,  947,  947,

      838, 1085, 1094, 1080,  940,  940,  940,  940,  947, 1078,
      947, 1085, 1094,  947,  940, 1098, 1095,  940,  940,  940,
      940,  940,  940,  947, 1098,  947, 1095, 1125, 1130, 1130,
     1125,  834,  947, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1021, 1021, 1021,
     1021, 1100, 1021, 1021, 1021, 1021, 1120,  830, 1100, 1119,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  942,  942,  828, 1119, 1102, 1120, 1132,
     1132,  826,  942,  942,  942,  942, 1022, 1022, 1022, 1022,
     1102, 1022, 1022, 1022, 1022,  942,  942,  942,  942,  942,

      942, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1034, 1034, 1034, 1034, 1146,
     1034, 1034, 1034, 1034,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1023, 1035, 1035, 1035,
     1035, 1146, 1035, 1035, 1035, 1035, 1036, 1036, 1036, 1036,
     1133, 1036, 1036, 1036, 1036, 1037, 1037, 1037, 1037, 1144,
     1037, 1037, 1037, 1037, 1144, 1133,  816, 1023, 1023, 1023,

     1023,  808, 1023, 1023, 1023, 1023, 1039, 1039, 1039, 1039,
     1126, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040, 1131,
     1040, 1040, 1040, 1040, 1042, 1042, 1129, 1126, 1139, 1131,
     1043, 1043, 1171, 1042, 1042, 1042, 1042,  805, 1139, 1043,
     1043, 1043, 1043, 1129, 1138, 1171, 1042, 1042, 1042, 1042,
     1042, 1042, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044,
     1134, 1137, 1140, 1134, 1137, 1140, 1138, 1044, 1044, 1044,
     1044, 1096, 1096, 1096, 1096,  803, 1096, 1096, 1096, 1096,
     1044, 1044, 1044, 1044, 1044, 1044, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,

     1046, 1046, 1142, 1147,  802, 1142, 1047, 1047,  801, 1046,
     1046, 1046, 1046, 1148,  799, 1047, 1047, 1047, 1047, 1169,
     1148, 1169, 1046, 1046, 1046, 1046, 1046, 1046, 1047, 1047,
     1047, 1047, 1047, 1047, 1048, 1048,  792, 1048, 1097, 1097,
     1097, 1097,  789, 1097, 1097, 1097, 1097, 1174, 1174, 1164,
     1048, 1048, 1164, 1177,  788, 1147, 1049, 1049,  779, 1048,
     1048, 1048, 1048, 1187, 1187, 1049, 1049, 1049, 1049, 1048,
      777,  776, 1048, 1048, 1048, 1048, 1048, 1048, 1049, 1049,
     1049, 1049, 1049, 1049, 1050, 1050, 1166,  774, 1172, 1166,
     1172,  773,  728, 1050, 1050, 1050, 1050, 1196,  727,  707,

      705,  695,  694,  673,  671, 1177, 1050, 1050, 1050, 1050,
     1050, 1050,  662,  661,  640, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1051, 1051,
      638,  619,  613,  608, 1052, 1052,  606, 1051, 1051, 1051,
     1051,  599,  597, 1052, 1052, 1052, 1052,  590,  589, 1196,
     1051, 1051, 1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052,
     1052, 1052, 1053, 1053,  583,  576,  574,  570,  565,  563,
      560, 1053, 1053, 1053, 1053,  557,  553,  549,  541,  514,
      494, 1054,  492,  485, 1053, 1053, 1053, 1053, 1053, 1053,
     1054, 1054,  484,  434,  433,  431, 1107, 1107,  429, 1054,

     1054, 1054, 1054,  422,  420, 1107, 1107, 1107, 1107,  411,
      410,  409, 1054, 1054, 1054, 1054, 1054, 1054, 1107, 1107,
     1107, 1107, 1107, 1107, 1108, 1108,  398,  397,  393,  391,
     1109, 1109,  384, 1108, 1108, 1108, 1108,  382,  371, 1109,
     1109, 1109, 1109,  370,  359,  358, 1108, 1108, 1108, 1108,
     1108, 1108, 1109, 1109, 1109, 1109, 1109, 1109, 1110, 1110,
      355,  353,  346,  344, 1111, 1111,  336, 1110, 1110, 1110,
     1110,  335,  331, 1111, 1111, 1111, 1111,  330,  322,  320,
     1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111,
     1111, 1111, 1112, 1112,  312,  293,  292,  259, 1113, 1113,

      256, 1112, 1112, 1112, 1112,  245,  235, 1113, 1113, 1113,
     1113,  234,  229,  227, 1112, 1112, 1112, 1112, 1112, 1112,
     1113, 1113, 1113, 1113, 1113, 1113, 1114, 1114,  220,  218,
      211,  209, 1115, 1115,  205, 1114, 1114, 1114, 1114,  162,
      158, 1115, 1115, 1115, 1115,  155,  152,  149, 1114, 1114,
     1114, 1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115,
     1116, 1116,  147,  137,  135,  131,  129,  123,  118, 1116,
     1116, 1116, 1116,  117,  114,  113,  112,  108,  106, 1117,
       96,   95, 1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117,
       91,   90,   85,   80,   78,   49,   44, 1117, 1117, 1117,

     1117,   42,   39,   31,   26,   24,   23, 1118,   21,   19,
     1117, 1117, 1117, 1117, 1117, 1117, 1118, 1118,    0,    0,
        0,    0, 1150, 1150,    0, 1118, 1118, 1118, 1118,    0,
        0, 1150, 1150, 1150, 1150,    0,    0,    0, 1118, 1118,
     1118, 1118, 1118, 1118, 1150, 1150, 1150, 1150, 1150, 1150,
     1151, 1151,    0,    0,    0,    0, 1152, 1152,    0, 1151,
     1151, 1151, 1151,    0,    0, 1152, 1152, 1152, 1152,    0,
        0,    0, 1151, 1151, 1151, 1151, 1151, 1151, 1152, 1152,
     1152, 1152, 1152, 1152, 1153, 1153,    0,    0,    0,    0,
     1154, 1154,    0, 1153, 1153, 1153, 1153,    0,    0, 1154,

     1154, 1154, 1154,    0,    0,    0, 1153, 1153, 1153, 1153,
     1153, 1153, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155,
        0,    0,    0,    0, 1156, 1156,    0, 1155, 1155, 1155,
     1155,    0,    0, 1156, 1156, 1156, 1156,    0,    0,    0,
     1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156, 1156,
     1156, 1156, 1157, 1157,    0,    0,    0,    0, 1178, 1178,
        0, 1157, 1157, 1157, 1157,    0,    0, 1178, 1178, 1178,
     1178,    0,    0,    0, 1157, 1157, 1157, 1157, 1157, 1157,
     1178, 1178, 1178, 1178, 1178, 1178, 1179, 1179,    0,    0,
        0,    0, 1180, 1180,    0, 1179, 1179, 1179, 1179,    0,

        0, 1180, 1180, 1180, 1180,    0,    0,    0, 1179, 1179,
     1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180, 1180,
     1181, 1181,    0,    0,    0,    0, 1182, 1182,    0, 1181,
     1181, 1181, 1181,    0,    0, 1182, 1182, 1182, 1182,    0,
        0,    0, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182,
     1182, 1182, 1182, 1182, 1183, 1183,    0,    0,    0,    0,
     1191, 1191,    0, 1183, 1183, 1183, 1183,    0,    0, 1191,
     1191, 1191, 1191,    0,    0,    0, 1183, 1183, 1183, 1183,
     1183, 1183, 1191, 1191, 1191, 1191, 1191, 1191, 1192, 1192,
        0,    0,    0,    0, 1193, 1193,    0, 1192, 1192, 1192,

     1192,    0,    0, 1193, 1193, 1193, 1193,    0,    0,    0,
     1192, 1192, 1192, 1192, 1192, 1192, 1193, 1193, 1193, 1193,
     1193, 1193, 1194, 1194,    0,    0,    0,    0, 1197, 1197,
        0, 1194, 1194, 1194, 1194,    0,    0, 1197, 1197, 1197,
     1197,    0,    0,    0, 1194, 1194, 1194, 1194, 1194, 1194,
     1197, 1197, 1197, 1197, 1197, 1197, 1198, 1198,    0,    0,
        0,    0, 1200, 1200,    0, 1198, 1198, 1198, 1198,    0,
        0, 1200, 1200, 1200, 1200,    0,    0,    0, 1198, 1198,
     1198, 1198, 1198, 1198, 1200, 1200, 1200, 1200, 1200, 1200,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203,

     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1209,    0,    0,    0,    0, 1209, 1209,
     1210, 1210, 1210, 1211,    0, 1211, 1211,    0, 1211, 1211,
     1211, 1211, 1212,    0, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1213, 1213, 1214, 1214, 1214, 1215, 1215, 1216, 1216,
     1216, 1217,    0,    0, 1217, 1217, 1217, 1217, 1217, 1217,

     1218, 1218, 1219, 1219, 1219, 1220,    0, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1221,    0, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1222,    0, 1222,    0, 1222, 1222, 1222,
     1222, 1222, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,
     1223, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226,
        0, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228,
     1229, 1229, 1229, 1230, 1230, 1231, 1231, 1231, 1232,    0,
     1232, 1232,    0, 1232, 1232, 1232, 1232, 1233,    0, 1233,

     1233,    0,    0, 1233, 1233, 1233, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1236, 1236, 1236, 1237, 1237, 1237,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1239,
     1239, 1239, 1240, 1240, 1240, 1241,    0, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1243, 1243, 1243, 1244, 1244, 1244, 1245,
        0, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1246,    0,
     1246, 1246, 1246, 1246, 1246, 1246, 1246, 1247,    0, 1247,
        0, 1247, 1247, 1247, 1247, 1247, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1250, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1251,    0, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1252, 1252, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1254, 1254, 1254, 1255, 1255, 1255, 1256,
     1256, 1256, 1257, 1257, 1257, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1262, 1262, 1262, 1263, 1263, 1263, 1264, 1264, 1264,

     1264, 1264, 1264, 1264, 1264, 1264, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1266, 1266, 1266, 1267, 1267,
     1267, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270,
     1270, 1270, 1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1275, 1275, 1275, 1276, 1276, 1276, 1277, 1277,
     1277, 1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1280, 1280, 1280, 1280, 1280, 1280, 1280,

     1280, 1280, 1281, 1281, 1281, 1282, 1282, 1282, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1284, 1284, 1284,
     1285, 1285, 1285, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
     1286, 1286, 1287, 1287, 1287, 1288, 1288, 1288, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1292, 1292, 1292, 1293, 1293,
     1293, 1294, 1294, 1294, 1295, 1295, 1295, 1296, 1296, 1296,
     1297, 1297, 1297, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "csharp_lexer.ll"
#line 2 "csharp_lexer.ll"
/*****************************************************************************
 * This file is part of KDevelop.                                            *
 * Copyright (c) 2005, 2006 Jakob Petsovits <jpetso@gmx.at>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/


#include "csharp.h"
#include "csharp_pp.h"

#include <iostream>

/* call this before calling yylex(): */
void lexer_restart(csharp::parser* parser);

extern std::size_t _G_token_begin, _G_token_end;
extern char *_G_contents;



/* the rest of these declarations are internal to the lexer,
 * don't use them outside of this file. */

namespace
{
  std::size_t _G_current_offset;
  csharp::parser* _G_parser;
  csharp_pp::scope* _G_pp_root_scope;
}

// retrieves the upper-most pre-processor scope
csharp_pp::scope* pp_current_scope();

// to be called from within <<EOF>> rules to free memory and report open scopes
void cleanup();


#define YY_INPUT(buf, result, max_size) \
  { \
    int c = _G_contents[_G_current_offset++]; \
    result = c == 0 ? YY_NULL : (buf[0] = c, 1); \
  }

#define YY_USER_INIT \
_G_token_begin = _G_token_end = 0; \
_G_current_offset = 0; \
\
unsigned char *contents = (unsigned char *) _G_contents; \
if (contents[0] == 0xEF && contents[1] == 0xBB && contents[2] == 0xBF) { \
  _G_token_begin = _G_token_end = 3; \
  _G_current_offset = 3; \
} // check for and ignore the UTF-8 byte order mark

#define YY_USER_ACTION \
_G_token_begin = _G_token_end; \
_G_token_end += yyleng;

// This is meant to be called with the first token in a pre-processor line.
// Pre-processing completely bypasses the normal tokenizing process.
#define PP_PROCESS_TOKEN(t) \
  { \
    csharp_pp::parser pp_parser; \
    csharp_pp::parser::pp_parse_result result = \
      pp_parser.pp_parse_line( csharp_pp::parser::Token_##t, pp_current_scope() ); \
    \
    if (result == csharp_pp::parser::result_eof) \
      { \
        BEGIN(INITIAL); \
        return 0; /* end of file */  \
      } \
    else if (result == csharp_pp::parser::result_invalid) \
      { \
        BEGIN(INITIAL); \
        return csharp::parser::Token_INVALID; \
      } \
    else if (result == csharp_pp::parser::result_ok) \
      { \
        if (pp_current_scope()->is_active()) \
          BEGIN(INITIAL); \
        else \
          BEGIN(PP_SKIPPED_SECTION_PART); \
      } \
  }

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* 0x0041-0x005a, 0x005f, 0x0061-0x007a: one byte in UTF-8 */
/* 0x00c0-0x00d6, 0x00d8-0x00f6, 0x00f8-0x00ff */
/* 0x0100-0x1fff */
/* 0x3040-0x318f */
/* 0x3300-0x337f */
/* 0x3400-0x3d2d */
/* 0x4e00-0x9fff */
/* 0xf900-0xfaff */
/* 0x0080-0xffff */
/* 0x10000-0x10ffff */
/* Unicode characters above 0x10ffff are not supported by C#. */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* 0x2028 and 0x2029, currently unused in this lexer
for performance and convenience reasons. */
/* non-Unicode stuff */








#line 2853 "csharp_lexer.cc"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1
#define PP_EXPECT_NEW_LINE 2
#define PP_DECLARATION 3
#define PP_IF_CLAUSE 4
#define PP_LINE 5
#define PP_MESSAGE 6
#define PP_PRAGMA 7
#define PP_SKIPPED_SECTION_PART 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 188 "csharp_lexer.ll"


 /* whitespace, newlines and comments */

#line 3020 "csharp_lexer.cc"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1202 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8384 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 192 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 193 "csharp_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 195 "csharp_lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 197 "csharp_lexer.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 199 "csharp_lexer.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 200 "csharp_lexer.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 201 "csharp_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 202 "csharp_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 203 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      "Encountered end of file in an unclosed block comment" );
    cleanup();
    return csharp::parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 9:
YY_RULE_SETUP
#line 214 "csharp_lexer.ll"
return csharp::parser::Token_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 215 "csharp_lexer.ll"
return csharp::parser::Token_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 216 "csharp_lexer.ll"
return csharp::parser::Token_LBRACE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 217 "csharp_lexer.ll"
return csharp::parser::Token_RBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 218 "csharp_lexer.ll"
return csharp::parser::Token_LBRACKET;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 219 "csharp_lexer.ll"
return csharp::parser::Token_RBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 220 "csharp_lexer.ll"
return csharp::parser::Token_COMMA;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 221 "csharp_lexer.ll"
return csharp::parser::Token_SEMICOLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 222 "csharp_lexer.ll"
return csharp::parser::Token_DOT;
	YY_BREAK
/* operators */
case 18:
YY_RULE_SETUP
#line 227 "csharp_lexer.ll"
return csharp::parser::Token_COLON;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 228 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility ) {
      return csharp::parser::Token_SCOPE;
    }
    else {
      _G_parser->report_problem( csharp::parser::error,
        "Global alias access (with \"::\") is not supported by C# 1.0" );
      return csharp::parser::Token_INVALID;
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 238 "csharp_lexer.ll"
return csharp::parser::Token_QUESTION;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 239 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility ) {
      return csharp::parser::Token_QUESTIONQUESTION;
    }
    else {
      _G_parser->report_problem( csharp::parser::error,
        "Null coalescing expressions (with \"??\") are not supported by C# 1.0" );
      return csharp::parser::Token_INVALID;
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 249 "csharp_lexer.ll"
return csharp::parser::Token_BANG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 250 "csharp_lexer.ll"
return csharp::parser::Token_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 251 "csharp_lexer.ll"
return csharp::parser::Token_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 252 "csharp_lexer.ll"
return csharp::parser::Token_LESS_THAN;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 253 "csharp_lexer.ll"
return csharp::parser::Token_LESS_EQUAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 254 "csharp_lexer.ll"
return csharp::parser::Token_GREATER_THAN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 255 "csharp_lexer.ll"
return csharp::parser::Token_GREATER_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 256 "csharp_lexer.ll"
return csharp::parser::Token_NOT_EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 257 "csharp_lexer.ll"
return csharp::parser::Token_LOG_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 258 "csharp_lexer.ll"
return csharp::parser::Token_LOG_OR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 259 "csharp_lexer.ll"
return csharp::parser::Token_ARROW_RIGHT; // TODO: new in 2.0 or not?
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 260 "csharp_lexer.ll"
return csharp::parser::Token_INCREMENT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 261 "csharp_lexer.ll"
return csharp::parser::Token_DECREMENT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 262 "csharp_lexer.ll"
return csharp::parser::Token_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 263 "csharp_lexer.ll"
return csharp::parser::Token_PLUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 264 "csharp_lexer.ll"
return csharp::parser::Token_PLUS_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 265 "csharp_lexer.ll"
return csharp::parser::Token_MINUS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 266 "csharp_lexer.ll"
return csharp::parser::Token_MINUS_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 267 "csharp_lexer.ll"
return csharp::parser::Token_STAR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 268 "csharp_lexer.ll"
return csharp::parser::Token_STAR_ASSIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 269 "csharp_lexer.ll"
return csharp::parser::Token_SLASH;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 270 "csharp_lexer.ll"
return csharp::parser::Token_SLASH_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 271 "csharp_lexer.ll"
return csharp::parser::Token_BIT_AND;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 272 "csharp_lexer.ll"
return csharp::parser::Token_BIT_AND_ASSIGN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 273 "csharp_lexer.ll"
return csharp::parser::Token_BIT_OR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 274 "csharp_lexer.ll"
return csharp::parser::Token_BIT_OR_ASSIGN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 275 "csharp_lexer.ll"
return csharp::parser::Token_BIT_XOR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 276 "csharp_lexer.ll"
return csharp::parser::Token_BIT_XOR_ASSIGN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 277 "csharp_lexer.ll"
return csharp::parser::Token_REMAINDER;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 278 "csharp_lexer.ll"
return csharp::parser::Token_REMAINDER_ASSIGN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 279 "csharp_lexer.ll"
return csharp::parser::Token_LSHIFT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 280 "csharp_lexer.ll"
return csharp::parser::Token_LSHIFT_ASSIGN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 281 "csharp_lexer.ll"
return csharp::parser::Token_RSHIFT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 282 "csharp_lexer.ll"
return csharp::parser::Token_RSHIFT_ASSIGN;
	YY_BREAK
/* reserved words */
case 56:
YY_RULE_SETUP
#line 287 "csharp_lexer.ll"
return csharp::parser::Token_ABSTRACT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 288 "csharp_lexer.ll"
return csharp::parser::Token_AS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 289 "csharp_lexer.ll"
return csharp::parser::Token_BASE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 290 "csharp_lexer.ll"
return csharp::parser::Token_BOOL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 291 "csharp_lexer.ll"
return csharp::parser::Token_BREAK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 292 "csharp_lexer.ll"
return csharp::parser::Token_BYTE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 293 "csharp_lexer.ll"
return csharp::parser::Token_CASE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 294 "csharp_lexer.ll"
return csharp::parser::Token_CATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 295 "csharp_lexer.ll"
return csharp::parser::Token_CHAR;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 296 "csharp_lexer.ll"
return csharp::parser::Token_CHECKED;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 297 "csharp_lexer.ll"
return csharp::parser::Token_CLASS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 298 "csharp_lexer.ll"
return csharp::parser::Token_CONST;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 299 "csharp_lexer.ll"
return csharp::parser::Token_CONTINUE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 300 "csharp_lexer.ll"
return csharp::parser::Token_DECIMAL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 301 "csharp_lexer.ll"
return csharp::parser::Token_DEFAULT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 302 "csharp_lexer.ll"
return csharp::parser::Token_DELEGATE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 303 "csharp_lexer.ll"
return csharp::parser::Token_DO;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 304 "csharp_lexer.ll"
return csharp::parser::Token_DOUBLE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 305 "csharp_lexer.ll"
return csharp::parser::Token_ELSE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 306 "csharp_lexer.ll"
return csharp::parser::Token_ENUM;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 307 "csharp_lexer.ll"
return csharp::parser::Token_EVENT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 308 "csharp_lexer.ll"
return csharp::parser::Token_EXPLICIT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 309 "csharp_lexer.ll"
return csharp::parser::Token_EXTERN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 310 "csharp_lexer.ll"
return csharp::parser::Token_FALSE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 311 "csharp_lexer.ll"
return csharp::parser::Token_FINALLY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 312 "csharp_lexer.ll"
return csharp::parser::Token_FIXED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 313 "csharp_lexer.ll"
return csharp::parser::Token_FLOAT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 314 "csharp_lexer.ll"
return csharp::parser::Token_FOR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 315 "csharp_lexer.ll"
return csharp::parser::Token_FOREACH;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 316 "csharp_lexer.ll"
return csharp::parser::Token_GOTO;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 317 "csharp_lexer.ll"
return csharp::parser::Token_IF;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 318 "csharp_lexer.ll"
return csharp::parser::Token_IMPLICIT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 319 "csharp_lexer.ll"
return csharp::parser::Token_IN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 320 "csharp_lexer.ll"
return csharp::parser::Token_INT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 321 "csharp_lexer.ll"
return csharp::parser::Token_INTERFACE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 322 "csharp_lexer.ll"
return csharp::parser::Token_INTERNAL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 323 "csharp_lexer.ll"
return csharp::parser::Token_IS;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 324 "csharp_lexer.ll"
return csharp::parser::Token_LOCK;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 325 "csharp_lexer.ll"
return csharp::parser::Token_LONG;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 326 "csharp_lexer.ll"
return csharp::parser::Token_NAMESPACE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 327 "csharp_lexer.ll"
return csharp::parser::Token_NEW;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 328 "csharp_lexer.ll"
return csharp::parser::Token_NULL;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 329 "csharp_lexer.ll"
return csharp::parser::Token_OBJECT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 330 "csharp_lexer.ll"
return csharp::parser::Token_OPERATOR;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 331 "csharp_lexer.ll"
return csharp::parser::Token_OUT;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 332 "csharp_lexer.ll"
return csharp::parser::Token_OVERRIDE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 333 "csharp_lexer.ll"
return csharp::parser::Token_PARAMS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 334 "csharp_lexer.ll"
return csharp::parser::Token_PRIVATE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 335 "csharp_lexer.ll"
return csharp::parser::Token_PROTECTED;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 336 "csharp_lexer.ll"
return csharp::parser::Token_PUBLIC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 337 "csharp_lexer.ll"
return csharp::parser::Token_READONLY;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 338 "csharp_lexer.ll"
return csharp::parser::Token_REF;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 339 "csharp_lexer.ll"
return csharp::parser::Token_RETURN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 340 "csharp_lexer.ll"
return csharp::parser::Token_SBYTE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 341 "csharp_lexer.ll"
return csharp::parser::Token_SEALED;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 342 "csharp_lexer.ll"
return csharp::parser::Token_SHORT;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 343 "csharp_lexer.ll"
return csharp::parser::Token_SIZEOF;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 344 "csharp_lexer.ll"
return csharp::parser::Token_STACKALLOC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 345 "csharp_lexer.ll"
return csharp::parser::Token_STATIC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 346 "csharp_lexer.ll"
return csharp::parser::Token_STRING;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 347 "csharp_lexer.ll"
return csharp::parser::Token_STRUCT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 348 "csharp_lexer.ll"
return csharp::parser::Token_SWITCH;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 349 "csharp_lexer.ll"
return csharp::parser::Token_THIS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 350 "csharp_lexer.ll"
return csharp::parser::Token_THROW;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 351 "csharp_lexer.ll"
return csharp::parser::Token_TRUE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 352 "csharp_lexer.ll"
return csharp::parser::Token_TRY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 353 "csharp_lexer.ll"
return csharp::parser::Token_TYPEOF;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 354 "csharp_lexer.ll"
return csharp::parser::Token_UINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 355 "csharp_lexer.ll"
return csharp::parser::Token_ULONG;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 356 "csharp_lexer.ll"
return csharp::parser::Token_UNCHECKED;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 357 "csharp_lexer.ll"
return csharp::parser::Token_UNSAFE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 358 "csharp_lexer.ll"
return csharp::parser::Token_USHORT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 359 "csharp_lexer.ll"
return csharp::parser::Token_USING;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 360 "csharp_lexer.ll"
return csharp::parser::Token_VIRTUAL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 361 "csharp_lexer.ll"
return csharp::parser::Token_VOID;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 362 "csharp_lexer.ll"
return csharp::parser::Token_VOLATILE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 363 "csharp_lexer.ll"
return csharp::parser::Token_WHILE;
	YY_BREAK
/* Non-keyword identifiers. They only have special meaning in
  * specific contexts and are treated as identifiers otherwise.
  * Many of those have been introduced by C# 2.0. */
case 133:
YY_RULE_SETUP
#line 370 "csharp_lexer.ll"
return csharp::parser::Token_ADD;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 371 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility )
      return csharp::parser::Token_ALIAS;
    else
      return csharp::parser::Token_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 377 "csharp_lexer.ll"
return csharp::parser::Token_GET;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 378 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility )
      return csharp::parser::Token_GLOBAL;
    else
      return csharp::parser::Token_IDENTIFIER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 384 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility )
      return csharp::parser::Token_PARTIAL;
    else
      return csharp::parser::Token_IDENTIFIER;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 390 "csharp_lexer.ll"
return csharp::parser::Token_REMOVE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 391 "csharp_lexer.ll"
return csharp::parser::Token_SET;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 392 "csharp_lexer.ll"
return csharp::parser::Token_VALUE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 393 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility )
      return csharp::parser::Token_WHERE;
    else
      return csharp::parser::Token_IDENTIFIER;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 399 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility )
      return csharp::parser::Token_YIELD;
    else
      return csharp::parser::Token_IDENTIFIER;
}
	YY_BREAK
/* A non-keyword identifier that is not marked as such by the specification,
  * for global attributes: */
case 143:
YY_RULE_SETUP
#line 408 "csharp_lexer.ll"
return csharp::parser::Token_ASSEMBLY;
	YY_BREAK
/* characters and strings */
case 144:
YY_RULE_SETUP
#line 413 "csharp_lexer.ll"
return csharp::parser::Token_CHARACTER_LITERAL;
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 414 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      std::string("Invalid character literal: ") + yytext );
    return csharp::parser::Token_CHARACTER_LITERAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 420 "csharp_lexer.ll"
return csharp::parser::Token_STRING_LITERAL;
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 421 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      std::string("Invalid string literal: ") + yytext );
    return csharp::parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* verbatim strings: */
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 427 "csharp_lexer.ll"
return csharp::parser::Token_STRING_LITERAL;
	YY_BREAK
/* the pre-processor */

case 149:
YY_RULE_SETUP
#line 434 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_DEFINE);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 435 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_UNDEF);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 436 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_IF);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 437 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_ELIF);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 438 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ELSE);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 439 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ENDIF);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 440 "csharp_lexer.ll"
BEGIN(PP_LINE);            PP_PROCESS_TOKEN(PP_LINE);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 441 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ERROR);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 442 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_WARNING);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 443 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_REGION);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 444 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ENDREGION);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 445 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::parser::csharp20_compatibility ) {
      BEGIN(PP_PRAGMA); PP_PROCESS_TOKEN(PP_PRAGMA);
    }
    else {
      BEGIN(INITIAL);
      _G_parser->report_problem( csharp::parser::error,
        "#pragma directives are not supported by C# 1.0" );
      return csharp::parser::Token_INVALID;
    }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 456 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      std::string("Invalid pre-processor directive: ``") + yytext + "''" );
    return csharp::parser::Token_INVALID;
}
	YY_BREAK


case YY_STATE_EOF(PP_EXPECT_NEW_LINE):
case YY_STATE_EOF(PP_DECLARATION):
case YY_STATE_EOF(PP_IF_CLAUSE):
case YY_STATE_EOF(PP_LINE):
case YY_STATE_EOF(PP_MESSAGE):
case YY_STATE_EOF(PP_PRAGMA):
#line 464 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::warning,
      "No newline at the end of the file" );
    return csharp_pp::parser::Token_EOF;
}
	YY_BREAK


case 162:
YY_RULE_SETUP
#line 472 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 473 "csharp_lexer.ll"
/* before an unexpected EOF, skip */ ;
	YY_BREAK


case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 478 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 479 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 166:
YY_RULE_SETUP
#line 483 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::parser::error,
      "You may not define ``true'' or ``false'' with #define or #undef" );
    return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL;  // we could do Token_INVALID here,
    // but this way the error is shown and the parser continues, I prefer this.
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 489 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL; // ...including keywords
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 490 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 491 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 170:
YY_RULE_SETUP
#line 495 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_EQUAL;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 496 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NOT_EQUAL;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 497 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LOG_AND;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 498 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LOG_OR;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 499 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_BANG;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 500 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_TRUE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 501 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_FALSE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 502 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LPAREN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 503 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_RPAREN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 504 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL;
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 505 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 506 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


/* splitting the line at "#" keeps the token shorter than real directives, */
/* so that those are recognized and not taken as skipped text as well.     */
case 182:
YY_RULE_SETUP
#line 512 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 513 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 514 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK


case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 518 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 519 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LINE_NUMBER;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 520 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_FILE_NAME;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 521 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_DEFAULT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 522 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_IDENTIFIER_OR_KEYWORD;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 523 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 527 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_MESSAGE;
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 528 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK


case 193:
YY_RULE_SETUP
#line 532 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_PRAGMA_TEXT;
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 533 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK

/* identifiers and number literals */
case 195:
YY_RULE_SETUP
#line 539 "csharp_lexer.ll"
return csharp::parser::Token_IDENTIFIER;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 541 "csharp_lexer.ll"
return csharp::parser::Token_INTEGER_LITERAL;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 542 "csharp_lexer.ll"
return csharp::parser::Token_REAL_LITERAL;
	YY_BREAK
/* everything else is not a valid lexeme */
case 198:
YY_RULE_SETUP
#line 547 "csharp_lexer.ll"
return csharp::parser::Token_INVALID;
	YY_BREAK
/* some additional checking for unclosed #ifs and #regions at the EOF */

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP_SKIPPED_SECTION_PART):
#line 553 "csharp_lexer.ll"
{
  cleanup();
  return csharp::parser::Token_EOF;
}
	YY_BREAK

case 199:
YY_RULE_SETUP
#line 559 "csharp_lexer.ll"
ECHO;
	YY_BREAK
#line 4251 "csharp_lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1202 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1202 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1201);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 559 "csharp_lexer.ll"



void lexer_restart(csharp::parser* parser) {
  _G_parser = parser;
  _G_pp_root_scope = 0;
  yyrestart(NULL);
  BEGIN(INITIAL); // is not set automatically by yyrestart()
  YY_USER_INIT
}

csharp_pp::scope* pp_current_scope()
{
  if (_G_pp_root_scope == 0)
    {
      _G_pp_root_scope = new csharp_pp::scope(_G_parser);
    }
  return _G_pp_root_scope->current_scope();
}

void cleanup()
{
  // check for open scopes, and pop them / report errors as needed
  if (_G_pp_root_scope != 0)
    {
      csharp_pp::scope* current_scope = pp_current_scope();
      csharp_pp::scope::scope_type scope_type = current_scope->type();

      while (scope_type != csharp_pp::scope::type_root)
        {
          if (scope_type == csharp_pp::scope::type_if)
            {
              _G_parser->report_problem( csharp::parser::error,
                "Encountered end of file in an unclosed #if/#elif/#else section" );
            }
          else if (scope_type == csharp_pp::scope::type_region)
            {
              _G_parser->report_problem( csharp::parser::error,
                "Encountered end of file in an unclosed #region section" );
            }

          if ( !current_scope->pop_scope(scope_type, &current_scope) )
            break;

          scope_type = current_scope->type();
        }

      delete _G_pp_root_scope;
      _G_pp_root_scope = 0;
    }
}

int yywrap() { return 1; }

