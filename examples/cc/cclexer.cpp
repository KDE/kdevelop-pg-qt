#line 2 "cclexer.cpp"

#line 4 "cclexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int cc::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[706] =
    {   0,
        0,    0,    6,    6,   95,   93,    1,    2,   22,   93,
        4,   90,   49,   43,   93,   10,   11,   39,   35,   16,
       37,   18,   41,   91,   91,   20,   17,   25,   34,   27,
       21,   14,   15,   47,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   12,
       45,   13,   23,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,    6,    8,    7,    1,   29,    0,   89,
       88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,   90,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   50,   30,   44,    0,   87,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
       32,   36,   33,   38,   19,    0,   92,    0,    0,    0,
        0,    0,    5,    3,   42,   92,   91,    0,   92,   92,
       91,    0,    0,    0,    0,    0,    0,   91,    0,    0,
        0,    0,    0,   51,   26,   24,   28,   53,   48,   90,
       90,   90,   90,   90,   90,   60,   90,   90,   90,   90,
       90,   90,   65,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   46,   31,   90,   90,   90,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,    7,    7,    9,    0,

        0,    0,    0,    0,    0,    0,    0,   90,   90,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,   92,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    3,   92,   92,   92,
        0,    0,    0,    0,    0,   91,    0,   92,   92,    0,
        0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   52,   54,   90,   90,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   63,   90,   77,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,    0,    0,    0,    0,    0,   90,   90,
       90,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   90,   90,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   92,    0,    0,    0,    0,    0,   92,    0,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   91,   92,    0,   91,   74,   90,
       57,   78,   90,   90,   90,   90,   61,   62,   90,   90,
       64,   80,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   76,   90,   90,   90,   90,    0,    0,    0,    0,
        0,   90,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
       92,   92,    0,    0,   92,   92,    0,    0,    0,    0,
        0,   56,   71,   90,   90,   90,   90,   83,   90,   90,
       79,   90,   90,   90,   90,   85,   90,   90,   68,   90,
        0,    0,    0,    0,    0,    0,    0,    0,   90,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
       92,    0,   92,   92,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   90,   90,   84,
       73,   90,   66,   81,   69,   67,   90,   90,   90,   90,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
       90,   59,   90,   72,   90,   90,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   92,   58,

       75,   82,   70,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   28,   28,   29,   30,   31,
        7,    7,    7,    7,    7,   32,    7,    7,    7,   33,
        7,    7,    7,    7,    7,    7,    7,   34,    7,    7,
       35,   36,   37,   38,    7,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,    7,   48,   49,   50,   51,
       52,   53,    7,   54,   55,   56,   57,   58,   59,   60,
       61,    7,   62,   63,   64,   65,    1,   66,   67,   68,
       68,   69,   69,   70,   71,   72,   72,   73,   73,   74,
       74,   73,   73,   75,   75,   75,   75,   75,   75,   75,
       76,   77,   77,   78,   78,   78,   78,   78,   78,   79,
       79,   79,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   91,   92,   93,   92,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  101,  101,
      101,    1,    1,  104,  105,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  107,  106,  108,  106,
      106,  106,  106,  109,  110,  111,  112,  113,  114,  114,
      114,  114,  114,  111,  111,  111,  111,  111,  115,  116,
      117,  117,  117,  117,  117,  117,  117,  118,  119,  119,
      119,  120,  121,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[122] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    1,    5,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1,    1,    1,    1,    6,    7,    7,    7,    7,
        6,    6,    6,    7,    7,    8,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,    9,    9,   10,   10,   11,   10,   10,

       10,   10,   10,    1,    3,    3,    3,    3,    3,    3,
        1,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[760] =
    {   0,
        0,    0,  119,  120, 1768, 8708, 1764, 8708, 1737,  131,
        0,  105, 1735,  118,  250, 8708, 8708, 1730,  114, 8708,
      115,  149,  117,  355,  158, 8708, 8708,  113, 1729,  119,
     8708, 8708, 8708, 1728,  175,   92,  108,  105,  101,  107,
      119,  129,  140,  141,  215,   94,  134,  147,  117, 8708,
      158, 8708, 8708,    0,    0,  143,  199,  392, 1684,  233,
      176,    0,  228,    0, 8708,  190, 1747, 8708,  493, 8708,
     8708,  390,  612,  668,  266,  697,  250,  729,  279,  764,
      163,    0,  397,  408,    0,    0,  298,  356,  789, 1681,
      338,  320,    0,  450, 8708, 8708, 8708,  890, 8708,  535,

     1009, 1065,  490, 1094,  552, 1126,  369, 1161,  238, 8708,
     8708, 8708, 8708, 8708, 8708, 1730,  875,  467,  535,  556,
     1667, 1630, 8708,    0, 8708,  908,  924, 1248, 8708, 1266,
     8708,  892,  580,  574,  955, 1665, 1628, 1282,  878,  966,
     1247, 1653, 1589, 1665, 8708, 8708, 8708, 1654, 8708, 1621,
     1633, 1617, 1632, 1616, 1622, 1607, 1604, 1601, 1601, 1601,
     1595, 1592,    0, 1591, 1595,  137, 1593, 1587, 1592, 1583,
     1572,  208,  278, 1577, 8708, 8708,    0,    0, 1365,    0,
     1328,    0, 1338, 1541,    0,  276,  908,    0, 1249,    0,
        0,    0,    0,    0,  315,    0,    0,  383, 8708, 1478,

     1597, 1716, 1835, 1954, 2073, 2129, 2167,    0,    0,    0,
     1348,    0, 1358, 1540,    0,  382,  958,    0, 1298,    0,
        0,    0,    0,    0,  391, 2268, 8708, 1447, 2387, 2443,
     1387, 2472, 1332, 2504,  514, 2539,  433, 2640, 2759, 2878,
     1487, 2934, 2972, 3010, 3048, 8708, 8708, 1519, 1469, 1482,
     1521, 1530, 1553,  449, 1001,  466,    0, 1631, 8708, 1649,
     1191, 1589, 1680, 1534, 1478, 8708, 1635, 1773, 8708, 1440,
     1630, 1714, 1495, 1446, 1865, 1882, 1759, 1878, 1888, 1700,
     1898,  497, 1508, 1909, 1919, 1929, 1938, 1948,  501, 1628,
      518, 8708, 8708, 2253, 2293,  166,  215,  599, 1498,  194,

      287,  363,  597, 1497, 1495,  372, 1474,  349,  422,  375,
      406,  392,  386,  488,  603,  605,  549,  548, 1473,  167,
     2304, 1466, 2658, 1961, 1955, 3073, 1435, 1999,    0, 1461,
     1460, 2298, 3174, 3230, 2021, 3259, 2044, 3291, 1791, 3326,
      609, 3427, 3546, 2200, 3602, 3640, 3677, 3778, 2040, 3834,
     3872, 1456, 1443, 1440, 3973, 4092, 4211, 2625, 4314, 4352,
     4390, 4484, 4534, 2345, 4572, 4610, 4647, 2664, 4685, 4723,
     4761, 2628, 2697, 2047, 2689, 2728, 1404, 1348, 2816, 2693,
     3414, 2367, 2756, 2847, 1326, 1285, 2868, 2878, 2888, 3097,
     3107,  822, 2591,  826, 3117, 3129, 3139, 3148, 3382,  839,

     2772,  871, 3455, 3472, 1276, 3991, 3960, 4007, 1348,  133,
     1344, 1341,  868,  925,  930,  891, 1340, 1338,  871,  932,
     1323, 1315,  910,  981,  998,  950,  974,  612, 1008, 1002,
      947, 1314, 1227, 1013, 4110, 1309, 2810, 3460, 4786, 1272,
     3481, 4149, 3487,    0, 3503, 1255,    0, 1229, 3370, 1269,
     4887, 5006, 5125, 3804, 5228, 5266, 5304, 5405, 5524, 3757,
     5580, 5618, 5655, 5756, 3516, 3705, 3783, 4190, 4203, 3978,
     4076, 4220, 4320, 3370, 3796, 5875, 5994, 4437, 6050, 6088,
     6125, 6226, 3913, 6282, 6320, 4143, 3934, 4463, 4483, 1275,
     1232, 6414, 4814, 4827, 4845, 4858, 4871, 4888, 4949, 4899,

     5016, 6464,    0, 4979, 4989, 4999, 3957, 5009, 1275, 4066,
     1284, 5049, 5088, 5101, 4223, 5111, 1393, 4429, 1401, 5392,
     5423, 5437,  475, 4011, 5441, 8708, 4969, 5009, 5122, 1266,
     1224, 5456, 5467, 1256, 1251, 1255, 1245,    0, 1238, 1238,
        0, 1246, 1243, 1235, 1031,    0,  992,  975,    0, 5743,
     5191, 5342, 5407,  932,    0, 1409, 5194, 1413, 5774, 6565,
     6684, 5727, 6740, 6778, 6815, 6916, 5207, 6972, 7010, 7111,
     7230,    0, 5746, 5756,    0, 5815, 5846, 5863, 7349, 5979,
     7468, 7587, 5876, 7643, 7681, 7718, 7819, 5952, 5965, 6192,
     6205, 6218, 6158, 5699, 6235, 7938, 5335, 5504, 6420, 6386,

     6399, 6412, 6425, 6492, 6512, 6536, 6547, 8050, 6614, 6617,
     7098, 5427, 7129, 8708, 5717, 5827, 6607,  924,  878, 6628,
     6651, 6840, 6238, 6879, 1417, 5945, 1434,  913,  886,    0,
        0,  865,    0,    0,    0,    0,  572,  527,  520, 7133,
     6952, 6583, 6905, 7039, 1429,  436, 7160, 2643, 4147, 6927,
     7170, 7106, 7197, 7292, 7208, 7359, 6664, 7312, 8163, 7385,
     7331, 7351, 7400, 7426, 7439, 7417, 7465, 7476, 7804, 7572,
     7589, 7361, 7480, 7552, 7561, 7774, 1466, 7800, 1470, 7855,
      476,    0,  443,    0,  361,  330, 7861, 7904, 7917, 7930,
     7943, 8016, 7870, 8042, 8053, 8133, 8044, 8150, 8181,    0,

        0,    0,    0, 8176, 8708, 8296, 8307, 8318,  326, 8329,
     8335, 8340, 8346, 8351, 8355, 8366, 8377, 8388, 8399,  267,
     8405, 8410, 8416, 8421, 8425, 8436, 8447, 8453, 8459, 8465,
     8471, 8477, 8485, 8496, 8507, 8518, 8524, 8530, 8536, 8542,
     8548, 8556, 8567,  150, 8573, 8579, 8590, 8601, 8612, 8618,
     8624, 8635, 8646, 8657,  126, 8663, 8674, 8685, 8696
    } ;

static yyconst flex_int16_t yy_def[760] =
    {   0,
      705,    1,  706,  706,  705,  705,  705,  705,  705,  707,
      708,  709,  705,  705,  710,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  709,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,  705,
      705,  705,  705,  711,  712,  712,  712,  705,  713,  714,
      705,  715,  705,  716,  705,  717,  705,  705,  707,  705,
      705,  718,  707,   73,   74,   74,   76,   76,   78,   78,
       80,  719,  720,  720,  721,  722,  722,  722,  705,  723,
      724,  705,  725,  705,  705,  705,  705,  726,  705,  726,

      726,  101,  102,  102,  104,  104,  106,  106,  108,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  727,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  705,  705,   84,   84,   84,  728,
      728,  181,  181,  183,  181,  728,  728,  729,  705,  730,
      731,  732,  730,  730,  705,  733,  734,  734,  705,  735,

      736,  736,  735,  736,  736,  205,  205,   84,   84,  737,
      737,  211,  211,  213,  211,  737,  737,  738,  705,  739,
      740,  741,  739,  739,  705,  742,  705,  742,  742,  229,
      230,  230,  232,  232,  234,  234,  236,  742,  742,  742,
      240,  236,  236,  236,  236,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  743,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  744,  744,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  745,  745,  705,  746,  705,  321,  295,
      295,  747,  747,  333,  334,  334,  336,  336,  338,  338,
      340,  748,  748,  343,  343,  345,  345,  747,  343,  343,
      343,  295,  295,  295,  749,  749,  749,  357,  357,  359,
      359,  357,  359,  363,  363,  365,  365,  357,  365,  365,
      365,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  750,  750,  705,  751,
      705,  435,  750,  443,  443,  445,  443,  750,  750,  705,
      752,  752,  752,  453,  453,  455,  455,  753,  753,  459,
      459,  461,  461,  753,  459,  459,  459,  459,  459,  459,
      459,  459,  453,  459,  459,  754,  754,  477,  477,  479,
      479,  754,  477,  477,  477,  482,  477,  477,  479,  481,
      481,  482,  477,  477,  477,  477,  477,  477,  477,  477,

      482,  477,  502,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  755,  755,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      756,  756,  756,  553,  552,  756,  756,  705,  533,  757,
      757,  561,  561,  563,  563,  757,  561,  561,  561,  758,
      758,  571,  571,  571,  571,  571,  571,  571,  758,  566,
      759,  759,  582,  582,  584,  584,  759,  582,  582,  582,
      582,  582,  582,  582,  582,  759,  582,  582,  596,  582,

      582,  582,  582,  582,  582,  582,  582,  596,  596,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      566,  561,  561,  563,  565,  565,  566,  561,  561,  561,
      561,  561,  561,  561,  561,  566,  561,  561,  758,  596,
      582,  582,  582,  582,  582,  582,  582,  582,  596,  596,
      596,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      533,  533,  533,  533,  533,  533,  566,  561,  561,  561,
      561,  561,  561,  561,  561,  566,  566,  596,  705,  533,

      533,  533,  533,  566,    0,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705
    } ;

static yyconst flex_int16_t yy_nxt[8830] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       25,   26,   27,   28,   29,   30,   31,   12,   12,   12,
       12,   12,   12,   12,   32,    6,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   12,   42,   12,   43,   12,
       12,   12,   12,   44,   45,   46,   47,   48,   49,   12,
       12,   50,   51,   52,   53,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,   54,   55,   56,   57,   58,   59,
        6,   60,   61,   62,   63,    6,    6,    6,    6,    6,
        6,   65,   65,   84,   84,   84,   96,  111,   83,  123,
      113,   66,   66,   70,  124,   71,  144,  145,  112,  114,
      115,  125,   97,  147,  148,  151,  152,  155,   83,  157,
       83,  158,   83,  153,  171,  160,  156,   83,  161,  154,
      159,   83,  174,   83,   83,  116,   72,  117,  117,  117,
      162,   83,  163,   83,  126,   83,  138,  138,  138,  164,
      532,  309,  175,  166,  172,   83,  129,  130,  129,  131,
       83,  165,  310,   84,   84,   84,   83,   83,  173,  129,

      130,  129,  198,   83,   83,   83,  131,  199,  411,   85,
       86,   87,   88,   89,   90,  434,   91,   92,   93,   94,
      176,  179,  179,  179,  179,  179,  179,  179,  207,  207,
      207,  150,   83,  416,   73,   73,   73,   73,   73,   74,
       75,   75,   75,   75,   75,   75,   76,   77,   78,   79,
       80,   81,   99,   83,  316,  118,  119,  120,  121,   99,
      167,  168,  317,  122,  139,  140,  141,  142,  412,   83,
      169,   83,  143,  170,  193,  193,  193,  193,  193,   85,
       86,   87,   88,   89,   90,  100,   91,   92,   93,   94,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  188,

      188,  188,  189,  245,  245,  245,  190,  194,  194,  194,
      194,  194,  194,  194,  194,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  318,   83,  319,  192,   83,  417,
      195,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,  206,  206,  206,  206,  206,  206,
      179,  179,  179,  101,  101,  101,  101,  101,  102,  103,
      103,  103,  103,  103,  103,  104,  105,  106,  107,  108,
      109,  126,  703,  127,  127,  128,  209,  209,  209,  209,
      209,  209,  209,  129,  130,  129,  131,   83,  132,  128,
      128,  128,   70,  422,   69,  198,  129,  130,  129,  201,

      199,   83,  702,  131,  218,  218,  218,  219,  202,  202,
       83,  220,  418,   83,  132,   84,   84,   84,  223,  223,
      223,  223,  223,  421,   83,   69,   84,   84,   84,  201,
       83,  424,  222,  201,  244,  244,  244,  244,  244,  244,
      201,  427,  426,  201,   83,  201,  203,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  425,
       83,  133,  134,  135,  136,   84,   84,   84,  423,  137,
      180,  180,  181,  180,  181,  180,  182,  180,  182,  180,
      183,  180,  184,  180,  185,  185,  180,  185,  180,  180,
      180,  186,  180,  186,  180,   70,  701,   71,  361,  361,

      361,   85,   86,   87,   88,   89,   90,  406,   91,   92,
       93,   94,   85,   86,   87,   88,   89,   90,  700,   91,
       92,   93,   94,  117,  117,  117,   83,  406,   72,  224,
      224,  224,  224,  224,  224,  224,  224,   99,  695,  238,
      117,  117,  117,  428,   98,  117,  117,  117,  117,  117,
      117,  117,  225,  239,  239,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  686,  685,
       98,  128,  128,  128,  238,  138,  138,  138,  238,  360,
      360,  360,  360,  360,  360,  238,   83,   83,  238,  432,
      238,  240,  138,  138,  138,  431,   73,   73,   73,   73,

       73,   74,   75,   75,   75,   75,   75,   75,   76,   77,
       78,   79,   80,   81,   70,  684,   71,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  117,  117,  117,  117,
      117,  117,  117,  117,  117,   83,  249,   83,  249,  419,
      250,   83,  250,   83,  251,  429,  252,   72,  253,  253,
       83,  253,  544,  413,  414,  254,  430,  254,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  457,  457,  457,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,   73,   73,   73,   73,   73,
       74,   75,   75,   75,   75,   75,   75,   76,   77,   78,
       79,   80,   81,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  210,  210,  211,
      210,  211,  210,  212,  210,  212,  210,  213,  210,  214,
      210,  215,  215,  210,  215,  210,  210,  210,  216,  210,
      216,  210,   99,  117,  117,  117,  258,  258,  258,  227,

      258,  258,  258,  247,  248,  247,   83,  683,  275,   83,
      276,  276,  276,  268,  268,  268,  247,  248,  247,  276,
      276,  276,  276,  533,  537,  228,  258,  258,  258,   83,
      276,  276,  276,  276,  276,  276,  259,  260,  259,  536,
      126,  682,  127,  127,  128,  268,  268,  268,   83,  259,
      260,  259,  129,  130,  129,  266,  138,  138,  138,  138,
      138,  138,  138,   83,  539,  129,  130,  129,   83,  681,
       83,  534,  266,  179,  179,  179,  179,  179,  179,  179,
      679,  118,  119,  120,  121,   83,  535,  538,   83,  122,
      678,  547,  542,  229,  229,  229,  229,  229,  230,  231,

      231,  231,  231,  231,  231,  232,  233,  234,  235,  236,
      237,   99,   83,  208,  261,  262,  263,  264,  227,   83,
      543,  639,  265,  209,  209,  209,  209,  209,  209,  209,
      133,  134,  135,  136,  540,  277,   83,  277,  137,  278,
       83,  278,  638,  279,  228,  280,   83,  281,  281,  545,
      281,   83,  546,  541,  282,  549,  282,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  117,  117,  117,  117,
      117,  117,  117,  637,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  229,  229,  229,  229,  229,  230,  231,  231,
      231,  231,  231,  231,  232,  233,  234,  235,  236,  237,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  126,   83,  128,  128,  128,  258,
      258,  258,  258,  258,  258,  258,  129,  130,  129,  267,
      636,  267,  548,  635,  268,  268,  268,  634,  633,  129,
      130,  129,  523,  632,  269,  631,  269,  630,  126,  629,

      138,  138,  138,  442,  442,  442,  628,  269,  406,  269,
      129,  130,  129,  131,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  129,  130,  129,  627,  284,  406,  284,
      131,  285,  626,  285,  607,  286,  208,  287,  557,  288,
      288,  606,  288,  321,  321,  321,  289,   83,  289,  373,
      373,  373,   83,   83,  133,  134,  135,  136,  373,  373,
      373,   83,  137,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  270,  271,  272,  273,   83,  229,   83,   83,
      274,  126,   83,  321,  321,  321,   83,  519,  139,  140,
      141,  142,  518,  322,  323,  322,  143,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  322,  323,  322,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,   99,
      511,  355,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  356,  356,  381,  381,  381,
      510,  324,  325,  326,  327,  381,  381,  381,   83,  328,
       70,   83,   70,  550,  550,  550,  355,  435,  435,  435,
      355,  525,  525,  525,   83,  694,  227,  355,   83,   83,

      355,  449,  355,  357,   83,  226,  226,  226,  525,  525,
      525,  433,   83,  332,  226,  226,  226,  226,  268,  268,
      268,  268,  268,  268,  268,  226,  226,  226,  226,  226,
      226,  333,  372,   83,  372,  420,  415,  373,  373,  373,
      613,  613,  613,  226,  613,  613,  613,  247,  402,  247,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      247,  401,  247,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  128,  128,  128,  128,  128,  128,  128,
      394,  333,  333,  333,  333,  333,  334,  335,  335,  335,
      335,  335,  335,  336,  337,  338,  339,  340,  341,   70,

      393,   71,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  208,  178,  320,  315,  374,  375,  376,  377,  314,
      313,  312,   72,  378,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  311,  308,  307,  306,  305,  258,
      258,  258,  304,  268,  268,  268,  303,  302,  301,  259,
      260,  259,  380,  300,  380,  299,  298,  381,  381,  381,
      297,  296,  259,  260,  259,  295,  294,  259,  293,  259,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  292,
      259,  291,  259,  138,  138,  138,  138,  138,  138,  138,

       73,   73,   73,   73,   73,   74,   75,   75,   75,   75,
       75,   75,   76,   77,   78,   79,   80,   81,   70,  290,
       71,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      195,  283,  256,  255,  342,  342,  342,  261,  262,  263,
      264,  270,  271,  272,  273,  265,  246,  217,   67,  274,
      187,   72,  149,  146,  110,  382,  383,  384,  385,   95,
      387,   68,  387,  386,  388,   67,  388,  705,  389,  705,
      390,  705,  391,  391,  705,  391,  705,  705,  705,  392,
      705,  392,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  268,  268,  268,  395,  705,  395,  705,  396,  705,

      396,  269,  397,  269,  398,  705,  399,  399,  705,  399,
      705,  705,  705,  400,  269,  400,  269,  705,  705,   73,
       73,   73,  343,  344,  345,  346,   75,   75,   75,   75,
      347,   76,   77,   78,   79,   80,   81,   70,  705,   70,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      705,  705,  705,  348,  348,  348,  456,  456,  456,  456,
      456,  456,  348,  348,  348,  348,  705,  705,  705,  705,
      332,  705,  705,  348,  348,  348,  348,  348,  348,  270,
      271,  272,  273,  403,  403,  403,  705,  274,  705,  705,
      705,  203,  403,  403,  403,  403,  705,  705,  404,  705,

      276,  276,  276,  403,  403,  403,  403,  403,  403,  276,
      276,  276,  276,  405,  406,  705,  705,  705,  705,  705,
      276,  276,  276,  276,  276,  276,  705,  705,  705,  705,
      405,  705,  705,  705,  406,  705,  705,  705,  333,  333,
      333,  333,  333,  334,  335,  335,  335,  335,  335,  335,
      336,  337,  338,  339,  340,  341,   70,  705,   71,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,   72,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  705,  705,   73,   73,   73,
       73,   73,   74,   75,   75,   75,   75,   75,   75,   76,
       77,   78,   79,   80,   81,   70,  705,   71,  224,  224,
      224,  224,  224,  224,  224,  224,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  705,

      705,  450,  705,  705,  705,  705,  705,  705,   72,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  204,  204,
      204,  204,  204,  204,  204,  373,  373,  373,  373,  373,
      373,  373,  705,  705,  705,  705,  705,  705,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,   73,   73,   73,   73,
       73,   74,   75,   75,   75,   75,   75,   75,   76,   77,
       78,   79,   80,   81,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
       99,   84,   84,   84,  705,  705,  705,   99,  204,  204,
      204,  204,  204,  204,  204,  705,  705,  705,  705,  705,
      705,  464,  464,  464,  464,  464,  464,  464,  464,  464,

       70,  705,  705,  228,  409,  705,  705,  451,  705,  705,
      705,   84,   84,   84,  705,  705,  452,  452,  705,  705,
      126,  705,  321,  321,  321,  705,  705,  705,  705,  705,
      705,  410,  322,  323,  322,  705,  705,  451,  705,  705,
      705,  451,   83,  705,  705,  322,  323,  322,  451,  705,
      705,  451,  705,  451,  453,  705,  705,   85,   86,   87,
       88,   89,   90,  705,   91,   92,   93,   94,  705,  705,
      705,  229,  229,  229,  229,  229,  230,  231,  231,  231,
      231,  231,  231,  232,  233,  234,  235,  236,  237,   99,
      705,  705,  705,  705,  705,  705,   99,   85,   86,   87,

       88,   89,   90,  705,   91,   92,   93,   94,  705,  705,
      324,  325,  326,  327,  705,  705,  705,  705,  328,  705,
      705,  705,  228,  358,  358,  358,  358,  358,  358,  358,
      705,  705,  705,  705,  705,  705,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  381,  381,  381,  381,  381,
      381,  381,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      229,  229,  229,  229,  229,  230,  231,  231,  231,  231,

      231,  231,  232,  233,  234,  235,  236,  237,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,   99,  226,  226,  226,  373,  373,  373,  227,
      705,  705,  226,  226,  226,  226,  258,  258,  258,  258,
      258,  258,  258,  226,  226,  226,  226,  226,  226,  705,
      705,  267,  705,  267,  705,  228,  435,  435,  435,  705,
      705,  226,  501,  501,  501,  705,  436,  705,  436,  705,
      705,  501,  501,  501,  501,  705,   83,  705,  705,  436,

      705,  436,  501,  501,  501,  501,  501,  501,  705,  705,
      705,  381,  381,  381,  705,  373,  373,  373,  705,  705,
      226,  454,  454,  454,  705,  247,  705,  247,  647,  647,
      647,  647,  647,  647,  374,  375,  376,  377,  247,  705,
      247,  705,  378,  229,  229,  229,  229,  229,  230,  231,
      231,  231,  231,  231,  231,  232,  233,  234,  235,  236,
      237,   99,  705,  705,  437,  438,  439,  440,  227,  705,
      705,  705,  441,  705,  705,  705,  705,  362,  362,  362,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  705,
      705,  705,  705,  705,  228,  705,  705,  705,  705,  382,

      383,  384,  385,  374,  375,  376,  377,  386,  504,  705,
      504,  378,  505,  705,  505,  705,  506,  705,  507,  705,
      508,  508,  705,  508,  705,  705,  705,  509,  705,  509,
      705,  705,  705,  705,  117,  117,  117,  268,  268,  268,
      268,  268,  268,  268,  247,  248,  247,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  705,  247,  248,  247,
      705,  705,  229,  229,  229,  363,  364,  365,  366,  231,
      231,  231,  231,  367,  232,  233,  234,  235,  236,  237,
       99,  705,  705,  705,  705,  705,  705,   99,  550,  550,
      550,  550,  550,  550,  550,  705,  368,  368,  368,  705,

      705,  705,  705,  705,  705,  368,  368,  368,  368,  705,
      705,  705,  705,  228,  705,  705,  368,  368,  368,  368,
      368,  368,  118,  119,  120,  121,  705,  512,  705,  512,
      122,  513,  705,  513,  240,  514,  705,  515,  705,  516,
      516,  705,  516,  705,  705,  705,  517,  705,  517,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  705,
      705,  229,  229,  229,  229,  229,  230,  231,  231,  231,
      231,  231,  231,  232,  233,  234,  235,  236,  237,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  210,  210,  443,  210,  443,  210,  444,  210,  444,
      210,  445,  210,  446,  210,  447,  447,  210,  447,  210,
      210,  210,  448,  210,  448,  210,   70,  705,   70,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  705,  332,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  333,  333,  333,
      333,  333,  334,  335,  335,  335,  335,  335,  335,  336,
      337,  338,  339,  340,  341,  200,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  200,  200,  200,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,   70,
      705,   71,  381,  381,  381,  442,  442,  442,  442,  442,
      442,  442,  259,  705,  259,  458,  458,  458,  204,  204,
      204,  204,  204,  204,  204,  259,  705,  259,  705,  705,
      705,  705,   72,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  403,  403,  403,  705,  705,  705,  705,
      705,  705,  403,  403,  403,  403,  705,  522,  705,  705,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

      403,  403,  403,  705,  406,  705,  705,  522,  705,  705,
      403,  403,  403,  403,  403,  403,  705,  705,  705,  705,
      382,  383,  384,  385,  406,  705,  705,  705,  386,  705,
       73,   73,   73,  459,  460,  461,  462,   75,   75,   75,
       75,  463,   76,   77,   78,   79,   80,   81,   70,  705,
       71,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      224,  224,  224,  224,  224,  224,  224,  224,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  705,  705,
      705,   72,  705,  558,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  204,  204,  204,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  464,  705,  705,  705,
      705,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  464,  464,  464,  464,  464,  464,
      464,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,   73,
       73,   73,   73,   73,   74,   75,   75,   75,   75,   75,
       75,   76,   77,   78,   79,   80,   81,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       73,   73,  465,   73,  465,   73,  466,   73,  466,   73,
      467,   73,  468,   73,  469,  469,   73,  469,   73,   73,

       73,  470,   73,  470,   73,   73,  471,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,  705,  705,
       73,  705,   73,  705,   73,  705,   73,  705,   73,  705,
       73,  705,   73,   73,  705,   73,  705,  705,  705,   73,
      705,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,  705,  705,   73,  705,   73,
      705,   73,  705,   73,  705,   73,  705,   73,  705,   73,
       73,  705,   73,  705,  705,  705,   73,  705,   73,  472,
       70,  705,   70,  204,  204,  204,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  473,  473,  473,  705,

      705,  705,  705,  705,  705,  473,  473,  473,  473,  705,
      705,  705,  705,  332,  705,  705,  473,  473,  473,  473,
      473,  473,  200,  200,  200,  705,  705,  705,  705,  705,
      705,  200,  200,  200,  200,  204,  204,  204,  204,  204,
      204,  204,  200,  200,  200,  200,  200,  200,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  705,  705,  705,
      200,  204,  204,  204,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  204,  204,  204,  204,  204,  204,
      204,  333,  333,  333,  333,  333,  334,  335,  335,  335,
      335,  335,  335,  336,  337,  338,  339,  340,  341,  474,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,   99,  126,  705,  128,  128,
      128,  705,   99,  705,  705,  705,  705,  705,  129,  130,
      129,  358,  358,  358,  358,  358,  358,  358,  705,  705,

      705,  129,  130,  129,  524,  705,  524,  705,  228,  525,
      525,  525,  599,  599,  599,  599,  599,  599,  599,  526,
      705,  526,  705,  126,  705,  138,  138,  138,  705,  525,
      525,  525,  526,  705,  526,  129,  130,  129,  131,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  129,  130,
      129,  705,  464,  464,  464,  131,  204,  204,  204,  204,
      204,  204,  204,  705,  705,  705,  133,  134,  135,  136,
      705,  705,  705,  705,  137,  705,  229,  229,  229,  229,
      229,  230,  231,  231,  231,  231,  231,  231,  232,  233,
      234,  235,  236,  237,   99,  705,  705,  527,  528,  529,

      530,   99,  705,  705,  705,  531,  705,  705,  705,  705,
      476,  476,  476,  139,  140,  141,  142,  527,  528,  529,
      530,  143,  705,  705,  705,  531,  705,  228,  435,  435,
      435,  373,  373,  373,  373,  373,  373,  373,  436,  705,
      436,  464,  464,  464,  464,  464,  464,  464,   83,  705,
      705,  436,  227,  436,  204,  204,  204,  204,  204,  204,
      204,  226,  226,  226,  705,  126,  705,  321,  321,  321,
      226,  226,  226,  226,  705,  705,  705,  322,  323,  322,
      705,  226,  226,  226,  226,  226,  226,  705,  705,  705,
      322,  323,  322,  705,  705,  229,  229,  229,  477,  478,

      479,  480,  231,  231,  231,  231,  481,  232,  233,  234,
      235,  236,  237,   99,  705,  705,  437,  438,  439,  440,
       99,  705,  705,  705,  441,  454,  454,  454,  705,  482,
      482,  482,  647,  647,  647,  647,  647,  647,  482,  482,
      482,  482,  705,  705,  705,  705,  228,  705,  705,  482,
      482,  482,  482,  482,  482,  324,  325,  326,  327,  705,
      705,  705,  705,  328,  705,  705,  705,  357,  204,  204,
      204,  204,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  204,  204,  204,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  705,  204,  204,

      204,  204,  204,  204,  204,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  229,  229,  229,  229,  229,  230,
      231,  231,  231,  231,  231,  231,  232,  233,  234,  235,
      236,  237,  226,  226,  226,  705,  705,  705,  580,  580,
      580,  226,  226,  226,  226,  705,  705,  580,  580,  580,
      580,  705,  226,  226,  226,  226,  226,  226,  580,  580,
      580,  580,  580,  580,  705,  705,  705,  705,  705,  705,
      226,  705,  705,  705,  705,  705,  200,  705,  705,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  227,  381,  381,  381,  381,  381,  381,

      381,  705,  486,  486,  486,  705,  705,  705,  705,  705,
      705,  226,  226,  226,  226,  358,  358,  358,  358,  358,
      358,  358,  226,  226,  226,  226,  226,  226,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  705,  705,  705,
      226,  358,  358,  358,  358,  358,  358,  358,  705,  705,
      705,  705,  705,  705,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  600,  705,  600,  705,  601,  705,  601,
      705,  602,  705,  603,  705,  604,  604,  705,  604,  705,
      705,  705,  605,  705,  605,  705,  705,  705,  705,  705,
      487,  488,  489,  490,  705,  705,  705,  705,  491,  358,

      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  492,  492,  492,  492,  492,  492,  492,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      229,  229,  493,  229,  493,  229,  494,  229,  494,  229,
      495,  229,  496,  229,  497,  497,  229,  497,  229,  229,
      229,  498,  229,  498,  229,  229,  499,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  705,  705,
      229,  705,  229,  705,  229,  705,  229,  705,  229,  705,

      229,  705,  229,  229,  705,  229,  705,  705,  705,  229,
      705,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  705,  705,  229,  705,  229,
      705,  229,  705,  229,  705,  229,  705,  229,  705,  229,
      229,  705,  229,  705,  705,  705,  229,  705,  229,  500,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,

      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  210,  210,  551,  210,  551,  210,
      552,  210,  552,  210,  553,  210,  554,  210,  555,  555,
      210,  555,  210,  210,  210,  556,  210,  556,  210,   70,
      705,   70,  358,  358,  358,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  358,  358,  358,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  705,  705,
      705,  705,  332,  358,  358,  358,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  358,  358,  358,  358,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  358,
      358,  358,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  705,  358,  358,  358,  358,
      358,  358,  358,  492,  492,  492,  705,  358,  358,  358,
      358,  358,  358,  358,  705,  705,  705,  705,  705,  705,
      333,  333,  333,  333,  333,  334,  335,  335,  335,  335,

      335,  335,  336,  337,  338,  339,  340,  341,   70,  705,
       70,  705,  705,  705,  492,  492,  492,  492,  492,  492,
      492,  705,  705,  705,  560,  560,  560,  358,  358,  358,
      358,  358,  358,  358,  609,  609,  609,  705,  705,  705,
      705,  332,  705,  609,  609,  609,  609,  525,  525,  525,
      525,  525,  525,  525,  609,  609,  609,  609,  609,  609,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      525,  525,  525,  525,  525,  525,  525,  525,  525,  333,
      333,  333,  561,  562,  563,  564,  335,  335,  335,  335,
      565,  336,  337,  338,  339,  340,  341,   70,  705,   70,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      705,  705,  705,  566,  566,  566,  705,  705,  705,  705,
      705,  705,  566,  566,  566,  566,  705,  705,  705,  705,
      332,  705,  705,  566,  566,  566,  566,  566,  566,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  705,
      705,  453,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  381,  381,  381,  381,  381,  381,  381,  381,

      381,  381,  620,  705,  620,  705,  621,  705,  621,  705,
      622,  705,  623,  705,  624,  624,  705,  624,  705,  705,
      705,  625,  705,  625,  705,  705,  705,  705,  333,  333,
      333,  333,  333,  334,  335,  335,  335,  335,  335,  335,
      336,  337,  338,  339,  340,  341,  200,  200,  200,  705,
      705,  705,  705,  705,  705,  200,  200,  200,  200,  550,
      550,  550,  550,  550,  550,  550,  200,  200,  200,  200,
      200,  200,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  705,  705,  200,  454,  454,  454,  454,  454,
      454,  454,  705,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,   70,  705,   71,
      258,  258,  258,  358,  358,  358,  358,  358,  358,  358,
      259,  260,  259,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  259,  260,  259,  705,  705,  705,  705,
       72,  268,  268,  268,  705,  613,  613,  613,  705,  705,
      612,  269,  612,  269,  705,  613,  613,  613,  705,  525,
      525,  525,  705,  705,  269,  614,  269,  614,  705,  526,
      705,  526,  705,  705,   84,   84,   84,  705,  614,  705,
      614,  705,  526,  705,  526,   84,   84,   84,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  261,  262,

      263,  264,  705,  705,  705,  705,  265,  705,   73,   73,
       73,   73,   73,   74,   75,   75,   75,   75,   75,   75,
       76,   77,   78,   79,   80,   81,   70,  705,   71,  270,
      271,  272,  273,  615,  616,  617,  618,  274,  705,  705,
      705,  619,  705,  615,  616,  617,  618,  527,  528,  529,
      530,  619,  705,  705,  705,  531,  705,  705,  705,   72,
       85,   86,   87,   88,   89,   90,  705,   91,   92,   93,
       94,   85,   86,   87,   88,   89,   90,  705,   91,   92,
       93,   94,  358,  358,  358,  358,  358,  358,  358,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  570,  570,  570,  570,  570,  570,  570,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,   73,   73,   73,
       73,   73,   74,   75,   75,   75,   75,   75,   75,   76,
       77,   78,   79,   80,   81,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   73,   73,
      571,   73,  571,   73,  572,   73,  572,   73,  573,   73,
      574,   73,  575,  575,   73,  575,   73,   73,   73,  576,
       73,  576,   73,   73,  577,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,  705,  705,   73,  705,

       73,  705,   73,  705,   73,  705,   73,  705,   73,  705,
       73,   73,  705,   73,  705,  705,  705,   73,  705,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  705,  705,   73,  705,   73,  705,   73,
      705,   73,  705,   73,  705,   73,  705,   73,   73,  705,
       73,  705,  705,  705,   73,  705,   73,  578,   70,  705,
       71,  435,  435,  435,  587,  587,  587,  587,  587,  587,
      587,  436,  705,  436,  458,  458,  458,  358,  358,  358,
      358,  358,  358,  358,  436,  705,  436,  705,  705,  705,
      126,   72,  321,  321,  321,  613,  613,  613,  613,  613,

      613,  613,  322,  323,  322,  454,  454,  454,  454,  454,
      454,  454,  705,  705,  705,  322,  323,  322,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  204,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  705,  705,  437,
      438,  439,  440,  705,  705,  705,  705,  441,  705,   73,
       73,   73,  459,  460,  461,  462,   75,   75,   75,   75,
      463,   76,   77,   78,   79,   80,   81,   99,  705,  705,
      324,  325,  326,  327,   99,  705,  705,  705,  328,  570,
      570,  570,  705,  581,  581,  581,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  705,  705,  705,  705,
      228,  570,  570,  570,  570,  570,  570,  570,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  570,  570,  570,
      705,  705,  705,  705,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  358,  358,  358,  358,  358,  358,
      358,  705,  705,  705,  705,  705,  705,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  705,  705,  229,  229,
      229,  582,  583,  584,  585,  231,  231,  231,  231,  586,
      232,  233,  234,  235,  236,  237,   99,  201,  201,  201,

      705,  705,  705,   99,  705,  705,  201,  201,  201,  201,
      525,  525,  525,  525,  525,  525,  525,  201,  201,  201,
      201,  201,  201,  705,  705,  705,  705,  705,  705,  228,
      358,  358,  358,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  358,  358,  358,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  705,  705,  705,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  587,  587,  587,  587,  587,  587,  587,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  229,  229,  229,

      229,  229,  230,  231,  231,  231,  231,  231,  231,  232,
      233,  234,  235,  236,  237,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  229,  229,
      588,  229,  588,  229,  589,  229,  589,  229,  590,  229,
      591,  229,  592,  592,  229,  592,  229,  229,  229,  593,
      229,  593,  229,  229,  594,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  705,  705,  229,  705,
      229,  705,  229,  705,  229,  705,  229,  705,  229,  705,
      229,  229,  705,  229,  705,  705,  705,  229,  705,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  705,  705,  229,  705,  229,  705,  229,
      705,  229,  705,  229,  705,  229,  705,  229,  229,  705,
      229,  705,  705,  705,  229,  705,  229,  595,   99,  705,
      705,  705,  587,  587,  587,   99,  358,  358,  358,  358,
      358,  358,  358,  705,  596,  596,  596,  705,  705,  705,
      705,  705,  705,  596,  596,  596,  596,  705,  705,  705,
      705,  228,  705,  705,  596,  596,  596,  596,  596,  596,
      358,  358,  358,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  358,  358,  358,  358,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  358,  358,  358,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  705,  358,  358,  358,  358,  358,  358,  358,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  229,
      229,  229,  229,  229,  230,  231,  231,  231,  231,  231,
      231,  232,  233,  234,  235,  236,  237,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  227,  705,  705,  705,  705,  705,  227,
      705,  705,  486,  486,  486,  705,  705,  705,  226,  226,
      226,  226,  226,  226,  226,  705,  705,  226,  226,  226,
      226,  705,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  358,  358,  358,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  358,  358,  358,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      358,  358,  358,  671,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  358,  358,  358,  358,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  705,  705,  705,  705,
      487,  488,  489,  490,  705,  705,  705,  705,  491,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,   70,  705,   70,
      358,  358,  358,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  641,  641,  641,  599,  599,  599,  705,
      358,  358,  358,  358,  358,  358,  358,  705,  705,  705,

      332,  599,  599,  599,  599,  599,  599,  599,  705,  705,
      705,  705,  705,  705,  358,  358,  358,  358,  358,  358,
      358,  599,  599,  599,  705,  358,  358,  358,  358,  358,
      358,  358,  238,  238,  238,  373,  373,  373,  705,  705,
      705,  238,  238,  238,  238,  247,  705,  247,  705,  705,
      705,  705,  238,  238,  238,  238,  238,  238,  247,  705,
      247,  687,  687,  687,  687,  687,  687,  687,  333,  333,
      333,  642,  643,  644,  645,  335,  335,  335,  335,  646,
      336,  337,  338,  339,  340,  341,   70,  672,   70,  672,
      705,  673,  705,  673,  705,  674,  705,  675,  705,  676,

      676,  705,  676,  705,  705,  705,  677,  705,  677,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  332,
      705,  705,  705,  374,  375,  376,  377,  705,  705,  705,
      705,  378,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  647,  647,  647,  647,  647,  647,  647,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  333,  333,  333,
      333,  333,  334,  335,  335,  335,  335,  335,  335,  336,

      337,  338,  339,  340,  341,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  333,  333,
      648,  333,  648,  333,  649,  333,  649,  333,  650,  333,
      651,  333,  652,  652,  333,  652,  333,  333,  333,  653,
      333,  653,  333,  333,  654,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  705,  705,  333,  705,
      333,  705,  333,  705,  333,  705,  333,  705,  333,  705,
      333,  333,  705,  333,  705,  705,  705,  333,  705,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  705,  705,  333,  705,  333,  705,  333,

      705,  333,  705,  333,  705,  333,  705,  333,  333,  705,
      333,  705,  705,  705,  333,  705,  333,  655,   70,  705,
       70,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  705,  705,  705,  656,  656,  656,  705,  705,  705,
      705,  705,  705,  656,  656,  656,  656,  705,  705,  705,
      705,  332,  705,  705,  656,  656,  656,  656,  656,  656,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      200,  200,  200,  705,  705,  705,  705,  705,  705,  200,
      200,  200,  200,  454,  454,  454,  454,  454,  454,  454,
      200,  200,  200,  200,  200,  200,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  454,  454,  454,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  705,  333,
      333,  333,  333,  333,  334,  335,  335,  335,  335,  335,
      335,  336,  337,  338,  339,  340,  341,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,   70,  705,   71,  381,  381,  381,  688,
      705,  688,  705,  689,  705,  689,  259,  690,  259,  691,
      705,  692,  692,  705,  692,  705,  705,  705,  693,  259,
      693,  259,  705,  705,  705,  705,   72,  613,  613,  613,
      705,  435,  435,  435,  705,  705,  705,  614,  705,  614,
      705,  436,  705,  436,  705,  705,  705,  705,  705,  705,
      614,  705,  614,  705,  436,  705,  436,  705,  641,  641,
      641,  705,  705,  705,  454,  454,  454,  200,  200,  200,
      200,  647,  647,  647,  647,  647,  647,  705,  200,  200,

      200,  200,  200,  200,  382,  383,  384,  385,  705,  705,
      705,  705,  386,  705,   73,   73,   73,   73,   73,   74,
       75,   75,   75,   75,   75,   75,   76,   77,   78,   79,
       80,   81,   70,  705,   71,  615,  616,  617,  618,  437,
      438,  439,  440,  619,  705,  705,  705,  441,  454,  454,
      454,  454,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  705,  705,  705,  705,   72,  642,  643,  644,  645,
      705,  647,  647,  647,  646,  454,  454,  454,  454,  454,
      454,  454,  647,  647,  647,  705,  454,  454,  454,  454,
      454,  454,  454,  705,  705,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,   73,   73,   73,   73,   73,   74,   75,
       75,   75,   75,   75,   75,   76,   77,   78,   79,   80,
       81,   70,  705,   71,  705,  705,  705,  647,  647,  647,
      647,  647,  647,  647,  705,  705,  705,  458,  458,  458,
      454,  454,  454,  454,  454,  454,  454,  697,  697,  697,
      705,  705,  705,  705,   72,  705,  697,  697,  697,  697,
      454,  454,  454,  454,  454,  454,  454,  697,  697,  697,

      697,  697,  697,  226,  226,  226,  705,  705,  705,  358,
      358,  358,  226,  226,  226,  226,  660,  660,  660,  660,
      660,  660,  705,  226,  226,  226,  226,  226,  226,  358,
      358,  358,  705,  705,  705,  705,  660,  660,  660,  660,
      660,  660,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,   73,   73,   73,  459,  460,  461,  462,   75,
       75,   75,   75,  463,   76,   77,   78,   79,   80,   81,
       99,  705,  705,  705,  705,  705,  705,   99,  358,  358,
      358,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  660,  660,  660,  705,  358,  358,  358,  358,  358,

      358,  358,  705,  228,  358,  358,  358,  358,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  358,  358,  358,
      705,  705,  705,  705,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  705,  705,  705,
      705,  705,  705,  358,  358,  358,  358,  358,  358,  358,
      660,  660,  660,  705,  358,  358,  358,  358,  358,  358,
      358,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  229,  229,  229,  229,  229,  230,  231,  231,  231,
      231,  231,  231,  232,  233,  234,  235,  236,  237,   99,
      355,  355,  355,  705,  705,  705,   99,  705,  227,  355,

      355,  355,  355,  705,  705,  705,  705,  226,  226,  226,
      355,  355,  355,  355,  355,  355,  226,  226,  226,  226,
      705,  705,  228,  705,  705,  705,  705,  226,  226,  226,
      226,  226,  226,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  660,  660,  660,  660,  660,
      660,  660,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      229,  229,  229,  229,  229,  230,  231,  231,  231,  231,

      231,  231,  232,  233,  234,  235,  236,  237,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  229,  229,  661,  229,  661,  229,  662,  229,  662,
      229,  663,  229,  664,  229,  665,  665,  229,  665,  229,
      229,  229,  666,  229,  666,  229,  229,  667,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  705,
      705,  229,  705,  229,  705,  229,  705,  229,  705,  229,
      705,  229,  705,  229,  229,  705,  229,  705,  705,  705,
      229,  705,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  705,  705,  229,  705,

      229,  705,  229,  705,  229,  705,  229,  705,  229,  705,
      229,  229,  705,  229,  705,  705,  705,  229,  705,  229,
      668,   99,  581,  581,  581,  705,  705,  705,   99,  705,
      705,  226,  226,  226,  226,  705,  705,  581,  581,  581,
      705,  705,  226,  226,  226,  226,  226,  226,  705,  705,
      705,  705,  705,  705,  228,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  705,  525,  525,  525,  705,  705,  705,  200,
      200,  200,  705,  526,  705,  526,  705,  705,  200,  200,
      200,  200,  705,  705,  705,  705,  526,  705,  526,  200,

      200,  200,  200,  200,  200,  705,  705,  705,  705,  705,
      582,  583,  584,  585,  705,  705,  705,  705,  586,  705,
      705,  705,  229,  229,  229,  582,  583,  584,  585,  231,
      231,  231,  231,  586,  232,  233,  234,  235,  236,  237,
       99,  705,  705,  705,  687,  687,  687,   99,  454,  454,
      454,  454,  454,  454,  454,  705,  670,  670,  670,  705,
      705,  527,  528,  529,  530,  670,  670,  670,  670,  531,
      705,  705,  705,  228,  705,  705,  670,  670,  670,  670,
      670,  670,  454,  454,  454,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  454,  454,  454,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  454,  454,
      454,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  454,  454,  454,  454,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  705,  705,  705,  705,  705,  705,
      705,  229,  229,  229,  229,  229,  230,  231,  231,  231,
      231,  231,  231,  232,  233,  234,  235,  236,  237,  227,
      705,  705,  451,  451,  451,  705,  705,  705,  486,  486,
      486,  451,  451,  451,  451,  705,  705,  226,  226,  226,
      226,  705,  451,  451,  451,  451,  451,  451,  226,  226,
      226,  226,  226,  226,  454,  454,  454,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  705,  705,  705,  705,  705,  705,
      454,  454,  454,  454,  454,  454,  454,  687,  687,  687,
      705,  454,  454,  454,  454,  454,  454,  454,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  641,  641,  641,  705,  705,  487,  488,  489,  490,
      200,  200,  200,  200,  491,   70,  705,   71,  226,  226,
      226,  200,  200,  200,  200,  200,  200,  226,  226,  226,
      226,  705,  705,  705,  705,  705,  705,  705,  226,  226,
      226,  226,  226,  226,  200,  200,  200,  705,   72,  613,

      613,  613,  705,  200,  200,  200,  200,  705,  705,  614,
      705,  614,  705,  705,  200,  200,  200,  200,  200,  200,
      705,  705,  614,  705,  614,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  642,
      643,  644,  645,  705,  705,  705,  705,  646,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,   73,   73,   73,   73,
       73,   74,   75,   75,   75,   75,   75,   75,   76,   77,
       78,   79,   80,   81,  705,  705,  705,  615,  616,  617,
      618,  705,  705,  705,  705,  619,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   82,  705,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      177,  177,  705,  177,  177,  178,  178,  178,  178,  178,
      178,  180,  180,  180,  180,  180,  180,  191,  191,  191,
      193,  193,  193,  193,  193,  193,  196,  705,  196,  705,
      196,  196,  196,  196,  196,  196,  196,  197,  705,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,   82,

      705,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       83,   83,  705,   83,   83,  208,  208,  208,  208,  208,
      208,  210,  210,  210,  210,  210,  210,  221,  221,  221,
      223,  223,  223,  223,  223,  223,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  257,  705,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  178,  178,
      178,  178,  178,  178,  330,  330,  330,  330,  330,  330,
      177,  177,  177,  177,  177,  177,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  196,  705,  196,  705,  196,
      196,  196,  196,  196,  196,  196,  197,  705,  197,  705,

      705,  197,  197,  197,  197,  197,  197,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,  208,
      208,  208,  208,  208,  208,  353,  353,  353,  353,  353,
      353,   83,   83,   83,   83,   83,   83,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  257,  705,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  208,  208,
      208,  208,  208,  208,  210,  210,  210,  210,  210,  210,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,

      200,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  208,  208,  208,  208,  208,  208,  210,
      210,  210,  210,  210,  210,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  208,  208,
      208,  208,  208,  208,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,    5,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705
    } ;

static yyconst flex_int16_t yy_chk[8830] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,   12,   12,   12,   14,   19,  755,   23,
       21,    3,    4,   10,   23,   10,   28,   28,   19,   21,
       21,   23,   14,   30,   30,   36,   37,   38,   36,   39,
       46,   39,  744,   37,   46,   40,   38,   39,   40,   37,
       39,   38,   49,   40,   37,   22,   10,   22,   22,   22,
       41,  410,   42,   49,   25,   41,   25,   25,   25,   42,
      410,  166,   51,   44,   47,   42,   25,   25,   25,   25,
       47,   43,  166,   35,   35,   35,   43,   44,   48,   25,

       25,   25,   66,   48,  296,  320,   25,   66,  296,   12,
       12,   12,   12,   12,   12,  320,   12,   12,   12,   12,
       51,   56,   56,   56,   56,   56,   56,   56,   81,   81,
       81,   35,  300,  300,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   15,  297,  172,   22,   22,   22,   22,   15,
       45,   45,  172,   22,   25,   25,   25,   25,  297,  720,
       45,   45,   25,   45,   61,   61,   61,   61,   61,   35,
       35,   35,   35,   35,   35,   15,   35,   35,   35,   35,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   60,

       60,   60,   60,  109,  109,  109,   60,   63,   63,   63,
       63,   63,   63,   63,   63,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  173,  301,  173,   60,  709,  301,
       63,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   79,   79,   79,   79,   79,   79,
      186,  186,  186,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   24,  686,   24,   24,   24,   87,   87,   87,   87,
       87,   87,   87,   24,   24,   24,   24,  308,   24,  195,
      195,  195,   72,  308,   72,  198,   24,   24,   24,   72,

      198,  302,  685,   24,   91,   91,   91,   91,   72,   72,
      306,   91,  302,  310,   24,   83,   83,   83,   92,   92,
       92,   92,   92,  306,  313,   72,   84,   84,   84,   72,
      312,  310,   91,   72,  107,  107,  107,  107,  107,  107,
       72,  313,  312,   72,  311,   72,   72,   88,   88,   88,
       88,   88,   88,   88,   88,   88,  216,  216,  216,  311,
      309,   24,   24,   24,   24,  225,  225,  225,  309,   24,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   69,  683,   69,  237,  237,

      237,   83,   83,   83,   83,   83,   83,  523,   83,   83,
       83,   83,   84,   84,   84,   84,   84,   84,  681,   84,
       84,   84,   84,  254,  254,  254,  314,  523,   69,   94,
       94,   94,   94,   94,   94,   94,   94,  100,  646,  100,
      256,  256,  256,  314,  100,  118,  118,  118,  118,  118,
      118,  118,   94,  100,  100,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  639,  638,
      100,  282,  282,  282,  100,  289,  289,  289,  100,  235,
      235,  235,  235,  235,  235,  100,  318,  317,  100,  318,
      100,  100,  291,  291,  291,  317,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   73,  637,   73,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  303,  120,  298,  120,  303,
      120,  315,  120,  316,  120,  315,  120,   73,  120,  120,
      428,  120,  428,  298,  298,  120,  316,  120,  133,  133,
      133,  133,  133,  133,  133,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  341,  341,  341,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   98,  117,  117,  117,  392,  392,  392,   98,

      394,  394,  394,  117,  117,  117,  413,  632,  132,  419,
      132,  132,  132,  400,  400,  400,  117,  117,  117,  132,
      132,  132,  132,  413,  419,   98,  126,  126,  126,  416,
      132,  132,  132,  132,  132,  132,  126,  126,  126,  416,
      127,  629,  127,  127,  127,  402,  402,  402,  423,  126,
      126,  126,  127,  127,  127,  127,  139,  139,  139,  139,
      139,  139,  139,  414,  423,  127,  127,  127,  415,  628,
      420,  414,  127,  187,  187,  187,  187,  187,  187,  187,
      619,  117,  117,  117,  117,  431,  415,  420,  426,  117,
      618,  431,  426,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,  101,  427,  554,  126,  126,  126,  126,  101,  424,
      427,  548,  126,  217,  217,  217,  217,  217,  217,  217,
      127,  127,  127,  127,  424,  135,  425,  135,  127,  135,
      430,  135,  547,  135,  101,  135,  429,  135,  135,  429,
      135,  434,  430,  425,  135,  434,  135,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  255,  255,  255,  255,
      255,  255,  255,  545,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  128,  433,  128,  128,  128,  261,
      261,  261,  261,  261,  261,  261,  128,  128,  128,  130,
      544,  130,  433,  543,  130,  130,  130,  542,  540,  128,
      128,  128,  405,  539,  130,  537,  130,  536,  138,  535,

      138,  138,  138,  448,  448,  448,  534,  130,  405,  130,
      138,  138,  138,  138,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  138,  138,  138,  531,  141,  405,  141,
      138,  141,  530,  141,  491,  141,  446,  141,  440,  141,
      141,  490,  141,  450,  450,  450,  141,  436,  141,  509,
      509,  509,  432,  422,  128,  128,  128,  128,  511,  511,
      511,  421,  128,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  130,  130,  130,  130,  418,  490,  417,  412,
      130,  179,  411,  179,  179,  179,  409,  386,  138,  138,
      138,  138,  385,  179,  179,  179,  138,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  179,  179,  179,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  228,
      378,  228,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  228,  228,  517,  517,  517,
      377,  179,  179,  179,  179,  519,  519,  519,  354,  179,
      200,  353,  200,  556,  556,  556,  228,  558,  558,  558,
      228,  625,  625,  625,  352,  645,  241,  228,  331,  330,

      228,  327,  228,  228,  322,  241,  241,  241,  627,  627,
      627,  319,  307,  200,  241,  241,  241,  241,  270,  270,
      270,  270,  270,  270,  270,  241,  241,  241,  241,  241,
      241,  645,  248,  305,  248,  304,  299,  248,  248,  248,
      677,  677,  677,  241,  679,  679,  679,  248,  274,  248,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      248,  273,  248,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  283,  283,  283,  283,  283,  283,  283,
      265,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  201,

      264,  201,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  214,  184,  174,  171,  248,  248,  248,  248,  170,
      169,  168,  201,  248,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  167,  165,  164,  162,  161,  258,
      258,  258,  160,  267,  267,  267,  159,  158,  157,  258,
      258,  258,  260,  156,  260,  155,  154,  260,  260,  260,
      153,  152,  258,  258,  258,  151,  150,  260,  148,  260,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  144,
      260,  143,  260,  290,  290,  290,  290,  290,  290,  290,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  202,  142,
      202,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      137,  136,  122,  121,  202,  202,  202,  258,  258,  258,
      258,  267,  267,  267,  267,  258,  116,   90,   67,  267,
       59,  202,   34,   29,   18,  260,  260,  260,  260,   13,
      263,    9,  263,  260,  263,    7,  263,    5,  263,    0,
      263,    0,  263,  263,    0,  263,    0,    0,    0,  263,
        0,  263,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  268,  268,  268,  272,    0,  272,    0,  272,    0,

      272,  268,  272,  268,  272,    0,  272,  272,    0,  272,
        0,    0,    0,  272,  268,  272,  268,    0,    0,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  203,    0,  203,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
        0,    0,    0,  203,  203,  203,  339,  339,  339,  339,
      339,  339,  203,  203,  203,  203,    0,    0,    0,    0,
      203,    0,    0,  203,  203,  203,  203,  203,  203,  268,
      268,  268,  268,  275,  275,  275,    0,  268,    0,    0,
        0,  203,  275,  275,  275,  275,    0,    0,  276,    0,

      276,  276,  276,  275,  275,  275,  275,  275,  275,  276,
      276,  276,  276,  276,  276,    0,    0,    0,    0,    0,
      276,  276,  276,  276,  276,  276,    0,    0,    0,    0,
      276,    0,    0,    0,  276,    0,    0,    0,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  204,    0,  204,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  204,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,

      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  324,
      324,  324,  324,  324,  324,  324,  325,  325,  325,  325,
      325,  325,  325,  325,  325,    0,    0,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  205,    0,  205,  328,  328,
      328,  328,  328,  328,  328,  328,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,    0,

        0,  328,    0,    0,    0,    0,    0,    0,  205,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  349,  349,
      349,  349,  349,  349,  349,  374,  374,  374,  374,  374,
      374,  374,    0,    0,    0,    0,    0,    0,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      226,  294,  294,  294,    0,    0,    0,  226,  344,  344,
      344,  344,  344,  344,  344,    0,    0,    0,    0,    0,
        0,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      332,    0,    0,  226,  294,    0,    0,  332,    0,    0,
        0,  295,  295,  295,    0,    0,  332,  332,    0,    0,
      321,    0,  321,  321,  321,    0,    0,    0,    0,    0,
        0,  295,  321,  321,  321,    0,    0,  332,    0,    0,
        0,  332,  321,    0,    0,  321,  321,  321,  332,    0,
        0,  332,    0,  332,  332,    0,    0,  294,  294,  294,
      294,  294,  294,    0,  294,  294,  294,  294,    0,    0,
        0,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  229,
        0,    0,    0,    0,    0,    0,  229,  295,  295,  295,

      295,  295,  295,    0,  295,  295,  295,  295,    0,    0,
      321,  321,  321,  321,    0,    0,    0,    0,  321,    0,
        0,    0,  229,  364,  364,  364,  364,  364,  364,  364,
        0,    0,    0,    0,    0,    0,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  382,  382,  382,  382,  382,
      382,  382,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  238,  358,  358,  358,  372,  372,  372,  238,
        0,    0,  358,  358,  358,  358,  393,  393,  393,  393,
      393,  393,  393,  358,  358,  358,  358,  358,  358,    0,
        0,  323,    0,  323,    0,  238,  323,  323,  323,    0,
        0,  358,  368,  368,  368,    0,  323,    0,  323,    0,
        0,  368,  368,  368,  368,    0,  323,    0,    0,  323,

        0,  323,  368,  368,  368,  368,  368,  368,    0,    0,
        0,  380,  380,  380,    0,  373,  373,  373,    0,    0,
      368,  648,  648,  648,    0,  373,    0,  373,  648,  648,
      648,  648,  648,  648,  372,  372,  372,  372,  373,    0,
      373,    0,  372,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  239,    0,    0,  323,  323,  323,  323,  239,    0,
        0,    0,  323,    0,    0,    0,    0,  239,  239,  239,
      375,  375,  375,  375,  375,  375,  375,  375,  375,    0,
        0,    0,    0,    0,  239,    0,    0,    0,    0,  380,

      380,  380,  380,  373,  373,  373,  373,  380,  376,    0,
      376,  373,  376,    0,  376,    0,  376,    0,  376,    0,
      376,  376,    0,  376,    0,    0,    0,  376,    0,  376,
        0,    0,    0,    0,  379,  379,  379,  401,  401,  401,
      401,  401,  401,  401,  379,  379,  379,  383,  383,  383,
      383,  383,  383,  383,  383,  383,    0,  379,  379,  379,
        0,    0,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      240,    0,    0,    0,    0,    0,    0,  240,  437,  437,
      437,  437,  437,  437,  437,    0,  240,  240,  240,    0,

        0,    0,    0,    0,    0,  240,  240,  240,  240,    0,
        0,    0,    0,  240,    0,    0,  240,  240,  240,  240,
      240,  240,  379,  379,  379,  379,    0,  384,    0,  384,
      379,  384,    0,  384,  240,  384,    0,  384,    0,  384,
      384,    0,  384,    0,    0,    0,  384,    0,  384,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,    0,
        0,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  333,    0,  333,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,    0,  333,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  342,
        0,  342,  381,  381,  381,  449,  449,  449,  449,  449,
      449,  449,  381,    0,  381,  342,  342,  342,  474,  474,
      474,  474,  474,  474,  474,  381,    0,  381,    0,    0,
        0,    0,  342,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  403,  403,  403,    0,    0,    0,    0,
        0,    0,  403,  403,  403,  403,    0,  403,    0,    0,
      404,  404,  404,  403,  403,  403,  403,  403,  403,  404,

      404,  404,  404,    0,  404,    0,    0,  403,    0,    0,
      404,  404,  404,  404,  404,  404,    0,    0,    0,    0,
      381,  381,  381,  381,  404,    0,    0,    0,  381,    0,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  343,    0,
      343,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      441,  441,  441,  441,  441,  441,  441,  441,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,    0,    0,
        0,  343,    0,  441,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  465,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,    0,    0,    0,
        0,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,    0,    0,
      346,    0,  346,    0,  346,    0,  346,    0,  346,    0,
      346,    0,  346,  346,    0,  346,    0,    0,    0,  346,
        0,  346,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,    0,    0,  347,    0,  347,
        0,  347,    0,  347,    0,  347,    0,  347,    0,  347,
      347,    0,  347,    0,    0,    0,  347,    0,  347,  347,
      348,    0,  348,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  348,  348,  348,    0,

        0,    0,    0,    0,    0,  348,  348,  348,  348,    0,
        0,    0,    0,  348,    0,    0,  348,  348,  348,  348,
      348,  348,  454,  454,  454,    0,    0,    0,    0,    0,
        0,  454,  454,  454,  454,  460,  460,  460,  460,  460,
      460,  460,  454,  454,  454,  454,  454,  454,  460,  460,
      460,  460,  460,  460,  460,  460,  460,    0,    0,    0,
      454,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  475,  475,  475,  475,  475,  475,
      475,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  355,  407,    0,  407,  407,
      407,    0,  355,    0,    0,    0,    0,    0,  407,  407,
      407,  483,  483,  483,  483,  483,  483,  483,    0,    0,

        0,  407,  407,  407,  406,    0,  406,    0,  355,  406,
      406,  406,  487,  487,  487,  487,  487,  487,  487,  406,
        0,  406,    0,  408,    0,  408,  408,  408,    0,  524,
      524,  524,  406,    0,  406,  408,  408,  408,  408,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  408,  408,
      408,    0,  470,  470,  470,  408,  470,  470,  470,  470,
      470,  470,  470,    0,    0,    0,  407,  407,  407,  407,
        0,    0,    0,    0,  407,    0,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  356,    0,    0,  406,  406,  406,

      406,  356,    0,    0,    0,  406,    0,    0,    0,    0,
      356,  356,  356,  408,  408,  408,  408,  524,  524,  524,
      524,  408,    0,    0,    0,  524,    0,  356,  435,  435,
      435,  510,  510,  510,  510,  510,  510,  510,  435,    0,
      435,  471,  471,  471,  471,  471,  471,  471,  435,    0,
        0,  435,  486,  435,  471,  471,  471,  471,  471,  471,
      471,  486,  486,  486,    0,  442,    0,  442,  442,  442,
      486,  486,  486,  486,    0,    0,    0,  442,  442,  442,
        0,  486,  486,  486,  486,  486,  486,    0,    0,    0,
      442,  442,  442,    0,    0,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  357,    0,    0,  435,  435,  435,  435,
      357,    0,    0,    0,  435,  649,  649,  649,    0,  357,
      357,  357,  649,  649,  649,  649,  649,  649,  357,  357,
      357,  357,    0,    0,    0,    0,  357,    0,    0,  357,
      357,  357,  357,  357,  357,  442,  442,  442,  442,    0,
        0,    0,    0,  442,    0,    0,    0,  357,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  472,  472,  472,    0,  472,  472,

      472,  472,  472,  472,  472,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  359,  359,  359,    0,    0,    0,  473,  473,
      473,  359,  359,  359,  359,    0,    0,  473,  473,  473,
      473,    0,  359,  359,  359,  359,  359,  359,  473,  473,
      473,  473,  473,  473,    0,    0,    0,    0,    0,    0,
      359,    0,    0,    0,    0,    0,  473,    0,    0,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  362,  518,  518,  518,  518,  518,  518,

      518,    0,  362,  362,  362,    0,    0,    0,    0,    0,
        0,  362,  362,  362,  362,  478,  478,  478,  478,  478,
      478,  478,  362,  362,  362,  362,  362,  362,  478,  478,
      478,  478,  478,  478,  478,  478,  478,    0,    0,    0,
      362,  488,  488,  488,  488,  488,  488,  488,    0,    0,
        0,    0,    0,    0,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  489,    0,  489,    0,  489,    0,  489,
        0,  489,    0,  489,    0,  489,  489,    0,  489,    0,
        0,    0,  489,    0,  489,    0,    0,    0,    0,    0,
      362,  362,  362,  362,    0,    0,    0,    0,  362,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,    0,    0,
      366,    0,  366,    0,  366,    0,  366,    0,  366,    0,

      366,    0,  366,  366,    0,  366,    0,    0,    0,  366,
        0,  366,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,    0,    0,  367,    0,  367,
        0,  367,    0,  367,    0,  367,    0,  367,    0,  367,
      367,    0,  367,    0,    0,    0,  367,    0,  367,  367,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  451,
        0,  451,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,    0,    0,
        0,    0,  451,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  498,  498,  498,    0,  498,  498,  498,  498,
      498,  498,  498,  500,  500,  500,    0,  500,  500,  500,
      500,  500,  500,  500,    0,    0,    0,    0,    0,    0,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  452,    0,
      452,    0,    0,    0,  499,  499,  499,  499,  499,  499,
      499,    0,    0,    0,  452,  452,  452,  499,  499,  499,
      499,  499,  499,  499,  501,  501,  501,    0,    0,    0,
        0,  452,    0,  501,  501,  501,  501,  527,  527,  527,
      527,  527,  527,  527,  501,  501,  501,  501,  501,  501,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  453,    0,  453,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
        0,    0,    0,  453,  453,  453,    0,    0,    0,    0,
        0,    0,  453,  453,  453,  453,    0,    0,    0,    0,
      453,    0,    0,  453,  453,  453,  453,  453,  453,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,    0,
        0,  453,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  529,    0,  529,    0,  529,    0,  529,    0,
      529,    0,  529,    0,  529,  529,    0,  529,    0,    0,
        0,  529,    0,  529,    0,    0,    0,    0,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  455,  455,  455,    0,
        0,    0,    0,    0,    0,  455,  455,  455,  455,  557,
      557,  557,  557,  557,  557,  557,  455,  455,  455,  455,
      455,  455,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,    0,    0,  455,  567,  567,  567,  567,  567,
      567,  567,    0,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  458,    0,  458,
      520,  520,  520,  597,  597,  597,  597,  597,  597,  597,
      520,  520,  520,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  520,  520,  520,    0,    0,    0,    0,
      458,  521,  521,  521,    0,  612,  612,  612,    0,    0,
      522,  521,  522,  521,    0,  522,  522,  522,    0,  525,
      525,  525,    0,    0,  521,  522,  521,  522,    0,  525,
        0,  525,    0,    0,  532,  532,  532,    0,  522,    0,
      522,    0,  525,    0,  525,  533,  533,  533,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  520,  520,

      520,  520,    0,    0,    0,    0,  520,    0,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  459,    0,  459,  521,
      521,  521,  521,  612,  612,  612,  612,  521,    0,    0,
        0,  612,    0,  522,  522,  522,  522,  525,  525,  525,
      525,  522,    0,    0,    0,  525,    0,    0,    0,  459,
      532,  532,  532,  532,  532,  532,    0,  532,  532,  532,
      532,  533,  533,  533,  533,  533,  533,    0,  533,  533,
      533,  533,  598,  598,  598,  598,  598,  598,  598,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,    0,    0,  462,    0,

      462,    0,  462,    0,  462,    0,  462,    0,  462,    0,
      462,  462,    0,  462,    0,    0,    0,  462,    0,  462,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,    0,    0,  463,    0,  463,    0,  463,
        0,  463,    0,  463,    0,  463,    0,  463,  463,    0,
      463,    0,    0,    0,  463,    0,  463,  463,  464,    0,
      464,  550,  550,  550,  594,  594,  594,  594,  594,  594,
      594,  550,    0,  550,  464,  464,  464,  594,  594,  594,
      594,  594,  594,  594,  550,    0,  550,    0,    0,    0,
      559,  464,  559,  559,  559,  615,  615,  615,  615,  615,

      615,  615,  559,  559,  559,  562,  562,  562,  562,  562,
      562,  562,    0,    0,    0,  559,  559,  559,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,    0,    0,  550,
      550,  550,  550,    0,    0,    0,    0,  550,    0,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  476,    0,    0,
      559,  559,  559,  559,  476,    0,    0,    0,  559,  576,
      576,  576,    0,  476,  476,  476,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,    0,    0,    0,    0,
      476,  577,  577,  577,  577,  577,  577,  577,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  578,  578,  578,
        0,    0,    0,    0,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  583,  583,  583,  583,  583,  583,
      583,    0,    0,    0,    0,    0,    0,  583,  583,  583,
      583,  583,  583,  583,  583,  583,    0,    0,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  477,  580,  580,  580,

        0,    0,    0,  477,    0,    0,  580,  580,  580,  580,
      626,  626,  626,  626,  626,  626,  626,  580,  580,  580,
      580,  580,  580,    0,    0,    0,    0,    0,    0,  477,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,    0,    0,    0,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,    0,    0,  480,    0,
      480,    0,  480,    0,  480,    0,  480,    0,  480,    0,
      480,  480,    0,  480,    0,    0,    0,  480,    0,  480,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,    0,    0,  481,    0,  481,    0,  481,
        0,  481,    0,  481,    0,  481,    0,  481,  481,    0,
      481,    0,    0,    0,  481,    0,  481,  481,  482,    0,
        0,    0,  593,  593,  593,  482,  593,  593,  593,  593,
      593,  593,  593,    0,  482,  482,  482,    0,    0,    0,
        0,    0,    0,  482,  482,  482,  482,    0,    0,    0,
        0,  482,    0,    0,  482,  482,  482,  482,  482,  482,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  592,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  592,  592,  595,
      595,  595,    0,  595,  595,  595,  595,  595,  595,  595,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  492,    0,    0,    0,    0,    0,  599,
        0,    0,  492,  492,  492,    0,    0,    0,  599,  599,
      599,  492,  492,  492,  492,    0,    0,  599,  599,  599,
      599,    0,  492,  492,  492,  492,  492,  492,  599,  599,
      599,  599,  599,  599,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,    0,    0,    0,    0,
      492,  492,  492,  492,    0,    0,    0,    0,  492,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  560,    0,  560,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  560,  560,  560,  605,  605,  605,    0,
      605,  605,  605,  605,  605,  605,  605,    0,    0,    0,

      560,  606,  606,  606,  606,  606,  606,  606,    0,    0,
        0,    0,    0,    0,  606,  606,  606,  606,  606,  606,
      606,  607,  607,  607,    0,  607,  607,  607,  607,  607,
      607,  607,  609,  609,  609,  610,  610,  610,    0,    0,
        0,  609,  609,  609,  609,  610,    0,  610,    0,    0,
        0,    0,  609,  609,  609,  609,  609,  609,  610,    0,
      610,  642,  642,  642,  642,  642,  642,  642,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  561,  617,  561,  617,
        0,  617,    0,  617,    0,  617,    0,  617,    0,  617,

      617,    0,  617,    0,    0,    0,  617,    0,  617,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  561,
        0,    0,    0,  610,  610,  610,  610,    0,    0,    0,
        0,  610,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  657,  657,  657,  657,  657,  657,  657,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,

      561,  561,  561,  561,  561,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,    0,    0,  564,    0,
      564,    0,  564,    0,  564,    0,  564,    0,  564,    0,
      564,  564,    0,  564,    0,    0,    0,  564,    0,  564,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,    0,    0,  565,    0,  565,    0,  565,

        0,  565,    0,  565,    0,  565,    0,  565,  565,    0,
      565,    0,    0,    0,  565,    0,  565,  565,  566,    0,
      566,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,    0,    0,    0,  566,  566,  566,    0,    0,    0,
        0,    0,    0,  566,  566,  566,  566,    0,    0,    0,
        0,  566,    0,    0,  566,  566,  566,  566,  566,  566,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      641,  641,  641,    0,    0,    0,    0,    0,    0,  641,
      641,  641,  641,  643,  643,  643,  643,  643,  643,  643,
      641,  641,  641,  641,  641,  641,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,    0,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  570,    0,  570,  611,  611,  611,  644,
        0,  644,    0,  644,    0,  644,  611,  644,  611,  644,
        0,  644,  644,    0,  644,    0,    0,    0,  644,  611,
      644,  611,    0,    0,    0,    0,  570,  613,  613,  613,
        0,  640,  640,  640,    0,    0,    0,  613,    0,  613,
        0,  640,    0,  640,    0,    0,    0,    0,    0,    0,
      613,    0,  613,    0,  640,    0,  640,    0,  647,  647,
      647,    0,    0,    0,  652,  652,  652,  647,  647,  647,
      647,  652,  652,  652,  652,  652,  652,    0,  647,  647,

      647,  647,  647,  647,  611,  611,  611,  611,    0,    0,
        0,    0,  611,    0,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  571,    0,  571,  613,  613,  613,  613,  640,
      640,  640,  640,  613,    0,    0,    0,  640,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,    0,    0,    0,    0,  571,  647,  647,  647,  647,
        0,  653,  653,  653,  647,  653,  653,  653,  653,  653,
      653,  653,  655,  655,  655,    0,  655,  655,  655,  655,
      655,  655,  655,    0,    0,  571,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  579,    0,  579,    0,    0,    0,  654,  654,  654,
      654,  654,  654,  654,    0,    0,    0,  579,  579,  579,
      654,  654,  654,  654,  654,  654,  654,  656,  656,  656,
        0,    0,    0,    0,  579,    0,  656,  656,  656,  656,
      658,  658,  658,  658,  658,  658,  658,  656,  656,  656,

      656,  656,  656,  660,  660,  660,    0,    0,    0,  661,
      661,  661,  660,  660,  660,  660,  661,  661,  661,  661,
      661,  661,    0,  660,  660,  660,  660,  660,  660,  662,
      662,  662,    0,    0,    0,    0,  662,  662,  662,  662,
      662,  662,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      581,    0,    0,    0,    0,    0,    0,  581,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  666,  666,  666,    0,  666,  666,  666,  666,  666,

      666,  666,    0,  581,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  665,  665,  665,
        0,    0,    0,    0,  665,  665,  665,  665,  665,  665,
      667,  667,  667,  667,  667,  667,  667,    0,    0,    0,
        0,    0,    0,  667,  667,  667,  667,  667,  667,  667,
      668,  668,  668,    0,  668,  668,  668,  668,  668,  668,
      668,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  582,
      670,  670,  670,    0,    0,    0,  582,    0,  671,  670,

      670,  670,  670,    0,    0,    0,    0,  671,  671,  671,
      670,  670,  670,  670,  670,  670,  671,  671,  671,  671,
        0,    0,  582,    0,    0,    0,    0,  671,  671,  671,
      671,  671,  671,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,    0,
        0,  585,    0,  585,    0,  585,    0,  585,    0,  585,
        0,  585,    0,  585,  585,    0,  585,    0,    0,    0,
      585,    0,  585,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,    0,    0,  586,    0,

      586,    0,  586,    0,  586,    0,  586,    0,  586,    0,
      586,  586,    0,  586,    0,    0,    0,  586,    0,  586,
      586,  587,  669,  669,  669,    0,    0,    0,  587,    0,
        0,  669,  669,  669,  669,    0,    0,  587,  587,  587,
        0,    0,  669,  669,  669,  669,  669,  669,    0,    0,
        0,    0,    0,    0,  587,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  678,  678,  678,  678,  678,
      678,  678,    0,  680,  680,  680,    0,    0,    0,  687,
      687,  687,    0,  680,    0,  680,    0,    0,  687,  687,
      687,  687,    0,    0,    0,    0,  680,    0,  680,  687,

      687,  687,  687,  687,  687,    0,    0,    0,    0,    0,
      669,  669,  669,  669,    0,    0,    0,    0,  669,    0,
        0,    0,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      596,    0,    0,    0,  693,  693,  693,  596,  693,  693,
      693,  693,  693,  693,  693,    0,  596,  596,  596,    0,
        0,  680,  680,  680,  680,  596,  596,  596,  596,  680,
        0,    0,    0,  596,    0,    0,  596,  596,  596,  596,
      596,  596,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,    0,    0,    0,    0,    0,    0,
        0,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  608,
        0,    0,  697,  697,  697,    0,    0,    0,  608,  608,
      608,  697,  697,  697,  697,    0,    0,  608,  608,  608,
      608,    0,  697,  697,  697,  697,  697,  697,  608,  608,
      608,  608,  608,  608,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  692,  692,  692,  692,  694,  694,  694,
      694,  694,  694,  694,    0,    0,    0,    0,    0,    0,
      694,  694,  694,  694,  694,  694,  694,  695,  695,  695,
        0,  695,  695,  695,  695,  695,  695,  695,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  696,  696,  696,    0,    0,  608,  608,  608,  608,
      696,  696,  696,  696,  608,  659,    0,  659,  698,  698,
      698,  696,  696,  696,  696,  696,  696,  698,  698,  698,
      698,    0,    0,    0,    0,    0,    0,    0,  698,  698,
      698,  698,  698,  698,  704,  704,  704,    0,  659,  699,

      699,  699,    0,  704,  704,  704,  704,    0,    0,  699,
        0,  699,    0,    0,  704,  704,  704,  704,  704,  704,
        0,    0,  699,    0,  699,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  696,
      696,  696,  696,    0,    0,    0,    0,  696,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,    0,    0,    0,  699,  699,  699,
      699,    0,    0,    0,    0,  699,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  708,    0,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      711,  711,    0,  711,  711,  712,  712,  712,  712,  712,
      712,  713,  713,  713,  713,  713,  713,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  716,    0,  716,    0,
      716,  716,  716,  716,  716,  716,  716,  717,    0,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  719,

        0,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      721,  721,    0,  721,  721,  722,  722,  722,  722,  722,
      722,  723,  723,  723,  723,  723,  723,  724,  724,  724,
      725,  725,  725,  725,  725,  725,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  727,    0,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  728,  728,
      728,  728,  728,  728,  729,  729,  729,  729,  729,  729,
      730,  730,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  731,  732,  732,  732,  733,    0,  733,    0,  733,
      733,  733,  733,  733,  733,  733,  734,    0,  734,    0,

        0,  734,  734,  734,  734,  734,  734,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  737,
      737,  737,  737,  737,  737,  738,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  739,  740,  740,  740,
      740,  740,  740,  741,  741,  741,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  743,    0,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  745,  745,
      745,  745,  745,  745,  746,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  750,  751,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  756,  756,
      756,  756,  756,  756,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "cc.ll"
#line 2 "cc.ll"
/*--   Copyright (C) 2009 Jonathan Schmidt-Dominé <devel@the-user.org>
--   Derived from the KDevelop-Java-Lexer
--
--   This library is free software; you can redistribute it and/or
--   modify it under the terms of the GNU Library General Public
--   License as published by the Free Software Foundation; either
--   version 2 of the License, or (at your option) any later version.
--
--   This library is distributed in the hope that it will be useful,
--   but WITHOUT ANY WARRANTY; without even the implied warranty of
--   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--   Library General Public License for more details.
--
--   You should have received a copy of the GNU Library General Public License
--   along with this library; see the file COPYING.LIB.  If not, write to
--   the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
--   Boston, MA 02111-1307, USA.*/
#line 27 "cc.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "lexer.h"
#include <kdebug.h>

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* \u0024, \u0041-\u005a, \u005f, \u0061-\u007a: one byte in UTF-8 */
/* \u00c0-\u00d6, \u00d8-\u00f6, \u00f8-\u00ff */
/* \u0100-\u1fff */
/* \u3040-\u318f */
/* \u3300-\u337f */
/* \u3400-\u3d2d */
/* \u4e00-\u9fff */
/* \uf900-\ufaff */
/* \u0030-\u0039: ISO-LATIN-1 digits */
/* \u0660-\u0669, \u06f0-\u06f9: Arabic-Indic and extended Ar.-Indic digits */
/* \u0966-\u096f, \u09e6-\u09ef: Devanagari digits */
/* \u0a66-\u0a6f, \u0ae6-\u0aef */
/* \u0b66-\u0b6f, \u0be7-\u0bef */
/* \u0c66-\u0c6f, \u0ce6-\u0cef, \u0d66-\u0d6f */
/* \u0e50-\u0e59, \u0ed0-\u0ed9 */
/* \u1040-\u1049 */
/* \uff10-\uff19: Fullwidth digits */
/* \u0080-\uffff */
/* \u10000-\u1fffff */
/* \u200000-\u3ffffff */
/* \u4000000-\u7fffffff */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* non-Unicode stuff */

#line 2659 "cclexer.cpp"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 122 "cc.ll"


 /* whitespace, newlines, preprocessor-statements and comments */

#line 2765 "cclexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 706 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8708 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 126 "cc.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 127 "cc.ll"
/* skip */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 129 "cc.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 130 "cc.ll"
/* preprocessor statement, skip */ ;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "cc.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 6:
YY_RULE_SETUP
#line 134 "cc.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 135 "cc.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 136 "cc.ll"
/* skip */ ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 137 "cc.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 138 "cc.ll"
{
    kDebug() << "Encountered end of file in an unclosed block comment";
    return Parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 10:
YY_RULE_SETUP
#line 147 "cc.ll"
return Parser::Token_LPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 148 "cc.ll"
return Parser::Token_RPAREN;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 149 "cc.ll"
return Parser::Token_LBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 150 "cc.ll"
return Parser::Token_RBRACE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 151 "cc.ll"
return Parser::Token_LBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 152 "cc.ll"
return Parser::Token_RBRACKET;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 153 "cc.ll"
return Parser::Token_COMMA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 154 "cc.ll"
return Parser::Token_SEMICOLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 155 "cc.ll"
return Parser::Token_DOT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "cc.ll"
return Parser::Token_ARROW;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 157 "cc.ll"
return Parser::Token_COLON;
	YY_BREAK
/* operators */
case 21:
YY_RULE_SETUP
#line 162 "cc.ll"
return Parser::Token_QUESTION;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 163 "cc.ll"
return Parser::Token_NOT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "cc.ll"
return Parser::Token_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 165 "cc.ll"
return Parser::Token_EQUAL_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 166 "cc.ll"
return Parser::Token_LESS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 167 "cc.ll"
return Parser::Token_LESS_EQUAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 168 "cc.ll"
return Parser::Token_GREATER;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 169 "cc.ll"
return Parser::Token_GREATER_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 170 "cc.ll"
return Parser::Token_NOT_EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 171 "cc.ll"
return Parser::Token_AND_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 172 "cc.ll"
return Parser::Token_OR_OR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 173 "cc.ll"
return Parser::Token_PLUS_PLUS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 174 "cc.ll"
return Parser::Token_MINUS_MINUS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 175 "cc.ll"
return Parser::Token_EQUAL;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 176 "cc.ll"
return Parser::Token_PLUS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 177 "cc.ll"
return Parser::Token_PLUS_EQUAL;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 178 "cc.ll"
return Parser::Token_MINUS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 179 "cc.ll"
return Parser::Token_MINUS_EQUAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 180 "cc.ll"
return Parser::Token_STAR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 181 "cc.ll"
return Parser::Token_STAR_EQUAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 182 "cc.ll"
return Parser::Token_DIVIDE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 183 "cc.ll"
return Parser::Token_DIVIDE_EQUAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 184 "cc.ll"
return Parser::Token_AND;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 185 "cc.ll"
return Parser::Token_AND_EQUAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 186 "cc.ll"
return Parser::Token_OR;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 187 "cc.ll"
return Parser::Token_OR_EQUAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 188 "cc.ll"
return Parser::Token_XOR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 189 "cc.ll"
return Parser::Token_XOR_EQUAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 190 "cc.ll"
return Parser::Token_REMAINDER;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 191 "cc.ll"
return Parser::Token_REMAINDER_EQUAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 192 "cc.ll"
return Parser::Token_LSHIFT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 193 "cc.ll"
return Parser::Token_LSHIFT_EQUAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 194 "cc.ll"
return Parser::Token_RSHIFT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 195 "cc.ll"
return Parser::Token_RSHIFT_EQUAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 196 "cc.ll"
return Parser::Token_ELLIPSIS;
	YY_BREAK
/* keywords */
case 56:
YY_RULE_SETUP
#line 200 "cc.ll"
return Parser::Token_BREAK;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 201 "cc.ll"
return Parser::Token_CASE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 202 "cc.ll"
return Parser::Token_CONTINUE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 203 "cc.ll"
return Parser::Token_DEFAULT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 204 "cc.ll"
return Parser::Token_DO;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 205 "cc.ll"
return Parser::Token_ELSE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 206 "cc.ll"
return Parser::Token_ENUM;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 207 "cc.ll"
return Parser::Token_FOR;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 208 "cc.ll"
return Parser::Token_GOTO;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 209 "cc.ll"
return Parser::Token_IF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 210 "cc.ll"
return Parser::Token_RETURN;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 211 "cc.ll"
return Parser::Token_SWITCH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 212 "cc.ll"
return Parser::Token_WHILE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 213 "cc.ll"
return Parser::Token_STATIC;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 214 "cc.ll"
return Parser::Token_VOLATILE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "cc.ll"
return Parser::Token_CONST;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 216 "cc.ll"
return Parser::Token_TYPEDEF;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "cc.ll"
return Parser::Token_EXTERN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 218 "cc.ll"
return Parser::Token_AUTO;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 219 "cc.ll"
return Parser::Token_REGISTER;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 220 "cc.ll"
return Parser::Token_VOID;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 221 "cc.ll"
return Parser::Token_INT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 222 "cc.ll"
return Parser::Token_CHAR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 223 "cc.ll"
return Parser::Token_SHORT;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 224 "cc.ll"
return Parser::Token_LONG;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 225 "cc.ll"
return Parser::Token_SIGNED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 226 "cc.ll"
return Parser::Token_UNSIGNED;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 227 "cc.ll"
return Parser::Token_FLOAT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 228 "cc.ll"
return Parser::Token_DOUBLE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 229 "cc.ll"
return Parser::Token_UNION;
	YY_BREAK
/* characters and strings (C with unicode-support) */
case 86:
YY_RULE_SETUP
#line 233 "cc.ll"
return Parser::Token_X_CONSTANT;
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 234 "cc.ll"
{
    kDebug() << QString("Invalid character literal: %1").arg(yytext);
    return Parser::Token_X_CONSTANT;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 239 "cc.ll"
return Parser::Token_STRING_LITERAL;
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 240 "cc.ll"
{
    kDebug() << QString("Invalid string literal: %1").arg(yytext);
    return Parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* identifiers and number literals */
case 90:
YY_RULE_SETUP
#line 248 "cc.ll"
return Parser::Token_IDENTIFIER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 250 "cc.ll"
return Parser::Token_X_CONSTANT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 251 "cc.ll"
return Parser::Token_X_CONSTANT;
	YY_BREAK
/* everything else is not a valid lexeme */
case 93:
YY_RULE_SETUP
#line 256 "cc.ll"
{
                        kDebug() << "INVALID TOKEN";
                        exit(-1);
                   }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 261 "cc.ll"
ECHO;
	YY_BREAK
#line 3346 "cclexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 706 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 706 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 705);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 261 "cc.ll"



namespace cc
{

Lexer::Lexer( Parser *parser, char *contents )
{
    restart( parser, contents );
}

void Lexer::restart( Parser *parser, char *contents )
{
    m_parser = parser;
    m_locationTable = parser->tokenStream->locationTable();
    m_contents = contents;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;

    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':
        m_locationTable->newline( m_currentOffset - 1 );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

} // end of namespace cc

