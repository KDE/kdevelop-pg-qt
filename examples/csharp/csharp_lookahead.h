/*****************************************************************************
 * This file is part of KDevelop.                                            *
 * Copyright (c) 2005-2006 Jakob Petsovits <jpetso@gmx.at>                   *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/

#ifndef csharp_lookahead_h_INCLUDED
#define csharp_lookahead_h_INCLUDED

#include "csharp.h"


namespace csharp
{

/**
 * This class implements a way to make up for the missing LL(k) features
 * in kdevelop-pg. For the rules in need, it provides methods that use
 * lookahead to check if the upcoming tokens will match that rule.
 * These methods are modified versions of some of the autogenerated
 * methods from the parser class.
 *
 * When backtracking or real LL(k) is implemented in kdevelop-pg,
 * this class can hopefully be removed and replaced by statements
 * inside the grammar, in order to reduce maintenance.
 */
class lookahead {

public:
    lookahead(parser* parser);

    bool is_unbound_type_name();
    bool is_local_variable_declaration_start();
    bool is_cast_expression_start();
    bool is_type();
    bool is_unmanaged_type_suffix();
    bool is_managed_type();
    bool is_non_array_type();
    bool is_optionally_nullable_type();
    bool is_non_nullable_type();
    bool is_type_name();
    bool is_namespace_or_type_name_part();
    bool is_simple_type();
    bool is_numeric_type();
    bool is_floating_point_type();
    bool is_integral_type();
    bool is_builtin_class_type();
    bool is_rank_specifier();
    bool is_type_arguments();
    bool is_type_arguments_or_parameters_end();
    bool is_identifier();

private:
    // Increases _M_count and fetches LA(_M_count) into _M_token
    void fetch_next_token();

    // The instance of the parser class
    parser* _M_parser;

    // The currently inspected lookahead token
    int _M_token;

    // Counter variable for the currently inspected lookahead token
    int _M_count;

    // Counter variable for type arguments nesting
    int _M_ltCounter;

    // Flag to remember if a type rule is something like "a.b.c" or a built-in
    // type. Helps to improve correctness for cast expression lookaheads.
    bool _M_is_type_name;
};

} // end of namespace csharp

#endif  // csharp_lookahead_h_INCLUDED
