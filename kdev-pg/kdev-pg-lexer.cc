#line 2 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#line 4 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[298] =
    {   0,
        1,    1,   82,   82,   43,   43,   58,   58,   61,   61,
       77,   77,   91,   89,   90,    1,   89,   90,    2,   90,
        2,   89,   90,   89,   90,   10,   89,   90,   89,   90,
        6,   89,   90,    7,   89,   90,   15,   89,   90,   14,
       89,   90,    8,   89,   90,   89,   90,   11,   89,   90,
        9,   87,   89,   90,   87,   89,   90,   12,   89,   90,
       89,   90,   13,   89,   90,   16,   89,   90,   17,   89,
       90,   85,   86,   89,   90,   54,   89,   90,   86,   89,
       90,   86,   89,   90,   86,   89,   90,   18,   89,   90,
       82,   90,   81,   90,   81,   90,   83,   90,   53,   90,

       43,   53,   90,   44,   90,   44,   53,   90,   45,   53,
       90,   52,   53,   90,   53,   90,   53,   90,   53,   90,
       58,   90,   55,   90,   55,   90,   57,   90,   59,   90,
       60,   90,   75,   90,   61,   75,   90,   62,   90,   62,
       75,   90,   65,   75,   90,   75,   90,   73,   75,   90,
       64,   75,   90,   72,   75,   90,   73,   75,   90,   74,
       75,   90,   73,   75,   90,   73,   75,   90,   73,   75,
       90,   73,   75,   90,   73,   75,   90,   77,   79,   90,
       76,   90,   76,   79,   90,   78,   79,   90,    1,    2,
       88,   38,   39,    3,    5,   87,    4,   86,   85,   86,

       80,   86,   86,   82,   81,   83,   83,   84,   43,   44,
       58,   55,   56,   61,   62,   63,   73,   64,   73,   73,
       73,   73,   73,   73,   73,   77,   76,   88,    3,   86,
       86,   56,   63,   73,   73,   73,   73,   73,   73,   34,
       35,   86,   73,   73,   69,   73,   73,   73,   73,   40,
       36,   37,   21,   86,   73,   73,   73,   70,   73,   73,
       42,   41,   24,   46,   73,   66,   73,   73,   73,   47,
       73,   73,   73,   68,   73,   73,   71,   73,   32,   48,
       67,   73,   26,   51,   31,   19,   50,   49,   33,   27,
       20,   22,   25,   28,   30,   23,   29

    } ;

static yyconst flex_int16_t yy_accept[358] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   16,   19,   21,   24,   26,   29,
       31,   34,   37,   40,   43,   46,   48,   51,   55,   58,
       61,   63,   66,   69,   72,   76,   79,   82,   85,   88,
       91,   93,   95,   97,   99,  101,  104,  106,  109,  112,
      115,  117,  119,  121,  123,  125,  127,  129,  131,  133,
      135,  138,  140,  143,  146,  148,  151,  154,  157,  160,
      163,  166,  169,  172,  175,  178,  181,  183,  186,  189,
      190,  191,  191,  192,  192,  193,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  195,  196,  197,  198,  199,

      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  211,  211,  211,  211,  212,  213,  213,  214,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  227,  228,  228,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  230,  231,
      232,  232,  232,  232,  232,  232,  232,  232,  233,  233,
      234,  235,  236,  237,  238,  239,  240,  240,  241,  241,
      241,  241,  241,  241,  242,  242,  242,  242,  243,  243,
      243,  243,  243,  243,  243,  243,  244,  245,  247,  248,
      249,  250,  250,  250,  251,  251,  251,  251,  252,  252,

      253,  253,  255,  255,  255,  255,  255,  255,  255,  255,
      256,  257,  258,  260,  261,  261,  261,  261,  261,  261,
      262,  262,  263,  264,  264,  264,  264,  264,  264,  264,
      264,  265,  266,  268,  269,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  271,  271,
      272,  273,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  276,  277,  279,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  281,  283,  283,  283,  283,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  285,

      285,  286,  286,  286,  286,  286,  286,  286,  287,  287,
      288,  289,  289,  289,  290,  290,  290,  291,  291,  292,
      292,  293,  293,  293,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  295,  295,  295,  295,  295,  296,  296,  297,  297,
      297,  297,  297,  297,  297,  298,  298
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    7,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       26,   27,   28,    1,   29,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   39,   46,   47,   48,   49,   50,   39,   51,
       52,   39,    1,   53,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[54] =
    {   0,
        1,    1,    2,    2,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    5,    6,    1,
        1,    1,    1,    1,    4,    3,    1,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[374] =
    {   0,
        0,    0,   51,   53,   70,  114,   55,   58,  159,    0,
       61,   63,  596,  597,  593,  597,  591,   63,  597,  193,
      597,  597,  597,  597,  597,   63,  597,   71,   75,  597,
      574,  597,  597,  597,   64,  574,    0,  561,  544,  597,
        0,  597,  586,   76,  597,  586,  597,  584,  597,  597,
      542,  551,   49,    0,  597,  581,   70,  597,  597,  597,
      581,  597,  579,  597,  568,    0,  578,  597,   83,  597,
       89,   91,   93,   95,   97,    0,  597,  576,  597,  576,
      597,  114,  597,  115,  597,  597,  530,  538,  524,  540,
      543,   94,  534,   87,    0,  597,  116,  597,    0,  101,

      597,  523,  518,    0,  597,  116,  125,  597,  567,  597,
      525,  104,  110,  536,    0,  597,  123,  597,  213,  564,
      597,    0,    0,  563,  139,  209,  200,  204,  212,  215,
      227,    0,  597,  225,  230,  241,  516,  520,  517,  526,
      518,  513,  511,  523,  520,  509,  514,    0,  521,  537,
      504,  509,  501,  498,  499,  505,  242,  243,  244,    0,
      234,  243,  245,  247,  250,  259,  516,  597,  500,  495,
      508,  111,  493,  597,  503,  496,  504,  500,  490,  487,
      504,  487,  502,  497,  492,  261,  264,  269,  271,  273,
      277,  265,  483,  597,  481,  484,  492,  597,  477,  597,

      481,    0,  238,  477,  476,  472,  472,  487,  486,  284,
      288,  292,  294,  296,  487,  465,  481,  466,  468,  597,
      466,  597,  482,  478,  468,  459,  477,  474,  471,  456,
      597,  303,  305,  307,  309,  456,  454,  471,  471,  469,
      120,  451,  453,  455,  463,  446,  445,  597,  458,  312,
      315,  319,  457,  444,  456,  446,  455,  225,  445,  437,
      434,  452,  434,  443,  436,  446,  323,  325,  327,  597,
      448,  443,  446,  441,  184,  440,  443,  426,  437,  440,
      425,  424,  421,  597,  331,  437,  419,  432,  597,  416,
      414,  429,  409,  416,  398,  406,  387,  384,  597,  380,

      597,  375,  381,  365,  368,  356,  346,  597,  335,  597,
      597,  340,  329,  597,  343,  341,  597,  328,  597,  327,
      339,  330,  320,  597,  334,  327,  329,  332,  325,  324,
      327,  308,  309,  324,  319,  313,  302,  312,  299,  286,
      597,  283,  268,  263,  249,  597,  262,  597,  228,  219,
      203,  186,  123,   55,  597,  597,  377,  383,  389,  395,
      401,   92,  407,  413,  419,  425,   73,   66,  431,  436,
      442,  448,  454
    } ;

static yyconst flex_int16_t yy_def[374] =
    {   0,
      356,    1,  357,  357,  358,  358,  359,  359,  356,    9,
      360,  360,  356,  356,  356,  356,  356,  361,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  362,  356,  362,  362,  362,  356,
      363,  356,  356,  364,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  365,  356,  356,  366,  356,  356,  356,
      356,  356,  356,  356,  356,  367,  356,  356,  368,  356,
      368,  368,  368,  368,  368,  369,  356,  356,  356,  356,
      356,  361,  356,  370,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  371,  356,  356,  356,  362,  362,

      356,  362,  362,  363,  356,  364,  364,  356,  356,  356,
      356,  356,  356,  356,  365,  356,  366,  356,  372,  356,
      356,  373,  367,  356,  368,  368,  368,  368,  368,  368,
      368,  369,  356,  361,  361,  370,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  371,  362,  362,
      356,  356,  356,  356,  356,  356,  366,  366,  372,  373,
      368,  368,  368,  368,  368,  368,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  362,  356,  356,
      356,  356,  356,  356,  356,  368,  368,  368,  368,  368,
      368,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  362,  356,  356,  356,  356,  356,  356,  356,  368,
      368,  368,  368,  368,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  368,  368,  368,  368,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  368,
      368,  368,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  368,  368,  368,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  368,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,    0,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356
    } ;

static yyconst flex_int16_t yy_nxt[651] =
    {   0,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   14,   28,   29,   30,   31,   14,
       32,   14,   33,   34,   35,   36,   14,   14,   35,   37,
       37,   38,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   39,   37,   37,
       37,   37,   40,   42,   43,   42,   43,   55,   56,   57,
       55,   56,   57,   77,   78,   77,   78,   83,   44,  125,
       44,   46,   47,   48,  118,   95,  123,   49,   50,   79,
       58,   79,   59,   58,   96,   59,   97,   97,  100,   84,
       97,   97,  100,  107,  113,   99,  119,  114,  123,  123,

      355,   51,   52,  108,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,   53,   46,   47,   48,   83,  135,
      146,   49,   50,  142,  127,  100,  131,  118,  129,  100,
      147,   97,   97,  356,  126,  152,  128,  143,  130,  144,
       84,  136,  107,  356,  196,   51,   52,  154,  258,  119,
      153,  259,  356,  155,  123,  123,  354,  197,   53,   60,
       61,   62,   63,   60,   64,   60,   60,   60,   60,   60,
       60,   65,   60,   60,   66,   66,   67,   68,   60,   60,
       60,   60,   60,   69,   60,   60,   70,   69,   71,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       72,   73,   69,   69,   69,   69,   74,   69,   75,   69,
       69,   60,   85,  290,   86,  123,  123,  158,  353,  123,
      123,  291,   87,   88,  123,  123,   89,  123,  123,   83,
      123,  123,  352,   90,   83,   91,  163,   92,   93,  159,
       94,  162,  123,  123,  161,  135,  118,  118,  158,  123,
      123,   84,  351,  164,  165,  275,   84,  276,  123,  123,
      123,  123,  123,  123,  350,  123,  123,  136,  119,  119,
      159,  224,  166,  187,  123,  123,  123,  123,  188,  123,
      123,  225,  186,  190,  123,  123,  123,  123,  123,  123,
      349,  189,  123,  123,  348,  215,  191,  211,  216,  123,

      123,  217,  210,  123,  123,  347,  214,  123,  123,  123,
      123,  123,  123,  346,  212,  213,  345,  232,  123,  123,
      123,  123,  123,  123,  123,  123,  235,  123,  123,  344,
      123,  123,  343,  233,  123,  123,  251,  234,  123,  123,
      123,  123,  123,  123,  342,  250,  123,  123,  341,  252,
      340,  339,  269,  338,  337,  336,  335,  334,  333,  267,
      268,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  285,   41,   41,   41,
       41,   41,   41,   45,   45,   45,   45,   45,   45,   54,
       54,   54,   54,   54,   54,   76,   76,   76,   76,   76,

       76,   82,  317,   82,   82,   82,   82,  104,  316,  104,
      104,  315,  104,  106,  314,  106,  106,  106,  106,  115,
      313,  312,  115,  115,  115,  117,  311,  117,  117,  117,
      117,  132,  310,  132,  132,  132,  134,  309,  134,  134,
      134,  134,  148,  308,  148,  148,  148,  148,  157,  307,
      157,  157,  157,  157,  160,  306,  160,  160,  160,  160,
      305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  289,  288,  287,  286,  284,  283,
      282,  281,  280,  279,  278,  277,  274,  273,  272,  271,
      270,  266,  265,  264,  263,  262,  261,  260,  257,  256,

      255,  254,  253,  249,  248,  247,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  231,  230,  229,
      228,  227,  226,  223,  222,  221,  220,  219,  218,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  195,  194,  193,  192,  185,  184,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  124,  120,  156,  151,  109,  150,
      149,  145,  141,  140,  139,  138,  137,   80,  133,  124,
      122,  121,  120,  116,  112,  111,  110,  109,  105,  103,
      102,  101,   98,   81,   80,  356,   13,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356
    } ;

static yyconst flex_int16_t yy_chk[651] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    7,    7,    7,
        8,    8,    8,   11,   11,   12,   12,   18,    3,  368,
        4,    5,    5,    5,   57,   26,  367,    5,    5,   11,
        7,   12,    7,    8,   26,    8,   28,   28,   35,   18,
       29,   29,   35,   44,   53,  362,   57,   53,   69,   69,

      354,    5,    5,   44,   71,   71,   72,   72,   73,   73,
       74,   74,   75,   75,    5,    6,    6,    6,   82,   84,
       94,    6,    6,   92,   72,  100,   75,  117,   74,  100,
       94,   97,   97,  106,   71,  112,   73,   92,   74,   92,
       82,   84,  107,  106,  172,    6,    6,  113,  241,  117,
      112,  241,  107,  113,  125,  125,  353,  172,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   20,  275,   20,  127,  127,  119,  352,  128,
      128,  275,   20,   20,  126,  126,   20,  129,  129,  134,
      130,  130,  351,   20,  135,   20,  128,   20,   20,  119,
       20,  127,  131,  131,  126,  136,  157,  158,  159,  161,
      161,  134,  350,  129,  130,  258,  135,  258,  162,  162,
      163,  163,  164,  164,  349,  165,  165,  136,  157,  158,
      159,  203,  131,  162,  166,  166,  186,  186,  163,  187,
      187,  203,  161,  165,  188,  188,  189,  189,  190,  190,
      347,  164,  191,  191,  345,  192,  166,  187,  192,  210,

      210,  192,  186,  211,  211,  344,  191,  212,  212,  213,
      213,  214,  214,  343,  189,  190,  342,  210,  232,  232,
      233,  233,  234,  234,  235,  235,  214,  250,  250,  340,
      251,  251,  339,  211,  252,  252,  234,  212,  267,  267,
      268,  268,  269,  269,  338,  232,  285,  285,  337,  235,
      336,  335,  252,  334,  333,  332,  331,  330,  329,  250,
      251,  328,  327,  326,  325,  323,  322,  321,  320,  318,
      316,  315,  313,  312,  309,  307,  268,  357,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  358,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,

      360,  361,  306,  361,  361,  361,  361,  363,  305,  363,
      363,  304,  363,  364,  303,  364,  364,  364,  364,  365,
      302,  300,  365,  365,  365,  366,  298,  366,  366,  366,
      366,  369,  297,  369,  369,  369,  370,  296,  370,  370,
      370,  370,  371,  295,  371,  371,  371,  371,  372,  294,
      372,  372,  372,  372,  373,  293,  373,  373,  373,  373,
      292,  291,  290,  288,  287,  286,  283,  282,  281,  280,
      279,  278,  277,  276,  274,  273,  272,  271,  266,  265,
      264,  263,  262,  261,  260,  259,  257,  256,  255,  254,
      253,  249,  247,  246,  245,  244,  243,  242,  240,  239,

      238,  237,  236,  230,  229,  228,  227,  226,  225,  224,
      223,  221,  219,  218,  217,  216,  215,  209,  208,  207,
      206,  205,  204,  201,  199,  197,  196,  195,  193,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      173,  171,  170,  169,  167,  156,  155,  154,  153,  152,
      151,  150,  149,  147,  146,  145,  144,  143,  142,  141,
      140,  139,  138,  137,  124,  120,  114,  111,  109,  103,
      102,   93,   91,   90,   89,   88,   87,   80,   78,   67,
       65,   63,   61,   56,   52,   51,   48,   46,   43,   39,
       38,   36,   31,   17,   15,   13,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
#line 2 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* This file is part of kdev-pg
   Copyright (C) 2006 Jakob Petsovits <jpetso@gmx.at>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.
*/

#include <QtCore/QDebug>
// #include <iostream>
// #include <cstdio>
#include "kdev-pg.h"
#include "kdev-pg-parser.hh"

#include <QtCore/QFile>

int inp();
void appendLineBuffer();
void newline();
void yyerror(const char* );

#define YY_INPUT(buf, result, max_size) \
  { \
    char c = inp(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
  }

#define YY_USER_ACTION  appendLineBuffer();

#define COPY_TO_YYLVAL(string, len) \
  yylval.str = (char*) calloc(yyleng+1, sizeof(char)); \
  strcpy(yylval.str, string); \
  yylval.str[len] = '\0';

namespace {
  enum RulePosition {
    RuleBody,
    RuleFooter
  };
  RulePosition rulePosition = RuleBody;
  int openBrackets; // for rule arguments usage
}






#line 817 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#define INITIAL 0
#define CODE 1
#define PARSERCLASS 2
#define RULE_ARGUMENTS 3
#define RULE_PARAMETERS_HEADER 4
#define RULE_PARAMETERS_VARNAME 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 68 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"



#line 1008 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 357 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 597 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 71 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 72 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody;   return ';';
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleFooter; return T_ARROW;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '(';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ')';
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 80 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ',';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 81 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '0';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 82 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '#';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 83 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '.';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 84 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ':';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '=';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 86 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '+';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 87 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '*';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 88 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '?';
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 89 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '@';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 90 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '|';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 92 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TRY_RECOVER;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 93 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TRY_ROLLBACK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 94 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CATCH;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 96 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_EXPORT_MACRO;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_EXPORT_MACRO_HEADER;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_DECLARATION;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_DECLARATION;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_NAMESPACE_DECLARATION;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(PARSERCLASS); return T_PARSERCLASS_DECLARATION;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_DECLARATION;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_DECLARATION_HEADER;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_BITS_HEADER;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_HEADER;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_BASE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_BASE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_BIN;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_POST;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TERN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; return T_LOPR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleFooter; return T_ROPR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_LEFT_ASSOC;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_RIGHT_ASSOC;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PAREN;
	YY_BREAK

case 43:
YY_RULE_SETUP
#line 119 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 120 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 121 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '(';
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 122 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PUBLIC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRIVATE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PROTECTED;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_DECLARATION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CONSTRUCTOR;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_DESTRUCTOR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); return ')';
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK

case 54:
YY_RULE_SETUP
#line 133 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    if (rulePosition == RuleBody) { /* use the arguments in a rule call */
      openBrackets = 0;
      BEGIN(RULE_ARGUMENTS);
    }
    else if (rulePosition == RuleFooter) { /* declare the arguments */
      BEGIN(RULE_PARAMETERS_HEADER); return '[';
    }
}
	YY_BREAK

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 144 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 145 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* this and... */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 146 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* ...this prevent brackets inside strings to be counted */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 147 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a bracket, and append what comes next */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 148 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
openBrackets++; yymore();
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 149 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    openBrackets--;
    if (openBrackets < 0) {
      COPY_TO_YYLVAL(yytext,yyleng-1); /* cut off the trailing bracket */
      BEGIN(INITIAL);
      return T_RULE_ARGUMENTS;
    }
}
	YY_BREAK
case YY_STATE_EOF(RULE_ARGUMENTS):
#line 157 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    BEGIN(INITIAL); // is not set automatically by yyrestart()
    qDebug() << "Encountered end of file in an unclosed rule argument specification..." << endl;
    yyerror("");
    return 0;
}
	YY_BREAK


case 61:
YY_RULE_SETUP
#line 166 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 167 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 168 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 169 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(RULE_PARAMETERS_VARNAME); return ':';
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 170 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '#';
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_MEMBER;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TEMPORARY;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 173 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_ARGUMENT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 174 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_NODE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 175 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 176 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_VARIABLE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 177 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';  /* only used for "token" types */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 178 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 179 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); return ']';
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 180 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK


case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 184 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 185 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a semicolon, and append what comes next */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 186 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    // strip trailing whitespace
    int length = yyleng-1; // and first, the trailing semicolon
    for (int i = length-1; i < 1; i--) {
      switch(yytext[i-1])
      {
        case ' ':
        case '\f':
        case '\t':
          continue;
        default:
          length = i;
          break;
      }
    }
    COPY_TO_YYLVAL(yytext,length);
    BEGIN(RULE_PARAMETERS_HEADER);
    return T_IDENTIFIER;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 205 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK

case 80:
YY_RULE_SETUP
#line 209 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(CODE);
	YY_BREAK

case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 211 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 212 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a colon, and append what comes next */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 213 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* also gather colons that are not followed by colons or newlines */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 214 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    COPY_TO_YYLVAL(yytext,yyleng-2); /* cut off the trailing stuff */
    BEGIN(INITIAL);
    return T_CODE;
}
	YY_BREAK
case YY_STATE_EOF(CODE):
#line 219 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    BEGIN(INITIAL); // is not set automatically by yyrestart()
    qDebug() << "Encountered end of file in an unclosed code segment..." << endl;
    yyerror("");
    return 0;
}
	YY_BREAK

case 85:
YY_RULE_SETUP
#line 228 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_TERMINAL;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 229 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 230 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_NUMBER;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 233 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
   yytext++;                         /* start inside the quotes */
   COPY_TO_YYLVAL(yytext,yyleng-2);  /* cut off the trailing quote */
   return T_STRING;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 239 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
  qDebug() << "Unexpected character: ``" << yytext[0] << "''" << endl;
  yyerror("");
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 245 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
ECHO;
	YY_BREAK
#line 1634 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(PARSERCLASS):
			case YY_STATE_EOF(RULE_PARAMETERS_HEADER):
			case YY_STATE_EOF(RULE_PARAMETERS_VARNAME):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 357 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 357 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 356);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 245 "/home/Jonathan/KDESVN/playground/devtools/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"



namespace KDevPG
{
extern QFile file;
}

int ch;
int yyLine = 1, currentOffset = 0;
bool endOfLine = false;
char yyTextLine[256 * 1024];

int inp()
{
  if( KDevPG::file.atEnd() )
    return EOF;
  KDevPG::file.getChar( (char*)&ch );
  return ch;
}

void newline()
{
  yyLine++;
  endOfLine = true;
}

/* initialize the line buffer */
void clearLineBuffer()
{
  yyTextLine[0] = '\0';
  currentOffset = 0;
  endOfLine = false;
}

 /* add the current token to the current line */
void appendLineBuffer()
{
  if (endOfLine == true)
    clearLineBuffer();

  currentOffset = strlen(yyTextLine); /* start of current */
  strcpy(yyTextLine+currentOffset, yytext); /* append current */
  /* strcpy is faster than strcat */
}

void yyerror(const char* msg )
{
  Q_UNUSED(msg);
  qDebug() << "** SYNTAX ERROR at line " << yyLine << " column " << currentOffset << endl;

  char *current_end = yyTextLine + strlen(yyTextLine);
  char *p;

  /* get the rest of the line if we are not already at the end */
  if(!endOfLine)
    {
      p = current_end;
      int c = ch;

      while(c != '\n')
        {
          *p++ = c;
          c = inp();
        }

      *p++ = '\n';
      *p = 0;
    }

  /* yyTextLine[] now has the whole line, with the current token */
  /* at currentOffset */

  /* print error message and current line */
  qDebug() << yyTextLine;

  /* print a ^ under the most recent token */
  for (int i = 0; i < currentOffset; i++)
    qDebug() << " ";

  qDebug() << "^" << endl; /* currentOffset spaces, then ^ */

  exit(EXIT_FAILURE);
}

int yywrap() { return 1; }


