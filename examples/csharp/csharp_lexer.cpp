#line 2 "csharp_lexer.cpp"

#line 4 "csharp_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int csharp::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 199
#define YY_END_OF_BUFFER 200
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1184] =
    {   0,
        0,    0,    5,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  182,  182,  200,  198,
        1,    2,   22,  198,   50,   44,  198,    9,   10,   40,
       36,   15,   38,   17,   42,  196,  196,   18,   16,   25,
       35,   27,   20,  198,  195,   13,   14,   48,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,   11,   46,   12,
       23,  198,  198,  198,  198,  198,  198,  198,  198,    1,
      198,    5,    7,    6,  165,  162,  164,  165,  169,  162,
      168,  169,  169,  167,  167,  167,  169,  169,  169,  169,

      169,  169,  169,  169,  181,  162,  180,  174,  181,  177,
      178,  181,  181,  181,  179,  179,  179,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  190,  162,  185,  190,
      190,  186,  190,  189,  189,  190,  190,  190,  190,  190,
      190,  190,  190,  191,  192,  193,  194,  182,  184,  183,
      182,  183,    1,   29,    0,  147,  146,    0,    0,    0,
        0,    0,    0,    0,   51,   30,   45,    0,  145,    0,
        0,    0,    0,    0,    0,    0,   41,   33,   37,   34,
       39,   32,  197,    4,    3,   43,    0,  196,  197,    0,
      196,  196,    0,   19,   52,   26,   24,   28,   54,   21,

        0,  195,    0,    0,    0,    0,    0,    0,    0,    0,
      195,    0,    0,    0,    0,    0,    0,    0,    0,   49,
      195,  195,  195,   57,  195,  195,  195,  195,  195,  195,
      195,  195,  195,   72,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,   86,  195,   88,   92,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,   47,
       31,  195,  195,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    0,    0,    0,  161,  161,  161,  161,  161,

      161,  161,  161,  161,    0,    0,    0,    0,    0,    0,
        0,    0,    5,    6,    6,    8,  162,  164,    0,  163,
      162,  168,    0,  163,  167,    0,    0,    0,    0,    0,
        0,    0,    0,  167,    0,    0,    0,    0,    0,    0,
        0,    0,  167,  167,  167,  167,    0,    0,    0,    0,
        0,    0,    0,    0,  162,  180,    0,  171,  172,  163,
      170,  179,    0,    0,    0,    0,    0,    0,    0,    0,
      179,    0,    0,    0,    0,    0,    0,    0,    0,  179,
      179,  173,  179,  179,    0,    0,    0,    0,    0,    0,
        0,    0,  162,  185,    0,    0,  163,  186,  189,    0,

        0,    0,    0,    0,    0,    0,    0,  189,    0,    0,
        0,    0,    0,    0,    0,    0,  189,  189,  189,    0,
        0,    0,    0,    0,    0,    0,    0,  191,  193,  182,
      182,    0,    0,    0,    0,    0,    0,    0,    0,  144,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  197,    0,    3,  197,    0,  197,
      196,  196,  196,   53,   55,    0,  148,  195,    0,    0,
        0,    0,    0,    0,    0,    0,  195,    0,    0,    0,
        0,    0,    0,    0,    0,  195,    0,    0,    0,    0,
        0,    0,    0,    0,  195,  133,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,   83,  135,  195,  195,  195,   89,  195,  195,  195,
       96,  195,  195,  195,  100,  195,  195,  195,  195,  195,
      195,  107,  195,  195,  195,  195,  139,  195,  195,  195,
      195,  195,  195,  195,  195,  121,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  161,    0,    0,    0,    0,    0,    0,    0,
        0,  161,    0,    0,    0,    0,    0,    0,    0,    0,
      161,  161,  161,  161,  151,  161,  161,  161,  161,  161,

      161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      163,    0,  163,  167,    0,    0,    0,    0,    0,    0,
        0,    0,  167,    0,    0,    0,    0,    0,    0,    0,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,
      167,  167,  167,  167,    0,  163,  179,    0,    0,    0,
        0,    0,    0,    0,    0,  179,    0,    0,    0,    0,
        0,    0,    0,    0,  179,    0,    0,    0,    0,    0,
        0,    0,    0,  179,  179,  179,  179,    0,  187,  163,
      189,    0,    0,    0,    0,    0,    0,    0,    0,  189,
        0,    0,    0,    0,    0,    0,    0,    0,  189,    0,

        0,    0,    0,    0,    0,    0,    0,  189,  189,  189,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  197,  197,    0,  197,  196,  196,  195,    0,
        0,    0,    0,    0,    0,    0,    0,  195,  195,  195,
      195,  195,  195,  195,   58,   59,  195,   61,   62,  195,
       64,  195,  195,  195,  195,  195,  195,  195,  195,   74,
       75,  195,  195,  195,  195,  195,  195,  195,  195,  195,
       85,  195,  195,   93,   94,  195,   97,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  118,  195,  120,
      195,  123,  195,  195,  195,  195,  195,  195,  195,  130,
      195,  195,  195,  195,  161,    0,    0,    0,    0,    0,
        0,    0,    0,  161,    0,    0,    0,    0,    0,    0,
        0,    0,  161,    0,    0,    0,    0,    0,    0,    0,
        0,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,    0,    0,  167,    0,    0,    0,    0,
        0,    0,    0,    0,  167,  167,  167,  167,  167,  166,
        0,  179,    0,    0,    0,    0,    0,    0,    0,    0,
      179,  179,  179,  179,  179,  175,    0,  189,    0,    0,

        0,    0,    0,    0,    0,    0,  189,  189,  189,  189,
      189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  197,  196,
      196,  195,  195,  195,  134,  195,   60,   63,  195,   66,
       67,  195,  195,  195,  195,  195,   76,  195,  195,   79,
      195,   81,   82,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  109,
      195,  111,  195,  195,  195,  195,  195,  195,  119,  195,
      124,  195,  195,  195,  128,  140,  195,  195,  141,  132,
      142,  161,    0,    0,    0,    0,    0,    0,    0,    0,

      161,  161,  161,  161,  161,  152,  153,  161,  161,  161,
      155,  161,  161,  161,  161,  167,  167,  179,  179,  176,
      189,  189,  189,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  195,  195,  195,  195,
      195,  195,  195,   73,  195,   78,  195,  195,  136,  195,
      195,  195,  195,   98,  195,  195,  102,  195,  195,  195,
      105,  195,  138,  108,  110,  112,  195,  114,  115,  116,
      117,  122,  195,  126,  127,  195,  195,  161,  161,  161,
      154,  161,  156,  161,  161,  150,  161,  189,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      195,  195,   65,  195,   69,   70,  195,  195,   80,   84,
      195,  195,  195,  195,  195,  195,  137,  103,  195,  195,
      195,  195,  129,  195,  149,  161,  156,  160,  158,  161,
      188,    0,    0,    0,    0,    0,    0,    0,    0,   56,
      143,   68,   71,   77,   87,  195,   91,  195,   99,  101,
      195,  106,  195,  195,  131,  161,  160,  158,  157,    0,
        0,    0,    0,    0,    0,   90,   95,  104,  195,  125,
      161,  157,    0,    0,    0,    0,  113,  159,    0,    0,
      159,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   27,   27,   28,   29,   30,
       31,   31,   31,   31,   31,   32,   33,   31,   31,   31,
       31,   31,   31,   31,   34,   31,   31,   35,   31,   31,
       36,   37,   38,   39,   31,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   31,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,    1,   69,   70,   70,
       70,   70,   70,   71,   69,   69,   69,   69,   69,   72,
       72,   69,   69,   73,   73,   73,   73,   73,   73,   73,
       74,   75,   75,   75,   75,   75,   75,   75,   75,   76,
       76,   76,   76,   77,   77,   77,   77,   77,   77,   77,
       77,   76,   76,   78,   78,   78,   78,   78,   78,   79,
       80,   80,   81,   82,   82,   82,   82,   82,   82,   82,
       82,    1,    1,   83,   84,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   86,   87,   88,   89,   90,   91,   91,
       91,   91,   91,   88,   88,   88,   88,   88,   92,   93,
       94,   94,   94,   95,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[96] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    1,    1,    1,
        1,    5,    1,    1,    1,    1,    6,    7,    7,    1,
        1,    1,    1,    1,    1,    1,    8,    8,    8,    8,
        9,    8,    9,    8,    9,    1,    1,    1,    1,    8,
        8,    8,    8,    8,    8,    9,    9,    9,    9,    9,
        8,    9,    9,    9,    9,    9,    9,    9,    8,    9,
        9,    9,    9,    9,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,    9,    9,    9,    1,    9,    9,
        9,    9,    1,    1,    1

    } ;

static yyconst flex_int16_t yy_base[1279] =
    {   0,
        0,   94,   94,   95,   99,  101,  118,    0,  213,    0,
      308,    0, 7310, 7309, 7308, 7307,  102,  107, 7309, 8327,
     7292, 8327, 7270,  401, 7269,   91,  494, 8327, 8327, 7264,
      392, 8327,  393,   93,  395,  574,  374, 7266, 8327,  388,
     7258,  390, 7253,  415,  337, 8327, 8327, 7254,  389,  394,
      412,  467,  472,  479,  494,  501,  390,  516,  572,  594,
      554,  611,  620,  637,  641,  413,  573, 8327,  396, 8327,
     8327,  630,  644,  562,  658,  671, 7194,  682, 7198,  437,
      763,    0, 8327,  455, 8327,  538, 8327, 7243, 8327,  547,
     8327, 7242,  682,  691,  744,  402,  787,  801,  761,  815,

      828, 7176,  839, 7176, 8327,  559, 8327, 7229, 7239, 8327,
     8327, 7227, 7220,  838,  847,  886,  409, 7176,  871,  885,
      903,  917,  930, 7159,  941, 7149, 8327,  662, 8327,    0,
     7208,  464,  940,  949,  984,  973, 1008,  980, 1022, 1035,
     7142, 1046, 7142,    0, 8327,    0, 8327,    0, 8327, 8327,
      510,    0, 7216, 8327, 1126, 8327, 8327, 1219, 1279, 1063,
     1077, 1095, 1109, 1123, 8327, 8327, 8327, 1372, 8327, 1465,
     1525, 1169, 1216, 1230, 1248, 1262, 8327, 8327, 8327, 8327,
     8327, 8327, 1358, 8327,    0, 8327,  547, 1605, 8327,  581,
      480,  466, 1377, 8327, 7190, 8327, 8327, 8327, 7187, 8327,

     7204, 1339, 1363, 1415, 1153, 1466, 1479, 7126, 1494, 7130,
     1362, 1508, 1596, 1189, 1610, 1623, 7110, 1634, 7114, 8327,
     1660,  603,  420, 7133, 7128,  514,  613,  512,  590,  647,
      469,  490, 1456,   58, 7127,  515,  629,  730,  571, 1010,
      639,  618,  742, 1169,  744, 7122,  555,  787, 7119, 1336,
      794, 1197,  917, 1206, 1217, 1007, 1335, 1104, 1421,  729,
     1474, 1327, 1340, 1219,  592, 1343, 1179, 1423, 1452, 1151,
     1355, 1226, 1583, 1425, 1393, 1257, 1579, 1460, 1370, 8327,
     8327, 7118, 7117, 1649, 1684, 1572, 1698, 1712, 1663, 1726,
     1740, 1409,    0,    0, 1739, 1748, 1783, 1602, 1301, 1433,

     1010, 7129, 1341, 1472, 1772, 1807, 1779, 1821, 1834, 7076,
     1845, 7080,    0,    0, 1240, 8327, 1926, 8327, 7139, 7148,
     1928, 8327, 7133, 7142, 1848, 1877, 1891, 1898, 1912, 1925,
     7060, 1936, 7064, 1935, 1959, 1973, 1980, 1994, 2007, 7058,
     2018, 7062, 2050, 1471, 7079, 7078, 2033, 2047, 1590, 2074,
     2088, 2102, 2111, 2125, 2206, 8327, 7110, 8327, 8327, 7123,
     8327, 2126, 2155, 2169, 2176, 2190, 2203, 7043, 2214, 7047,
     2213, 2237, 2251, 2258, 2272, 2285, 7041, 2296, 7045, 2328,
     1812, 8327, 7066, 7065, 2311, 2325, 2061, 2352, 2366, 2380,
     2389, 2403, 2219, 8327, 7098, 7109, 7110, 1541, 2402, 2426,

     2440, 2447, 2461, 2474, 7030, 2485, 7034, 2484, 2508, 2522,
     2529, 2543, 2556, 7014, 2567, 7018, 2605, 7049, 7044, 2582,
     2596, 2339, 2629, 2643, 2610, 2657, 2671,    0,    0,    0,
     1527, 2751, 2844, 2937, 2739, 2767, 3030, 3123, 3216, 8327,
     2814, 3309, 2813, 2827, 2841, 2914, 2928, 3396, 3461, 2786,
     3018, 3046, 3023, 3060, 8327, 1613,    0, 3125, 1573, 3129,
     8327, 8327, 2739, 8327, 8327, 7083, 7078, 2859, 3151, 3165,
     2683, 3185, 3112, 6998, 3199, 7002, 2927, 3213, 3250, 2705,
     3278, 3292, 3008, 3337, 3351, 3249, 3365, 3379, 2730, 3438,
     3475, 3423, 3489, 3503, 3528, 7020, 1167,  653, 1900,  810,

     1589, 2734, 2745, 1804, 1596, 2764, 1684, 1807,  413, 1605,
     2806,  894, 2807, 1884, 1690, 1531, 2808, 2162, 2813, 2817,
     2820, 2819, 7019, 1462, 2733, 1982, 2903, 2775, 2810, 2910,
     7003, 2260, 2913, 2714, 7002, 2762, 2822, 2763, 7001, 2449,
     2171, 6994, 2904, 2799, 6993, 2531, 6992, 2868, 2915, 2883,
     2991, 6991, 2895, 2918, 2994, 6990, 2996, 6989, 2635, 2995,
     3011, 3012, 2917, 2985, 6988, 2998, 3069, 3050, 3094, 3098,
     6987, 6986, 3437, 3518, 3552, 3405, 3566, 3531, 6957, 3580,
     6961, 3579, 3603, 3617, 3624, 3638, 3651, 6955, 3662, 6959,
     3700, 3116, 3067, 3012, 6990, 3118, 3106, 3026, 3122, 3701,

     6989, 3689, 3724, 3179, 3738, 3752, 3678, 3766, 3780, 7030,
     7015, 7014, 7008, 3688, 3794, 3808, 3815, 3829, 3842, 6928,
     3853, 6928, 3852, 3876, 3890, 3244, 3904, 3918, 3932, 3941,
     3955, 3954, 3978, 3992, 3273, 4006, 4020, 4034, 4043, 4057,
     4083, 1809, 6945, 6944, 6997, 6996, 4057, 4081, 4107, 4114,
     4128, 4141, 6914, 4152, 6918, 4151, 4175, 4189, 4203, 4207,
     4221, 4235, 4244, 4258, 4257, 4281, 4295, 4309, 4313, 4327,
     4341, 4350, 4364, 4390, 3122, 6937, 6932, 6980, 8327, 6966,
     4364, 4388, 4414, 4421, 4435, 4448, 6886, 4459, 6890, 4458,
     4482, 4496, 4510, 4514, 4528, 4542, 4551, 4565, 4564, 4588,

     4602, 4616, 4620, 4634, 4648, 4657, 4671, 4714, 6916, 6913,
     4768, 4828, 4686, 4765, 4779, 4797, 4811, 4906, 4751, 4986,
     5079, 5172, 5265, 4912, 4992, 5020, 5343, 5067, 5095, 5170,
     4889, 3157, 5173, 8327, 4769, 8327, 3722,  569, 4908, 5157,
     5171, 4703, 5242, 5256, 4982, 5320, 5357, 5014, 5042, 5186,
     5255, 5319, 3240, 3055, 6896, 6895, 2913, 6894, 6867, 4108,
     6858, 3726, 3319, 3122, 4741, 4110, 1357,  991, 3560, 6857,
     6856, 3406, 4759, 6852, 4766, 3732, 4769, 4413, 4422, 4776,
     6836, 4763, 6835, 6824, 6821, 4416, 6819, 4734, 4887, 6811,
     4762, 4881, 4888, 4773, 4953, 4729, 4946, 6793, 4882, 4952,

     4806, 4840, 4115, 4969, 4767, 5046, 5088, 6787, 4951, 6772,
     4918, 6763, 1895, 5134, 5131, 6711, 2823, 5138, 4984, 6650,
     4986, 5139, 5140, 4889, 5356, 5380, 5394, 5209, 5408, 5421,
     6597, 5432, 6587, 5431, 5455, 5469, 5020, 5483, 5497, 5511,
     5520, 5534, 5533, 5557, 5571, 5048, 5585, 5599, 5613, 5622,
     5636, 5671, 5097, 4997, 5129, 4970, 5039, 5020, 6566, 5099,
     5093, 6522, 6447, 6468, 6393, 5636, 5660, 5695, 5150, 5709,
     5723, 5674, 5737, 5751, 5750, 5759, 5768, 5777, 5794, 6341,
     6378, 5803, 5827, 5841, 5210, 5855, 5869, 5883, 5892, 5906,
     5905, 5914, 5923, 5932, 5949, 6306, 6310, 5958, 5982, 5996,

     5227, 6010, 6024, 6038, 6047, 6061, 6060, 6069, 6078, 6087,
     6098, 6188, 6281, 6176, 6204, 6210, 6359, 6287, 6315, 6439,
     6532, 6625, 6365, 6703, 6445, 6473, 6538, 5186, 6628, 8327,
     8327, 6123, 6172, 6203, 6262, 6420, 6226, 6170, 5259, 6145,
     6134, 5323, 5167, 3626, 5183, 5260, 5961, 5324, 5326, 5850,
     5327, 5806, 5683, 5339, 5403, 5711, 5829, 5322, 4932, 5815,
     3551, 5145, 5831, 5970, 5834, 5984, 5824, 5986, 5979, 5580,
     5988, 5478, 6151, 6140, 6156, 5328, 6183, 5074, 5420, 6185,
     5366, 6158, 6224, 6244, 5341, 5302, 6161, 3827, 5176, 5052,
     5026, 6327, 6515, 6529, 6266, 6612, 6680, 6376, 6717, 6731,

     6453, 6546, 6611, 6650, 6761, 4993, 4950, 6182, 5993, 6213,
     4842, 6244, 6250, 6267, 5706, 6679, 6731, 6740, 6749, 4819,
     6770, 6779, 6331, 6854, 6860, 6888, 6865, 6930, 6936, 6979,
     6985, 7013, 7057, 7063, 7091, 7119, 6298, 6219, 6320, 6107,
     6250, 6321, 6339, 4611, 6350, 4505, 6278, 6195, 4411, 6374,
     6380, 6383, 6385, 4304, 5139, 6413, 4198, 6414, 6418, 6402,
     4104, 6457, 4001, 3899, 3643, 3484, 6495, 3422, 3336, 3296,
     3276, 3257, 6257, 3211, 3191, 6507, 6512, 6835, 6901, 6511,
     3097, 6424, 6425, 6589, 2981, 2962, 2907, 6435, 7125, 7153,
     7159, 7187, 7193, 7221, 7227, 7255, 7261, 7289, 7317, 7345,

     6513, 6456, 2783, 6455, 2752, 2714, 6508, 6599, 2531, 2449,
     6618, 6479, 6598, 6571, 5213, 6604, 2375, 2260, 6619, 6609,
     6600, 6633, 2097, 6634, 1970, 6651, 1834, 6840, 6856, 6791,
     1592, 7351, 7379, 7385, 7413, 7419, 7447, 7453, 7481, 1581,
     1552, 1520, 1459, 1435, 1396, 6682, 1341, 6683, 1306, 1274,
     6664, 1221, 6684, 6833, 1121, 6675, 1128,  967, 6908, 7487,
     7515, 7521, 7549, 7555, 7583,  904,  791,  738, 6844,  625,
      538,  561, 7589, 7617, 7623, 7651,  487, 6909, 7657, 7685,
      423, 7691, 8327, 7736, 7745, 7754, 7763, 7772, 7781, 7790,
     7797, 7800, 7809, 7818, 7820, 7823, 7825, 7828, 7837, 7839,

     7842, 7851, 7860, 7869, 7878, 7887, 7896, 7905, 7914, 7917,
     7920, 7922, 7925, 7934, 7943, 7952, 7961, 7964, 7967, 7976,
     7979, 7982, 7991, 8000, 8003, 8006, 8015, 8024, 8033, 8042,
     8051, 8060, 8069, 8072, 8080, 8083, 8086, 8089, 8092, 8101,
     8110, 8119, 8128, 8131, 8134, 8143, 8152, 8155, 8158, 8167,
     8176, 8179, 8182, 8191, 8200, 8209, 8212, 8215, 8218, 8221,
     8230, 8239, 8242, 8245, 8254, 8257, 8260, 8269, 8272, 8275,
     8284, 8293, 8302, 8305, 8308, 8311, 8314, 8317
    } ;

static yyconst flex_int16_t yy_def[1279] =
    {   0,
     1183,    1, 1184, 1184, 1185, 1185, 1183,    7, 1183,    9,
     1183,   11, 1186, 1186, 1187, 1187, 1188, 1188, 1183, 1183,
     1183, 1183, 1183, 1189, 1183, 1183, 1190, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183,   36, 1183, 1183, 1183,
     1183, 1183, 1183, 1191, 1192, 1183, 1183, 1183, 1192,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1193, 1183, 1194, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1195, 1196, 1196,   95, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1197, 1198, 1198,  116, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1199,
     1183, 1183, 1200, 1201, 1201, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1202, 1183, 1203, 1183, 1204, 1183, 1183,
     1204,   81, 1183, 1183, 1205, 1183, 1183, 1206, 1205,  159,
      159,  159,  159,  159, 1183, 1183, 1183, 1207, 1183, 1207,
     1207,  171,  171,  171,  171,  171, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1208, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1209, 1210, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1211, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1211,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221, 1183,
     1183,  221,  221, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183,   81,   81, 1212, 1213, 1213,  297,  297,  297,

      297,  297,  297,  297, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1214, 1215, 1215, 1183, 1183, 1183, 1183, 1216,
     1183, 1183, 1183, 1217, 1218, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1219, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1219,  343,  343,  343, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1220,
     1183, 1221, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1222, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1222,
      380, 1183,  380,  380, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1223, 1224, 1183, 1225, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1226, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1226,  417,  417, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1227, 1228, 1229,
     1229, 1230, 1231, 1230,  434,  434, 1231, 1231, 1232, 1183,
     1232, 1232,  442,  442,  442,  442,  442,  442,  442,  449,
      449,  449,  442,  442, 1183, 1183, 1233, 1183, 1183, 1183,
     1183, 1183, 1234, 1183, 1183, 1235, 1183, 1236, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1236, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1237, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1237,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495, 1238, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1239, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1239,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1240,
     1241, 1242, 1243, 1244, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1244, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1245, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1245,  641,  641,  641, 1246, 1247, 1248, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1248, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1249, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1249,  674,  674,  674, 1250, 1183, 1251,
     1252, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1252,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1253, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1253,  708,  708,
     1254, 1254,  712,  712,  712,  712,  712,  712,  718, 1255,
     1255, 1256, 1256,  723,  723,  723,  723,  723,  723,  723,
      727, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1257, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1257, 1257, 1258,
     1258, 1258,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752, 1259, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1259, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1260, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1260,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852, 1261, 1262, 1263, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1263, 1263, 1264, 1264, 1264,  879,
     1265, 1266, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1266, 1266, 1267, 1267, 1267,  895, 1268, 1269, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1269, 1269, 1270, 1270,
     1270, 1271, 1271,  913,  913,  913,  913,  913,  913, 1272,
     1273, 1273,  922,  922,  922,  922,  922, 1183, 1183, 1183,
     1183, 1274, 1274, 1275, 1275, 1275,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936, 1276, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1276, 1276, 1277, 1277, 1277, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1278, 1278, 1266, 1266,  895,
     1269, 1269,  911,  913,  913,  913,  917,  913,  913, 1272,
      922,  922,  922,  922,  922,  922,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936, 1276, 1276, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005,  911,  913,  913,
      913,  913, 1030, 1030,  922,  922,  922,  922,  922,  922,

      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936, 1005, 1005, 1183, 1005, 1005, 1005,
      911,  913,  913,  913,  913,  922,  922,  922,  922,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936, 1005, 1183, 1183, 1005,  913,
      913,  913,  913,  922,  922,  936,  936,  936,  936,  936,
     1005, 1183,  913,  913,  922,  922,  936, 1005,  913,  922,
     1183,  913,    0, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183
    } ;

static yyconst flex_int16_t yy_nxt[8423] =
    {   0,
       20,   21,   22,   23,   24,   20,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   46,   20,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   45,   56,   45,   45,
       57,   45,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   45,   67,   45,   68,   69,   70,   71,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   72,   73,   74,   75,   20,   76,   77,
       78,   79,   20,   20,   20,   80,   83,   83,  166,   81,

       86,   87,   86,   87,  149,   84,   84,  150,  151,  149,
      183,  183,  152,  167,  211,   88,  512,   88,   89,   90,
       91,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   92,   89,   89,   89,   89,   89,
       89,   89,   89,   93,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   89,   89,   89,   89,   94,   94,   94,
       94,   94,   95,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   96,   94,   94,   94,   94,
       94,   94,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   97,   98,   99,  100,   89,  101,  102,  103,  104,
       89,   89,   89,  105,  106,  107,  108,  105,  105,  105,
      109,  105,  110,  111,  105,  105,  105,  105,  105,  112,
      105,  105,  105,  105,  105,  113,  105,  105,  114,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  105,  105,
      105,  105,  115,  115,  115,  115,  115,  116,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      117,  115,  115,  115,  115,  115,  115,  105,  118,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  119,  120,  121,  122,

      105,  123,  124,  125,  126,  105,  105,  105,  127,  128,
      129,  127,  130,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  131,  132,  132,  127,  127,  127,
      127,  127,  127,  133,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  127,  127,  127,  127,  134,  134,  134,
      135,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  136,  137,  138,  139,  127,  140,  141,  142,  143,

      127,  127,  127,  156,  178,  157,  184,  180, 1183,  195,
      196,  185,  198,  199,  179,  181,  182,  186,  280,  201,
      212,  213,  214,  215, 1181,  216,  217,  218,  219,  221,
      211,  222,  211,  225,  211, 1183,  211,  158,  292,  223,
      211,  334,  293,  250,  211,  224,  211,  226,  371,  227,
      211,  229,  211,  211,  211,  211,  228,  344,  230,  278,
      766,  281,  231,  211,  381,  232,  315,  497,  211,  211,
      211,  316,  212,  213,  214,  215,  211,  216,  217,  218,
      219,  398,  398,  159,  159,  159,  160,  161,  161,  161,
      161,  161,  161,  162,  163,  164,  169,  462,  203,  204,

      205,  206,  169,  207,  208,  209,  210,  211,  507,  211,
      233,  431,  211,  461,  211,  293,  462,  211,  239,  211,
      234,  211,  235,  211,  236,  211,  240,  211,  211,  241,
      170,  237,  242,  238,  211,  211,  211,  243,  461,  317,
      318,  211,  508,  211,  244,  246,  211,  245,  321,  322,
      211,  211,  247,  248,  319,  251,  211,  249,  211,  252,
      355,  356, 1172,  323,  458,  458,  211,  500,  211,  502,
      211,  211,  211,  514,  253,  357,  171,  171,  171,  172,
      173,  173,  173,  173,  173,  173,  174,  175,  176,  187,
     1178,  188,  188,  459,  211,  459,  211,  261,  460,  460,

      931,  189,  190,  189,  211,  191,  189,  192,  193,  526,
      211,  211,  254,  211,  211,  211,  189,  190,  189,  931,
      279,  518,  211,  211,  191,  189,  255,  211,  211,  211,
      256,  257,  192,  258,  211,  193,  211,  284,  284,  284,
      284,  284,  284,  284,  211,  496,  503,  504,  211,  259,
      211,  262,  260,  211,  263,  549,  501,  264,  265,  211,
      211,  211,  211,  393,  394,  211,  268,  211,  266,  211,
      211,  267,  515,  522,  211,  269,  211,  211,  395,  211,
      275,  211,  270,  211,  271,  211,  505,  272,  276,  273,
      506,  211,  521,  274,  277,  211,  754,  211,  282,  282,

      282,  282,  282,  211,  282,  282,  282,  282,  282,  282,
      211,  282,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      285,  286,  287,  288,  288,  288,  288,  288,  288,  289,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  294,  326,  327,  328,  329,  540,
      330,  331,  332,  333,  335,  336,  337,  338,  211,  339,
      340,  341,  342,  343,  516,  211,  211,  517,  295,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  211,  523,

      211,  525,  296,  296,  296,  297,  298,  296,  296,  296,
      299,  296,  296,  300,  296,  296,  296,  301,  302,  296,
      296,  303,  296,  304,  296,  296,  296,  335,  336,  337,
      338,  211,  339,  340,  341,  342,  347,  347,  347,  347,
      347,  347,  347,  211,  527,  530,  305,  306,  307,  308,
      211,  309,  310,  311,  312,  345,  345,  345,  345,  345,
      756,  345,  345,  345,  345,  345,  345,  211,  345,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  349,  350,

      351,  351,  351,  351,  351,  351,  352,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  363,  364,  365,  366,  380,  367,  368,  369,  370,
      372,  373,  374,  375,  769,  376,  377,  378,  379,  383,
      383,  383,  383,  383,  211,  383,  383,  383,  383,  383,
      383,  211,  383,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  532, 1158,  372,
      373,  374,  375,  211,  376,  377,  378,  379,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  386,

      387,  388,  389,  389,  389,  389,  389,  389,  390,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  400,  401,  402,  403,  417,  404,  405,
      406,  407,  409,  410,  411,  412,  945,  413,  414,  415,
      416,  418,  418,  418,  418,  418,  211,  418,  418,  418,
      418,  418,  418,  582,  418,  420,  420,  420,  420,  420,
      420,  420,  519,  211,  535,  597,  211,  409,  410,  411,
      412,  520,  413,  414,  415,  416,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,  420,  421,  422,  423,  424,  424,  424,
      424,  424,  424,  425,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  156, 1157,
      157,  155,  155,  155,  155,  155,  155,  155,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  537,
      211,  211,  158,  155,  155,  155,  155,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  557,  753,  211,  159,  159,
      159,  160,  161,  161,  161,  161,  161,  161,  162,  163,
      164,  156,  524,  155,  211,  211,  552,  433,  478,  478,
      478,  478,  478,  478,  478,  211,  433,  439,  439,  439,
      439,  439,  439,  439,  453,  453,  453,  453,  453,  453,
      453,  315,  434,  211,  533,  155,  316,  531,  433,  433,
      534,  211,  211,  433,  487,  487,  487,  487,  487,  487,
      487,  433,  548,  211,  433,  211,  433,  435,  433,  559,
      436,  156,  211,  157,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  439,  439,

      439,  439,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  565,  211,  211,  158,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  582,  595,  211,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  159,  159,  159,  160,  161,  161,  161,  161,  161,
      161,  162,  163,  164,  169,  183,  183,  528,  536,  546,
      440,  211,  550,  211,  582,  455,  456,  455,  529,  545,
      455,  211,  211,  599,  463,  463,  211,  547,  551,  211,

      455,  456,  455,  463,  463,  463,  463,  558,  441,  455,
      292,  211,  211,  570,  293,  944,  463,  463,  463,  463,
      463,  463,  469,  470,  471,  472,  211,  473,  474,  475,
      476,  202,  202,  202,  202,  202,  211,  202,  202,  202,
      202,  202,  202,  564,  202,  212,  213,  214,  215,  211,
      216,  217,  218,  219,  442,  442,  442,  443,  444,  444,
      444,  444,  444,  444,  445,  446,  447,  169,  538,  448,
      553,  562,  563,  168,  539,  211,  582,  211,  554,  211,
      596,  211,  448,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  509,  449,  211,

      510,  168,  780,  568,  448,  448,  511,  569,  211,  448,
      555,  600,  211,  541,  556,  582,  211,  448,  542,  211,
      448,  334,  448,  450,  448,  543,  451,  169,  431,  642,
      211,  544,  293,  440,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  479,  480,
      481,  482,  482,  482,  482,  482,  482,  483,  398,  398,
      211,  441,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  211,  211,  211,  211,
      211,  773,  211,  211,  211,  211,  211,  211,  211,  211,
      460,  460,  211,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  442,  442,  442,
      443,  444,  444,  444,  444,  444,  444,  445,  446,  447,
      187,  211,  188,  188,  560,  732,  566,  732,  757,  567,
      733,  733,  189,  190,  189,  211,  191,  189,  192,  561,
      571,  571,  571,  571,  767,  582,  211,  189,  190,  189,
      408,  761,  592,  211,  593,  191,  189,  594,  643,  643,
      643,  643,  211,  192,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  488,  489,  490,  491,  491,  491,  491,  491,

      491,  492,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  495,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      763,  211,  772,  212,  213,  214,  215,  211,  216,  217,
      218,  219,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  574,  575,  576,  577,  591,  578,  579,  580,
      581,  583,  584,  585,  586, 1127,  587,  588,  589,  590,
      296,  296,  296,  296,  296,  760,  296,  296,  296,  296,
      296,  296,  880,  296,  602,  602,  602,  602,  602,  602,
      602,  211,  371,  764,  765,  334,  583,  584,  585,  586,
      675,  587,  588,  589,  590,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

      602,  602,  602,  603,  604,  605,  606,  606,  606,  606,
      606,  606,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  317,  318,  321,
      322,  615,  616,  617,  618,  771,  619,  620,  621,  622,
      981,  211,  319,  755,  323,  325,  325,  325,  325,  325,
      211,  325,  325,  325,  325,  325,  325,  211,  325,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  625,  626,  627,  628,  628,  628,

      628,  628,  628,  629,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  335,  336,
      337,  338,  582,  339,  340,  341,  342,  334,  334,  334,
      334,  334,  782,  334,  334,  334,  334,  334,  334,  211,
      334,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  634,  635,  636,  637,
      637,  637,  637,  637,  637,  638,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      641,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  676,
      676,  676,  676,  335,  336,  337,  338,  211,  339,  340,
      341,  342,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  355,  356,  648,
      649,  650,  651,  796,  652,  653,  654,  655,  775,  211,
      393,  394,  357,  362,  362,  362,  362,  362,  211,  362,
      362,  362,  362,  362,  362,  395,  362,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  658,  659,  660,  661,  661,  661,  661,  661,
      661,  662,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  372,  373,  374,  375,

      211,  376,  377,  378,  379,  371,  371,  371,  371,  371,
      787,  371,  371,  371,  371,  371,  371,  211,  371,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  667,  668,  669,  670,  670,  670,
      670,  670,  670,  671,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  674,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  709,  709,  709,
      709,  372,  373,  374,  375,  211,  376,  377,  378,  379,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  682,  683,  684,  685,  211,
      686,  687,  688,  689,  399,  399,  399,  399,  399,  795,

      399,  399,  399,  399,  399,  399,  211,  399,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  692,  693,  694,  695,  695,  695,  695,
      695,  695,  696,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  409,  410,  411,
      412,  211,  413,  414,  415,  416,  408,  408,  408,  408,
      408,  800,  408,  408,  408,  408,  408,  408,  211,  408,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  701,  702,  703,  704,  704,
      704,  704,  704,  704,  705,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  708,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  813,  409,  410,
      411,  412,  211,  413,  414,  415,  416,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  156,  211,  156,  719,  719,  740,  740,
      740,  740,  740,  740,  740,  719,  719,  719,  719,  789,
      737,  211,  738,  748,  748,  748,  748,  758,  719,  719,
      719,  719,  719,  719,  720,  720,  781,  711,  759,  737,
      211,  211,  211,  720,  720,  720,  720,  738,  750,  750,

      750,  750,  211,  729,  729,  762,  720,  720,  720,  720,
      720,  720,  729,  729,  729,  729,  169,  790,  722,  211,
      211,  211,  793,  211,  784,  729,  729,  729,  729,  729,
      729,  722,  211,  712,  712,  712,  713,  714,  714,  714,
      714,  714,  714,  715,  716,  717,  156,  723,  157,  768,
      770,  774,  776,  722,  722,  785,  211,  798,  722,  778,
      777,  791,  779,  211,  211,  211,  722,  211,  985,  722,
      211,  722,  724,  722,  211,  725,  211,  211,  211,  792,
      158,  439,  439,  439,  439,  439,  439,  439,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  442,  442,  442,  442,  442,  439,
      439,  439,  439,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  801,  803,  211,  159,  159,  159,  160,
      161,  161,  161,  161,  161,  161,  162,  163,  164,  156,
      804,  156,  469,  470,  471,  472,  783,  473,  474,  475,
      476,  808,  211,  786,  718,  718,  788,  797,  802, 1130,
      211,  211,  937,  718,  718,  718,  718,  211,  211,  817,
      211,  809,  211,  711,  211,  211,  718,  718,  718,  718,
      718,  718,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      469,  470,  471,  472,  582,  473,  474,  475,  476,  712,
      712,  712,  713,  714,  714,  714,  714,  714,  714,  715,
      716,  717,  156, 1129,  157,  730,  730,  810,  805,  811,
      820,  814,  211,  818,  730,  730,  730,  730,  211,  806,
      815,  211,  211,  211,  440,  211,  582,  730,  730,  730,
      730,  730,  730,  439,  439,  816,  158,  856,  211,  211,
      582,  859,  439,  439,  439,  439,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  439,  439,  439,  439,  439,
      439,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  822,  936,  211,  821,  855,
      211,  582,  159,  159,  159,  160,  161,  161,  161,  161,
      161,  161,  162,  163,  164,  156,  211,  157,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  458,  458,  823,  858,  460,  460,  824,  582,
      582,  211,  734,  735,  734,  211,  736,  734,  736,  158,
      582,  736,  582,  853,  860,  896,  582,  734,  735,  734,
      857,  736,  854,  736,  733,  733,  734,  211,  371,  941,
      736,  741,  742,  743,  744,  744,  744,  744,  744,  744,
      745,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  159,  159,  159,  160,  161,
      161,  161,  161,  161,  161,  162,  163,  164,  169,  468,
      468,  468,  468,  468,  169,  468,  468,  468,  468,  468,
      468,  211,  468,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  862,  862,  862,
      862,  211,  441,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  211,  935,  211,  442,  442,

      442,  443,  444,  444,  444,  444,  444,  444,  445,  446,
      447,  169,  875,  875,  875,  875,  211,  169,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  212,  213,  214,  215,  211,  216,  217,  218,
      219,  877,  877,  877,  877,  441,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  211,  940,  211,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  442,  442,  442,  443,  444,  444,  444,  444,  444,

      444,  445,  446,  447,  440,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  211,  211,  947,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  728,  728,
      835,  835,  835,  835,  835,  835,  835,  728,  728,  728,
      728,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      728,  728,  728,  728,  728,  728,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      826,  827,  828,  829,  211,  830,  831,  832,  833,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  752,  573,  573,  573,  573,
      573,  211,  573,  573,  573,  573,  573,  573, 1056,  573,

      836,  837,  838,  839,  839,  839,  839,  839,  839,  840,
      946,  212,  213,  214,  215,  211,  216,  217,  218,  219,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  583,  584,  585,  586,  211,  587,  588,  589,
      590,  582,  582,  582,  582,  582, 1042,  582,  582,  582,
      582,  582,  582,  211,  582,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  844,

      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      845,  846,  847,  848,  848,  848,  848,  848,  848,  849,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  852,  582,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  930,  861,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  615,  616,  617,  618,  939,  619,  620,  621,  622,
      930,  211,  951,  583,  584,  585,  586,  211,  587,  588,
      589,  590,  862,  862,  862,  862,  862,  862,  862,  862,

      862,  862,  862,  862,  862,  862,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  614,  614,  614,  614,  614,  211,  614,  614,
      614,  614,  614,  614, 1077,  614,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  868,  869,  870,  871,  871,  871,  871,  871,  871,
      872,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  615,  616,  617,  618,  211,
      619,  620,  621,  622,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,

      876,  876,  876,  876,  876,  876,  876,  876,  876,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  335,  336,  337,
      338,  211,  339,  340,  341,  342,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,

      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  879,
      648,  649,  650,  651,  211,  652,  653,  654,  655,  647,
      647,  647,  647,  647,  938,  647,  647,  647,  647,  647,
      647,  943,  647,  211,  974,  211,  335,  336,  337,  338,
      211,  339,  340,  341,  342,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      884,  885,  886,  887,  887,  887,  887,  887,  887,  888,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  648,  649,  650,  651,  211,  652,
      653,  654,  655,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,

      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      372,  373,  374,  375,  211,  376,  377,  378,  379,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  894,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  895,  682,  683,  684,
      685,  211,  686,  687,  688,  689,  681,  681,  681,  681,
      681,  954,  681,  681,  681,  681,  681,  681,  211,  681,
      953,  211,  958,  372,  373,  374,  375,  211,  376,  377,
      378,  379,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  899,  899,  899,  899,

      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  900,  901,  902,
      903,  903,  903,  903,  903,  903,  904,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  682,  683,  684,  685,  211,  686,  687,  688,  689,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  409,  410,  411,
      412,  211,  413,  414,  415,  416,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  911,  432,  432,  432,  432,  432,  432,
      432,  712,  712,  712,  712,  712,  712,  712,  919,  919,
      156,  932,  932,  932,  932,  959,  912,  919,  919,  919,
      919,  928,  967,  928,  211,  912,  929,  929,  942,  211,
      919,  919,  919,  919,  919,  919,  211,  409,  410,  411,

      412,  913,  413,  414,  415,  416,  948,  912,  912,  950,
      956,  952,  912,  962,  211,  955,  965,  211,  211,  976,
      912,  211,  211,  912,  211,  912,  914,  912,  211,  915,
      156,  211,  156,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  432,  432,  432,
      432,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  211,  371,  972,  711,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  973,  582,  211,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      712,  712,  712,  713,  714,  714,  714,  714,  714,  714,
      715,  716,  717,  918,  918,  970,  960,  964,  963,  922,
      922,  991,  918,  918,  918,  918,  211,  211,  922,  922,
      922,  922,  211,  211,  211,  918,  918,  918,  918,  918,
      918,  922,  922,  922,  922,  922,  922,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  980,  211,  211,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  156, 1054,
      157,  469,  470,  471,  472,  971,  473,  474,  475,  476,

      966,  211,  582,  920,  920,  968,  211,  211,  211,  923,
      923,  979,  920,  920,  920,  920,  975,  582,  923,  923,
      923,  923,  158, 1010,  211,  920,  920,  920,  920,  920,
      920,  923,  923,  923,  923,  923,  923,  439,  439,  211,
     1007,  211,  987,  988,  582,  582,  439,  439,  439,  439,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  439,
      439,  439,  439,  439,  439, 1012,  211,  582,  159,  159,
      159,  160,  161,  161,  161,  161,  161,  161,  162,  163,
      164,  156, 1011,  157,  925,  925,  582,  977, 1001, 1001,
     1001, 1001,  211,  925,  925,  925,  925,  469,  470,  471,

      472,  211,  473,  474,  475,  476,  925,  925,  925,  925,
      925,  925,  926,  926,  211,  158, 1003, 1003, 1003, 1003,
     1071,  926,  926,  926,  926,  469,  470,  471,  472,  978,
      473,  474,  475,  476,  926,  926,  926,  926,  926,  926,
      582, 1006, 1014,  211,  582, 1015,  582,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  159,  159,  159,  160,  161,  161,  161,  161,  161,
      161,  162,  163,  164,  169,  983, 1008,  982,  440,  211,
      169,  986,  989,  990, 1009,  211,  211,  927,  927,  211,
      733,  733, 1115,  211,  211,  211,  927,  927,  927,  927,

      455, 1057,  455,  929,  929,  455, 1041,  211,  441,  927,
      927,  927,  927,  927,  927,  455,  211,  455, 1016, 1016,
     1016, 1016, 1043,  211,  455,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  211,  442,  442,  442,  443,  444,  444,
      444,  444,  444,  444,  445,  446,  447,  169, 1149,  212,
      213,  214,  215,  169,  216,  217,  218,  219, 1018, 1018,
     1018, 1018,  921,  921,  993,  993,  993,  993,  993,  993,
      993,  921,  921,  921,  921, 1021, 1021, 1021, 1021,  211,

      211,  441, 1039, 1044,  921,  921,  921,  921,  921,  921,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  212,  213,
      214,  215,  211,  216,  217,  218,  219,  442,  442,  442,
      443,  444,  444,  444,  444,  444,  444,  445,  446,  447,
      439,  439,  211,  211,  211, 1045,  211,  211,  211,  439,
      439,  439,  439, 1069,  934, 1040, 1053, 1047, 1046,  211,
     1048,  211,  439,  439,  439,  439,  439,  439,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  212,  213,  214,  215,  211,  216,  217,  218,
      219,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  826,
      827,  828,  829,  211,  830,  831,  832,  833,  825,  825,
      825,  825,  825, 1049,  825,  825,  825,  825,  825,  825,
      211,  825,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      994,  995,  996,  997,  997,  997,  997,  997,  997,  998,

      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  826,  827,  828,  829,  211,  830,
      831,  832,  833,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  583,  584,  585,  586,
      211,  587,  588,  589,  590,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582, 1005,  615,
      616,  617,  618,  211,  619,  620,  621,  622,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017,  211, 1050, 1087,  583,  584,  585,  586,  582,  587,
      588,  589,  590, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,

     1017, 1017, 1017, 1017, 1017,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  615,  616,  617,  618,  880,  619,  620,
      621,  622,  615,  616,  617,  618,  211,  619,  620,  621,
      622,  335,  336,  337,  338,  211,  339,  340,  341,  342,
      335,  336,  337,  338,  211,  339,  340,  341,  342,  211,
     1058,  211, 1055, 1051,  211, 1060, 1062,  335,  336,  337,
      338, 1052,  339,  340,  341,  342,  648,  649,  650,  651,
      211,  652,  653,  654,  655,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  648,  649,
      650,  651, 1020,  652,  653,  654,  655,  648,  649,  650,

      651,  211,  652,  653,  654,  655,  372,  373,  374,  375,
      211,  376,  377,  378,  379,  372,  373,  374,  375,  211,
      376,  377,  378,  379,  211, 1061,  211, 1059,  211, 1063,
     1065, 1064,  372,  373,  374,  375, 1082,  376,  377,  378,
      379,  682,  683,  684,  685,  582,  686,  687,  688,  689,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  682,  683,  684,  685,  211,  686,  687,
      688,  689,  682,  683,  684,  685, 1023,  686,  687,  688,
      689,  409,  410,  411,  412, 1104,  413,  414,  415,  416,
      409,  410,  411,  412,  211,  413,  414,  415,  416, 1067,
      211,  409,  410,  411,  412,  211,  413,  414,  415,  416,
      156,  211,  156, 1025, 1025, 1066,  211, 1068,  211, 1073,

     1076,  211, 1025, 1025, 1025, 1025,  469,  470,  471,  472,
      211,  473,  474,  475,  476, 1025, 1025, 1025, 1025, 1025,
     1025, 1026, 1026,  211,  711,  211, 1081,  432,  432, 1072,
     1026, 1026, 1026, 1026,  582,  211,  432,  432,  432,  432,
     1070, 1110, 1037, 1026, 1026, 1026, 1026, 1026, 1026,  432,
      432,  432,  432,  432,  432,  469,  470,  471,  472,  211,
      473,  474,  475,  476,  211,  582,  211, 1074, 1083, 1102,
      712,  712,  712,  713,  714,  714,  714,  714,  714,  714,
      715,  716,  717,  156,  211,  156,  212,  213,  214,  215,
      211,  216,  217,  218,  219, 1084,  582,  211, 1024, 1024,

     1105, 1075,  582, 1085, 1028, 1028, 1122, 1024, 1024, 1024,
     1024, 1086,  394, 1028, 1028, 1028, 1028,  711,  211,  582,
     1024, 1024, 1024, 1024, 1024, 1024, 1028, 1028, 1028, 1028,
     1028, 1028, 1029, 1029, 1078, 1078, 1078, 1078,  211, 1101,
     1109, 1029, 1029, 1029, 1029,  212,  213,  214,  215,  371,
      216,  217,  218,  219, 1029, 1029, 1029, 1029, 1029, 1029,
      211,  211, 1103,  712,  712,  712,  713,  714,  714,  714,
      714,  714,  714,  715,  716,  717,  432,  432, 1106,  211,
      356, 1088, 1033, 1033,  334,  432,  432,  432,  432,  408,
      211, 1033, 1033, 1033, 1033,  322, 1107, 1108,  432,  432,

      432,  432,  432,  432, 1033, 1033, 1033, 1033, 1033, 1033,
      826,  827,  828,  829,  211,  830,  831,  832,  833, 1112,
      211, 1111, 1113,  211, 1114,  211, 1127, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027,  156,  211,  157, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079,  211,  211, 1116, 1030, 1030,  211, 1119,
     1038, 1118, 1034, 1034, 1117, 1030, 1030, 1030, 1030, 1126,
      318, 1034, 1034, 1034, 1034,  158,  582,  582, 1030, 1030,
     1030, 1030, 1030, 1030, 1034, 1034, 1034, 1034, 1034, 1034,
     1035, 1035, 1131,  408,  582,  211,  211,  211, 1142, 1035,

     1035, 1035, 1035,  212,  213,  214,  215, 1120,  216,  217,
      218,  219, 1035, 1035, 1035, 1035, 1035, 1035, 1141,  211,
     1146,  159,  159,  159,  160,  161,  161,  161,  161,  161,
      161,  162,  163,  164,  169,  211,  826,  827,  828,  829,
      169,  830,  831,  832,  833, 1121,  440,  211,  211, 1031,
     1031, 1143,  211,  211, 1125, 1036, 1036, 1123, 1031, 1031,
     1031, 1031, 1124,  582, 1036, 1036, 1036, 1036,  441,  582,
     1140, 1031, 1031, 1031, 1031, 1031, 1031, 1036, 1036, 1036,
     1036, 1036, 1036,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992, 1078, 1078, 1078,

     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078,  211, 1148, 1013,  442,  442,  442,  443,  444,  444,
      444,  444,  444,  444,  445,  446,  447,  169, 1128,  826,
      827,  828,  829,  169,  830,  831,  832,  833,  211,  211,
      211,  582, 1032, 1032,  211,  929,  929, 1150, 1147,  211,
     1153, 1032, 1032, 1032, 1032,  734, 1144,  734,  211,  211,
      734,  441, 1151, 1000, 1032, 1032, 1032, 1032, 1032, 1032,
      734, 1152,  734,  211,  211, 1145, 1154, 1155,  999,  734,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  583,  584,  585,  586, 1156,  587,

      588,  589,  590,  582,  211,  211, 1168,  442,  442,  442,
      443,  444,  444,  444,  444,  444,  444,  445,  446,  447,
      439,  439,  211,  211,  211, 1166, 1167,  582, 1171,  439,
      439,  439,  439,  583,  584,  585,  586, 1169,  587,  588,
      589,  590,  439,  439,  439,  439,  439,  439, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079,  615,  616,  617,  618,  984,  619,  620,  621,
      622,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825, 1080,  615,  616,  617,  618,  211,  619,
      620,  621,  622,  648,  649,  650,  651,  211,  652,  653,
      654,  655,  648,  649,  650,  651, 1159,  652,  653,  654,
      655, 1157,  211,  582,  583,  584,  585,  586,  969,  587,
      588,  589,  590,  682,  683,  684,  685, 1158,  686,  687,
      688,  689,  682,  683,  684,  685,  961,  686,  687,  688,
      689, 1089, 1089,  211,  211, 1170,  211, 1090, 1090,  211,
     1089, 1089, 1089, 1089,  211, 1177, 1090, 1090, 1090, 1090,
      957,  211,  582, 1089, 1089, 1089, 1089, 1089, 1089, 1090,

     1090, 1090, 1090, 1090, 1090, 1091, 1091,  949,  582, 1172,
     1181,  211,  211,  211, 1091, 1091, 1091, 1091,  826,  827,
      828,  829,  211,  830,  831,  832,  833, 1091, 1091, 1091,
     1091, 1091, 1091,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916, 1092, 1092,  211,
      211,  211,  408, 1093, 1093,  408, 1092, 1092, 1092, 1092,
      582,  582, 1093, 1093, 1093, 1093,  906,  905,  394, 1092,
     1092, 1092, 1092, 1092, 1092, 1093, 1093, 1093, 1093, 1093,
     1093,  156,  394,  157,  826,  827,  828,  829,  371,  830,
      831,  832,  833,  371,  890,  889, 1094, 1094,  356,  356,

      334,  334, 1095, 1095,  874, 1094, 1094, 1094, 1094,  873,
      322, 1095, 1095, 1095, 1095,  158,  322,  318, 1094, 1094,
     1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095, 1095, 1095,
     1096, 1096,  318,  582,  582,  851,  850,  842,  841, 1096,
     1096, 1096, 1096,  211,  211,  819,  812,  211,  807,  211,
      799,  211, 1096, 1096, 1096, 1096, 1096, 1096,  794,  211,
      211,  159,  159,  159,  160,  161,  161,  161,  161,  161,
      161,  162,  163,  164, 1097, 1097,  211,  211,  747,  746,
     1098, 1098,  466, 1097, 1097, 1097, 1097,  467,  408, 1098,
     1098, 1098, 1098,  408,  707,  706, 1097, 1097, 1097, 1097,

     1097, 1097, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099,
      698,  697,  394,  679,  678,  371,  371, 1099, 1099, 1099,
     1099,  673,  672,  664,  663,  356,  645,  440,  334,  334,
     1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100,  640,  639,
      631,  630, 1132, 1132,  322, 1100, 1100, 1100, 1100,  612,
      318, 1132, 1132, 1132, 1132,  610,  609,  608, 1100, 1100,
     1100, 1100, 1100, 1100, 1132, 1132, 1132, 1132, 1132, 1132,
     1133, 1133,  598,  211,  211,  211, 1134, 1134,  211, 1133,
     1133, 1133, 1133,  513,  499, 1134, 1134, 1134, 1134,  498,
      494,  493, 1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134,

     1134, 1134, 1134, 1134, 1135, 1135,  485,  484,  467,  465,
      155,  155,  464, 1135, 1135, 1135, 1135,  153,  427,  155,
      155,  155,  155,  426,  397,  392, 1135, 1135, 1135, 1135,
     1135, 1135,  155,  155,  155,  155,  155,  155,  155,  155,
      391,  382,  361,  360, 1136, 1136,  359,  155,  155,  155,
      155,  358,  354, 1136, 1136, 1136, 1136,  353,  324,  320,
      155,  155,  155,  155,  155,  155, 1136, 1136, 1136, 1136,
     1136, 1136, 1137, 1137,  291,  290,  220,  200, 1138, 1138,
      197, 1137, 1137, 1137, 1137,  194,  177, 1138, 1138, 1138,
     1138,  165,  154,  153, 1137, 1137, 1137, 1137, 1137, 1137,

     1138, 1138, 1138, 1138, 1138, 1138, 1139, 1139, 1183,  147,
      147,  145,  145, 1183, 1183, 1139, 1139, 1139, 1139, 1183,
     1183, 1183, 1183, 1183, 1183,  440, 1183, 1183, 1139, 1139,
     1139, 1139, 1139, 1139,  439,  439, 1183, 1183, 1183, 1183,
     1183, 1183, 1183,  439,  439,  439,  439, 1183, 1183, 1183,
     1183, 1183, 1183,  440, 1183, 1183,  439,  439,  439,  439,
      439,  439,  439,  439, 1183, 1183, 1183, 1183, 1160, 1160,
     1183,  439,  439,  439,  439, 1183, 1183, 1160, 1160, 1160,
     1160, 1183, 1183, 1183,  439,  439,  439,  439,  439,  439,
     1160, 1160, 1160, 1160, 1160, 1160, 1161, 1161, 1183, 1183,

     1183, 1183, 1162, 1162, 1183, 1161, 1161, 1161, 1161, 1183,
     1183, 1162, 1162, 1162, 1162, 1183, 1183, 1183, 1161, 1161,
     1161, 1161, 1161, 1161, 1162, 1162, 1162, 1162, 1162, 1162,
     1163, 1163, 1183, 1183, 1183, 1183, 1164, 1164, 1183, 1163,
     1163, 1163, 1163, 1183, 1183, 1164, 1164, 1164, 1164, 1183,
     1183, 1183, 1163, 1163, 1163, 1163, 1163, 1163, 1164, 1164,
     1164, 1164, 1164, 1164,  439,  439, 1183, 1183, 1183, 1183,
      439,  439, 1183,  439,  439,  439,  439, 1183, 1183,  439,
      439,  439,  439, 1183, 1183, 1183,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439, 1165, 1165,

     1183, 1183, 1183, 1183, 1173, 1173, 1183, 1165, 1165, 1165,
     1165, 1183, 1183, 1173, 1173, 1173, 1173, 1183, 1183, 1183,
     1165, 1165, 1165, 1165, 1165, 1165, 1173, 1173, 1173, 1173,
     1173, 1173,  432,  432, 1183, 1183, 1183, 1183,  432,  432,
     1183,  432,  432,  432,  432, 1183, 1183,  432,  432,  432,
      432, 1183, 1183, 1183,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432, 1174, 1174, 1183, 1183,
     1183, 1183, 1175, 1175, 1183, 1174, 1174, 1174, 1174, 1183,
     1183, 1175, 1175, 1175, 1175, 1183, 1183, 1183, 1174, 1174,
     1174, 1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1175,

     1176, 1176, 1183, 1183, 1183, 1183, 1179, 1179, 1183, 1176,
     1176, 1176, 1176, 1183, 1183, 1179, 1179, 1179, 1179, 1183,
     1183, 1183, 1176, 1176, 1176, 1176, 1176, 1176, 1179, 1179,
     1179, 1179, 1179, 1179, 1093, 1093, 1183, 1183, 1183, 1183,
     1180, 1180, 1183, 1093, 1093, 1093, 1093, 1183, 1183, 1180,
     1180, 1180, 1180, 1183, 1183, 1183, 1093, 1093, 1093, 1093,
     1093, 1093, 1180, 1180, 1180, 1180, 1180, 1180, 1099, 1099,
     1183, 1183, 1183, 1183, 1182, 1182, 1183, 1099, 1099, 1099,
     1099, 1183, 1183, 1182, 1182, 1182, 1182, 1183, 1183, 1183,
     1099, 1099, 1099, 1099, 1099, 1099, 1182, 1182, 1182, 1182,

     1182, 1182, 1137, 1137, 1183, 1183, 1183, 1183, 1161, 1161,
     1183, 1137, 1137, 1137, 1137, 1183, 1183, 1161, 1161, 1161,
     1161, 1183, 1183, 1183, 1137, 1137, 1137, 1137, 1137, 1137,
     1161, 1161, 1161, 1161, 1161, 1161,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   85,   85,   85,   85,   85,
       85,   85,   85,   85,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  202,

     1183, 1183, 1183, 1183,  202,  202,  211,  211,  211,  313,
     1183,  313,  313, 1183,  313,  313,  313,  313,  314, 1183,
      314,  314,  314,  314,  314,  314,  314,  325,  325,  334,
      334,  334,  362,  362,  371,  371,  371,  396, 1183, 1183,
      396,  396,  396,  396,  396,  396,  399,  399,  408,  408,
      408,  428, 1183,  428,  428,  428,  428,  428,  428,  428,
      429, 1183,  429,  429,  429,  429,  429,  429,  429,  430,
     1183,  430, 1183,  430,  430,  430,  430,  430,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  457, 1183,  457,  457,  457,
      457,  457,  457,  457,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  468,  468,  468,  211,  211,  211,  573,
      573,  582,  582,  582,  313, 1183,  313,  313, 1183,  313,
      313,  313,  313,  314, 1183,  314,  314, 1183, 1183,  314,
      314,  314,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      614,  614,  614,  334,  334,  334,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  647,  647,  647,  371,  371,
      371,  396, 1183,  396,  396,  396,  396,  396,  396,  396,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  681,
      681,  681,  408,  408,  408,  428, 1183,  428,  428,  428,
      428,  428,  428,  428,  429, 1183,  429,  429,  429,  429,
      429,  429,  429,  430, 1183,  430, 1183,  430,  430,  430,
      430,  430,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  457,
     1183,  457,  457,  457,  457,  457,  457,  457,  463,  463,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  468,
      468,  468,  211,  211,  211,  825,  825,  825,  582,  582,

      582,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  614,  614,  614,
      334,  334,  334,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  647,  647,  647,  371,  371,  371,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  681,  681,  681,  408,  408,
      408,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  468,  468,
      468,  211,  211,  211,  825,  825,  825,  582,  582,  582,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  614,  614,
      614,  334,  334,  334,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  647,  647,  647,  371,  371,  371,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  681,  681,
      681,  408,  408,  408,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  468,  468,  468,  211,  211,  211,  825,  825,  825,
      582,  582,  582,  614,  614,  614,   19, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183
    } ;

static yyconst flex_int16_t yy_chk[8423] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    4,   26,    2,

        5,    5,    6,    6,   17,    3,    4,   17,   18,   18,
       34,   34,   18,   26,  234,    5,  234,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   24,   31,   24,   35,   33,   37,   40,
       40,   35,   42,   42,   31,   33,   33,   35,   69,   44,
       45,   45,   45,   45, 1181,   45,   45,   45,   45,   49,
       57,   49,   57,   50,   50,   37,   50,   24,   80,   49,
       57,   96,   80,   57,   50,   49,   57,   50,  117,   50,
       50,   51,   51,   66,   51,   66,   50,   96,   51,   66,
      509,   69,   51,   66,  117,   51,   84,  223,   51,   66,
      509,   84,   49,   49,   49,   49,  223,   49,   49,   49,
       49,  132,  132,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   27,  192,   44,   44,

       44,   44,   27,   44,   44,   44,   44,   52,  231,   52,
       52,  151,   53,  191,   53,  151,  192,   52,   54,   54,
       52,   54,   53,   52,   53,  231,   54, 1177,   53,   54,
       27,   53,   54,   53,   55,   54,   55,   55,  191,   86,
       86,   56,  232,   56,   55,   56,  232,   55,   90,   90,
       55,   56,   56,   56,   86,   58,   58,   56,   58,   58,
      106,  106, 1172,   90,  187,  187,   58,  226,  228,  228,
      226,  236,   58,  236,   58,  106,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   36,
     1171,   36,   36,  190,   61,  190,   61,   61,  190,  190,

      738,   36,   36,   36,   61,   36,   36,   36,   36,  247,
       61,  247,   59,   67,   59,   67,   36,   36,   36,  738,
       67,  239,   59,   67,   36,   36,   59,  239,   59,   67,
       59,   59,   36,   60,   60,   36,   60,   74,   74,   74,
       74,   74,   74,   74,   60,  222,  229,  229,  265,   60,
       60,   62,   60,   62,   62,  265,  227,   62,   62,  222,
       63,   62,   63,  128,  128, 1170,   63,   62,   62,  227,
       63,   62,  237,  242,  242,   63,   63,   64,  128,   64,
       65,   65,   63,   65,   64,  237,  230,   64,   65,   64,
      230,   65,  241,   64,   65,  241,  498,   65,   72,   72,

       72,   72,   72,  230,   72,   72,   72,   72,   72,   72,
      498,   72,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   81,   93,   93,   93,   93,  260,
       93,   93,   93,   93,   94,   94,   94,   94, 1168,   94,
       94,   94,   94,   95,  238,  260,  238,  238,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,  243,  243,

      245,  245,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   95,   95,   95,
       95, 1167,   95,   95,   95,   95,   99,   99,   99,   99,
       99,   99,   99,  248,  248,  251,   81,   81,   81,   81,
      251,   81,   81,   81,   81,   97,   97,   97,   97,   97,
      500,   97,   97,   97,   97,   97,   97,  500,   97,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  114,  114,  114,  114,  116,  114,  114,  114,  114,
      115,  115,  115,  115,  512,  115,  115,  115,  115,  119,
      119,  119,  119,  119, 1166,  119,  119,  119,  119,  119,
      119,  512,  119,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  253, 1158,  116,
      116,  116,  116,  253,  116,  116,  116,  116,  121,  121,
      121,  121,  121,  121,  121,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  133,  133,  133,  133,  135,  133,  133,
      133,  133,  134,  134,  134,  134,  768,  134,  134,  134,
      134,  136,  136,  136,  136,  136,  768,  136,  136,  136,
      136,  136,  136,  301,  136,  138,  138,  138,  138,  138,
      138,  138,  240,  256,  256,  301,  240,  135,  135,  135,
      135,  240,  135,  135,  135,  135,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  155, 1157,
      155,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  258,
      258, 1155,  155,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  270,  497,  270,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  158,  244,  158,  497,  244,  267,  158,  205,  205,
      205,  205,  205,  205,  205,  267,  158,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  315,  158,  252,  254,  158,  315,  252,  158,  158,
      255, 1152,  254,  158,  214,  214,  214,  214,  214,  214,
      214,  158,  264,  255,  158,  264,  158,  158,  158,  272,
      158,  159,  272,  159,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  276,  276, 1150,  159,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  299,  299, 1149,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  168,  183,  183,  250,  257,  263,
      168, 1147,  266,  262,  303,  183,  183,  183,  250,  262,
      183,  257,  250,  303,  193,  193,  263,  263,  266,  266,

      183,  183,  183,  193,  193,  193,  193,  271,  168,  183,
      292,  271,  767,  279,  292,  767,  193,  193,  193,  193,
      193,  193,  202,  202,  202,  202,  279,  202,  202,  202,
      202,  203,  203,  203,  203,  203, 1145,  203,  203,  203,
      203,  203,  203,  275,  203,  211,  211,  211,  211,  275,
      211,  211,  211,  211,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  170,  259,  170,
      268,  274,  274,  170,  259, 1144,  300,  259,  268,  268,
      300,  274,  170,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  233,  170, 1143,

      233,  170,  524,  278,  170,  170,  233,  278,  269,  170,
      269,  304,  233,  261,  269,  304,  278,  170,  261,  524,
      170,  344,  170,  170,  170,  261,  170,  171,  431,  344,
      261,  261,  431,  171,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  398,  398,
     1142,  171,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  212,  212,  212,  212,
      212,  516,  212,  212,  212,  212,  212,  212,  516,  212,
      459,  459, 1141,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      188, 1140,  188,  188,  273,  456,  277,  456,  501,  277,
      456,  456,  188,  188,  188,  277,  188,  188,  188,  273,
      286,  286,  286,  286,  510,  298,  501,  188,  188,  188,
     1131,  505,  298,  505,  298,  188,  188,  298,  349,  349,
      349,  349,  510,  188,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  221,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      507,  507,  515,  221,  221,  221,  221,  515,  221,  221,
      221,  221,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  295,  295,  295,  295,  297,  295,  295,  295,
      295,  296,  296,  296,  296, 1127,  296,  296,  296,  296,
      305,  305,  305,  305,  305,  504,  305,  305,  305,  305,
      305,  305,  642,  305,  307,  307,  307,  307,  307,  307,
      307,  504,  381,  508,  508,  642,  297,  297,  297,  297,
      381,  297,  297,  297,  297,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  317,  317,  321,
      321,  325,  325,  325,  325,  514,  325,  325,  325,  325,
      813,  514,  317,  499,  321,  326,  326,  326,  326,  326,
      813,  326,  326,  326,  326,  326,  326,  499,  326,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  328,  328,  328,  328,  328,  328,  328,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  334,  334,
      334,  334, 1125,  334,  334,  334,  334,  335,  335,  335,
      335,  335,  526,  335,  335,  335,  335,  335,  335,  526,
      335,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      343,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  387,
      387,  387,  387,  343,  343,  343,  343, 1123,  343,  343,
      343,  343,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  355,  355,  362,
      362,  362,  362,  541,  362,  362,  362,  362,  518,  518,
      393,  393,  355,  363,  363,  363,  363,  363,  541,  363,
      363,  363,  363,  363,  363,  393,  363,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  365,  365,  365,  365,  365,  365,  365,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  371,  371,  371,  371,

     1118,  371,  371,  371,  371,  372,  372,  372,  372,  372,
      532,  372,  372,  372,  372,  372,  372,  532,  372,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  374,  374,  374,  374,  374,  374,  374,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  380,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  386,  386,  422,  422,  422,
      422,  380,  380,  380,  380, 1117,  380,  380,  380,  380,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  399,  399,  399,  399, 1110,
      399,  399,  399,  399,  400,  400,  400,  400,  400,  540,

      400,  400,  400,  400,  400,  400,  540,  400,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  402,  402,  402,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  408,  408,  408,
      408, 1109,  408,  408,  408,  408,  409,  409,  409,  409,
      409,  546,  409,  409,  409,  409,  409,  409,  546,  409,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  411,  411,  411,  411,  411,  411,
      411,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  417,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  559,  417,  417,
      417,  417,  559,  417,  417,  417,  417,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  432, 1106,  432,  435,  435,  471,  471,
      471,  471,  471,  471,  471,  435,  435,  435,  435,  534,
      463,  534,  463,  480,  480,  480,  480,  502,  435,  435,
      435,  435,  435,  435,  436,  436,  525,  432,  503,  463,
      525,  502, 1105,  436,  436,  436,  436,  463,  489,  489,

      489,  489,  503,  450,  450,  506,  436,  436,  436,  436,
      436,  436,  450,  450,  450,  450,  441,  536,  441,  536,
      538,  506,  538, 1103,  528,  450,  450,  450,  450,  450,
      450,  441,  528,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  433,  441,  433,  511,
      513,  517,  519,  441,  441,  529,  544,  544,  441,  521,
      520,  537,  522,  511,  513,  517,  441,  529,  817,  441,
      519,  441,  441,  441,  520,  441,  522,  521,  817,  537,
      433,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  548,  550,  548,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  434,
      550,  434,  468,  468,  468,  468,  527,  468,  468,  468,
      468,  553,  553,  530,  434,  434,  533,  543,  549, 1087,
      527,  543,  757,  434,  434,  434,  434,  530,  757,  563,
      533,  554,  549,  434,  563,  554,  434,  434,  434,  434,
      434,  434,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      477,  477,  477,  477, 1086,  477,  477,  477,  477,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  437, 1085,  437,  451,  451,  555,  551,  557,
      566,  560,  564,  564,  451,  451,  451,  451,  551,  551,
      561,  555,  560,  557,  452,  566,  594,  451,  451,  451,
      451,  451,  451,  452,  452,  562,  437,  594,  561,  562,
      598,  598,  452,  452,  452,  452,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  452,  452,  452,  452,  452,
      452,  453,  453,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  568,  754,  568,  567,  593,
      754,  593,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  438,  567,  438,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  458,  458,  569,  597,  460,  460,  570, 1081,
      597,  569,  458,  458,  458,  570,  460,  458,  460,  438,
      592,  460,  596,  592,  599,  675,  599,  458,  458,  458,
      596,  460,  592,  460,  732,  732,  458,  764,  675,  764,
      460,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  439,  469,
      469,  469,  469,  469,  439,  469,  469,  469,  469,  469,
      469, 1075,  469,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  604,  604,  604,
      604, 1074,  439,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  753,  753, 1072,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  442,  626,  626,  626,  626, 1071,  442,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  486,  486,  486,  486, 1070,  486,  486,  486,
      486,  635,  635,  635,  635,  442,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  763,  763, 1069,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  442,  448,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  772, 1068,  772,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  449,  449,
      576,  576,  576,  576,  576,  576,  576,  449,  449,  449,
      449,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      449,  449,  449,  449,  449,  449,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      573,  573,  573,  573, 1066,  573,  573,  573,  573,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  495,  574,  574,  574,  574,
      574,  961,  574,  574,  574,  574,  574,  574,  961,  574,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      769,  495,  495,  495,  495,  769,  495,  495,  495,  495,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  582,  582,  582,  582,  944,  582,  582,  582,
      582,  583,  583,  583,  583,  583,  944,  583,  583,  583,
      583,  583,  583, 1065,  583,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  585,

      585,  585,  585,  585,  585,  585,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  591,  600,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  737,  600,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  614,  614,  614,  614,  762,  614,  614,  614,  614,
      737,  762,  776,  591,  591,  591,  591,  776,  591,  591,
      591,  591,  603,  603,  603,  603,  603,  603,  603,  603,

      603,  603,  603,  603,  603,  603,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  615,  615,  615,  615,  615,  988,  615,  615,
      615,  615,  615,  615,  988,  615,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  617,  617,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  623,  623,  623,  623, 1064,
      623,  623,  623,  623,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  632,  632,  632,
      632, 1063,  632,  632,  632,  632,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  641,
      647,  647,  647,  647, 1061,  647,  647,  647,  647,  648,
      648,  648,  648,  648,  760,  648,  648,  648,  648,  648,
      648,  766,  648,  760,  803,  766,  641,  641,  641,  641,
      803,  641,  641,  641,  641,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  656,  656,  656,  656, 1057,  656,
      656,  656,  656,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      665,  665,  665,  665, 1054,  665,  665,  665,  665,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  670,  670,  670,  670,  670,

      670,  670,  670,  670,  670,  670,  670,  670,  670,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  674,  681,  681,  681,
      681, 1049,  681,  681,  681,  681,  682,  682,  682,  682,
      682,  779,  682,  682,  682,  682,  682,  682,  778,  682,
      778,  786,  786,  674,  674,  674,  674,  779,  674,  674,
      674,  674,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  684,  684,  684,  684,

      684,  684,  684,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  690,  690,  690,  690, 1046,  690,  690,  690,  690,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  693,  693,
      693,  693,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  699,  699,  699,
      699, 1044,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  719,  719,
      711,  742,  742,  742,  742,  788,  711,  719,  719,  719,
      719,  735,  796,  735,  796,  711,  735,  735,  765,  788,
      719,  719,  719,  719,  719,  719,  765,  708,  708,  708,

      708,  711,  708,  708,  708,  708,  773,  711,  711,  775,
      782,  777,  711,  791,  773,  780,  794,  791,  782,  805,
      711,  775,  805,  711,  777,  711,  711,  711,  794,  711,
      712,  780,  712,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  801, 1020,  801,  712,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  802, 1011,  802,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  718,  718,  799,  789,  793,  792,  724,
      724,  824,  718,  718,  718,  718,  792,  799,  724,  724,
      724,  724,  789,  793,  824,  718,  718,  718,  718,  718,
      718,  724,  724,  724,  724,  724,  724,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  811,  959,  811,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  720,  959,
      720,  739,  739,  739,  739,  800,  739,  739,  739,  739,

      795,  797, 1007,  720,  720,  797,  809,  800,  795,  725,
      725,  809,  720,  720,  720,  720,  804,  856,  725,  725,
      725,  725,  720,  856,  804,  720,  720,  720,  720,  720,
      720,  725,  725,  725,  725,  725,  725,  726,  726,  819,
      854,  821,  819,  821,  854, 1006,  726,  726,  726,  726,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  726,
      726,  726,  726,  726,  726,  858,  991,  858,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  721,  857,  721,  728,  728,  857,  806,  837,  837,
      837,  837,  990,  728,  728,  728,  728,  748,  748,  748,

      748,  806,  748,  748,  748,  748,  728,  728,  728,  728,
      728,  728,  729,  729,  978,  721,  846,  846,  846,  846,
      978,  729,  729,  729,  729,  749,  749,  749,  749,  807,
      749,  749,  749,  749,  729,  729,  729,  729,  729,  729,
      861,  853,  860,  807,  853,  861,  860,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  722,  815,  855,  814,  730, 1055,
      722,  818,  822,  823,  855,  962,  815,  730,  730,  814,
      733,  733, 1055,  818,  822,  823,  730,  730,  730,  730,

      733,  962,  733,  928,  928,  733,  943,  943,  722,  730,
      730,  730,  730,  730,  730,  733,  989,  733,  869,  869,
      869,  869,  945,  945,  733,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741, 1115,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  723, 1115,  750,
      750,  750,  750,  723,  750,  750,  750,  750,  885,  885,
      885,  885,  723,  723,  828,  828,  828,  828,  828,  828,
      828,  723,  723,  723,  723,  901,  901,  901,  901,  939,

      946,  723,  939,  946,  723,  723,  723,  723,  723,  723,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  751,  751,
      751,  751,  986,  751,  751,  751,  751,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      727,  727,  958,  942,  948,  948,  949,  951,  976,  727,
      727,  727,  727,  976,  752,  942,  958,  951,  949,  954,
      954,  985,  727,  727,  727,  727,  727,  727,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  752,  752,  752,  752,  981,  752,  752,  752,
      752,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  825,
      825,  825,  825,  955,  825,  825,  825,  825,  826,  826,
      826,  826,  826,  955,  826,  826,  826,  826,  826,  826,
      979,  826,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  834,  834,  834,  834,  972,  834,
      834,  834,  834,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  841,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  843,  843,  843,  843,
      970,  843,  843,  843,  843,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  852,  866,
      866,  866,  866,  953,  866,  866,  866,  866,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  956,  956, 1015,  852,  852,  852,  852, 1015,  852,
      852,  852,  852,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  871,  871,  871,  871,  871,  871,  871,  871,  871,

      871,  871,  871,  871,  871,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  875,  875,  875,  875,  879,  875,  875,
      875,  875,  876,  876,  876,  876,  952,  876,  876,  876,
      876,  877,  877,  877,  877,  960,  877,  877,  877,  877,
      878,  878,  878,  878,  967,  878,  878,  878,  878,  957,
      963,  963,  960,  957,  965,  965,  967,  879,  879,  879,
      879,  957,  879,  879,  879,  879,  882,  882,  882,  882,
      950,  882,  882,  882,  882,  883,  883,  883,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  883,  883,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  891,  891,
      891,  891,  895,  891,  891,  891,  891,  892,  892,  892,

      892,  947,  892,  892,  892,  892,  893,  893,  893,  893,
      964,  893,  893,  893,  893,  894,  894,  894,  894,  969,
      894,  894,  894,  894,  966,  966,  968,  964,  971,  968,
      971,  969,  895,  895,  895,  895, 1009,  895,  895,  895,
      895,  898,  898,  898,  898, 1009,  898,  898,  898,  898,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  903,  903,  903,  903,  903,  903,  903,  903,

      903,  903,  903,  903,  903,  903,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  907,  907,  907,  907, 1040,  907,  907,
      907,  907,  908,  908,  908,  908,  911,  908,  908,  908,
      908,  909,  909,  909,  909, 1040,  909,  909,  909,  909,
      910,  910,  910,  910,  941,  910,  910,  910,  910,  974,
      974,  911,  911,  911,  911,  940,  911,  911,  911,  911,
      912,  973,  912,  914,  914,  973,  975,  975,  982,  982,

      987,  987,  914,  914,  914,  914,  932,  932,  932,  932,
      938,  932,  932,  932,  932,  914,  914,  914,  914,  914,
      914,  915,  915,  977,  912,  980, 1008,  916,  916,  980,
      915,  915,  915,  915, 1008, 1048,  916,  916,  916,  916,
      977, 1048,  934,  915,  915,  915,  915,  915,  915,  916,
      916,  916,  916,  916,  916,  933,  933,  933,  933, 1038,
      933,  933,  933,  933,  983, 1010,  937,  983, 1010, 1038,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  913,  984,  913,  934,  934,  934,  934,
     1041,  934,  934,  934,  934, 1012, 1012, 1073,  913,  913,

     1041,  984, 1013, 1013,  918,  918, 1073,  913,  913,  913,
      913, 1014,  897,  918,  918,  918,  918,  913, 1047, 1014,
      913,  913,  913,  913,  913,  913,  918,  918,  918,  918,
      918,  918,  919,  919,  995,  995,  995,  995, 1037, 1037,
     1047,  919,  919,  919,  919,  935,  935,  935,  935,  896,
      935,  935,  935,  935,  919,  919,  919,  919,  919,  919,
     1039, 1042, 1039,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  917,  917, 1042, 1043,
      881, 1023,  923,  923,  880,  917,  917,  917,  917, 1023,
     1045,  923,  923,  923,  923,  865, 1043, 1045,  917,  917,

      917,  917,  917,  917,  923,  923,  923,  923,  923,  923,
      992,  992,  992,  992, 1050,  992,  992,  992,  992, 1051,
     1051, 1050, 1052, 1052, 1053, 1053, 1083,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  920, 1060,  920,  998,  998,  998,  998,  998,  998,
      998,  998,  998, 1056, 1058, 1056,  920,  920, 1059, 1060,
      936, 1059,  925,  925, 1058,  920,  920,  920,  920, 1082,
      864,  925,  925,  925,  925,  920, 1082, 1083,  920,  920,
      920,  920,  920,  920,  925,  925,  925,  925,  925,  925,
      926,  926, 1088, 1088,  863, 1104, 1102, 1062, 1104,  926,

      926,  926,  926,  936,  936,  936,  936, 1062,  936,  936,
      936,  936,  926,  926,  926,  926,  926,  926, 1102, 1112,
     1112,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  921, 1067, 1001, 1001, 1001, 1001,
      921, 1001, 1001, 1001, 1001, 1067,  927, 1076, 1107,  921,
      921, 1107, 1077, 1101, 1080,  927,  927, 1076,  921,  921,
      921,  921, 1077, 1080,  927,  927,  927,  927,  921,  862,
     1101,  921,  921,  921,  921,  921,  921,  927,  927,  927,
      927,  927,  927,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  994,  994,  994,

      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994, 1114, 1114,  859,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  922, 1084, 1002,
     1002, 1002, 1002,  922, 1002, 1002, 1002, 1002, 1113, 1108,
     1121, 1084,  922,  922, 1116,  929,  929, 1116, 1113, 1120,
     1121,  922,  922,  922,  922,  929, 1108,  929, 1111, 1119,
      929,  922, 1119,  833,  922,  922,  922,  922,  922,  922,
      929, 1120,  929, 1122, 1124, 1111, 1122, 1124,  831,  929,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996, 1003, 1003, 1003, 1003, 1126, 1003,

     1003, 1003, 1003, 1126, 1151,  820, 1151,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      924,  924, 1146, 1148, 1153, 1146, 1148, 1156, 1156,  924,
      924,  924,  924, 1004, 1004, 1004, 1004, 1153, 1004, 1004,
     1004, 1004,  924,  924,  924,  924,  924,  924,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997, 1016, 1016, 1016, 1016,  816, 1016, 1016, 1016,
     1016,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1005, 1017, 1017, 1017, 1017,  812, 1017,
     1017, 1017, 1017, 1018, 1018, 1018, 1018,  810, 1018, 1018,
     1018, 1018, 1019, 1019, 1019, 1019, 1130, 1019, 1019, 1019,
     1019, 1128,  808, 1130, 1005, 1005, 1005, 1005,  798, 1005,
     1005, 1005, 1005, 1021, 1021, 1021, 1021, 1129, 1021, 1021,
     1021, 1021, 1022, 1022, 1022, 1022,  790, 1022, 1022, 1022,
     1022, 1024, 1024, 1154,  787, 1154,  785, 1025, 1025,  784,
     1024, 1024, 1024, 1024, 1169, 1169, 1025, 1025, 1025, 1025,
      783,  781, 1128, 1024, 1024, 1024, 1024, 1024, 1024, 1025,

     1025, 1025, 1025, 1025, 1025, 1026, 1026,  774, 1129, 1159,
     1178,  771,  770,  761, 1026, 1026, 1026, 1026, 1078, 1078,
     1078, 1078,  759, 1078, 1078, 1078, 1078, 1026, 1026, 1026,
     1026, 1026, 1026, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028,  758,
      756,  755,  710, 1029, 1029,  709, 1028, 1028, 1028, 1028,
     1159, 1178, 1029, 1029, 1029, 1029,  689,  687,  680, 1028,
     1028, 1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029,
     1029, 1030,  678, 1030, 1079, 1079, 1079, 1079,  677, 1079,
     1079, 1079, 1079,  676,  655,  653, 1030, 1030,  646,  645,

      644,  643, 1031, 1031,  622, 1030, 1030, 1030, 1030,  620,
      613, 1031, 1031, 1031, 1031, 1030,  612,  611, 1030, 1030,
     1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1031, 1031,
     1032, 1032,  610,  601,  595,  590,  588,  581,  579, 1032,
     1032, 1032, 1032,  572,  571,  565,  558,  556,  552,  547,
      545,  542, 1032, 1032, 1032, 1032, 1032, 1032,  539,  535,
      531, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1033, 1033,  523,  496,  476,  474,
     1034, 1034,  467, 1033, 1033, 1033, 1033,  466,  419, 1034,
     1034, 1034, 1034,  418,  416,  414, 1033, 1033, 1033, 1033,

     1033, 1033, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035,
      407,  405,  397,  396,  395,  384,  383, 1035, 1035, 1035,
     1035,  379,  377,  370,  368,  360,  357, 1036,  346,  345,
     1035, 1035, 1035, 1035, 1035, 1035, 1036, 1036,  342,  340,
      333,  331, 1089, 1089,  324, 1036, 1036, 1036, 1036,  323,
      320, 1089, 1089, 1089, 1089,  319,  312,  310, 1036, 1036,
     1036, 1036, 1036, 1036, 1089, 1089, 1089, 1089, 1089, 1089,
     1090, 1090,  302,  283,  282,  249, 1091, 1091,  246, 1090,
     1090, 1090, 1090,  235,  225, 1091, 1091, 1091, 1091,  224,
      219,  217, 1090, 1090, 1090, 1090, 1090, 1090, 1091, 1091,

     1091, 1091, 1091, 1091, 1092, 1092,  210,  208,  201,  199,
     1093, 1093,  195, 1092, 1092, 1092, 1092,  153,  143, 1093,
     1093, 1093, 1093,  141,  131,  126, 1092, 1092, 1092, 1092,
     1092, 1092, 1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094,
      124,  118,  113,  112, 1095, 1095,  109, 1094, 1094, 1094,
     1094,  108,  104, 1095, 1095, 1095, 1095,  102,   92,   88,
     1094, 1094, 1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095,
     1095, 1095, 1096, 1096,   79,   77,   48,   43, 1097, 1097,
       41, 1096, 1096, 1096, 1096,   38,   30, 1097, 1097, 1097,
     1097,   25,   23,   21, 1096, 1096, 1096, 1096, 1096, 1096,

     1097, 1097, 1097, 1097, 1097, 1097, 1098, 1098,   19,   16,
       15,   14,   13,    0,    0, 1098, 1098, 1098, 1098,    0,
        0,    0,    0,    0,    0, 1099,    0,    0, 1098, 1098,
     1098, 1098, 1098, 1098, 1099, 1099,    0,    0,    0,    0,
        0,    0,    0, 1099, 1099, 1099, 1099,    0,    0,    0,
        0,    0,    0, 1100,    0,    0, 1099, 1099, 1099, 1099,
     1099, 1099, 1100, 1100,    0,    0,    0,    0, 1132, 1132,
        0, 1100, 1100, 1100, 1100,    0,    0, 1132, 1132, 1132,
     1132,    0,    0,    0, 1100, 1100, 1100, 1100, 1100, 1100,
     1132, 1132, 1132, 1132, 1132, 1132, 1133, 1133,    0,    0,

        0,    0, 1134, 1134,    0, 1133, 1133, 1133, 1133,    0,
        0, 1134, 1134, 1134, 1134,    0,    0,    0, 1133, 1133,
     1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134, 1134, 1134,
     1135, 1135,    0,    0,    0,    0, 1136, 1136,    0, 1135,
     1135, 1135, 1135,    0,    0, 1136, 1136, 1136, 1136,    0,
        0,    0, 1135, 1135, 1135, 1135, 1135, 1135, 1136, 1136,
     1136, 1136, 1136, 1136, 1137, 1137,    0,    0,    0,    0,
     1138, 1138,    0, 1137, 1137, 1137, 1137,    0,    0, 1138,
     1138, 1138, 1138,    0,    0,    0, 1137, 1137, 1137, 1137,
     1137, 1137, 1138, 1138, 1138, 1138, 1138, 1138, 1139, 1139,

        0,    0,    0,    0, 1160, 1160,    0, 1139, 1139, 1139,
     1139,    0,    0, 1160, 1160, 1160, 1160,    0,    0,    0,
     1139, 1139, 1139, 1139, 1139, 1139, 1160, 1160, 1160, 1160,
     1160, 1160, 1161, 1161,    0,    0,    0,    0, 1162, 1162,
        0, 1161, 1161, 1161, 1161,    0,    0, 1162, 1162, 1162,
     1162,    0,    0,    0, 1161, 1161, 1161, 1161, 1161, 1161,
     1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163,    0,    0,
        0,    0, 1164, 1164,    0, 1163, 1163, 1163, 1163,    0,
        0, 1164, 1164, 1164, 1164,    0,    0,    0, 1163, 1163,
     1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164,

     1165, 1165,    0,    0,    0,    0, 1173, 1173,    0, 1165,
     1165, 1165, 1165,    0,    0, 1173, 1173, 1173, 1173,    0,
        0,    0, 1165, 1165, 1165, 1165, 1165, 1165, 1173, 1173,
     1173, 1173, 1173, 1173, 1174, 1174,    0,    0,    0,    0,
     1175, 1175,    0, 1174, 1174, 1174, 1174,    0,    0, 1175,
     1175, 1175, 1175,    0,    0,    0, 1174, 1174, 1174, 1174,
     1174, 1174, 1175, 1175, 1175, 1175, 1175, 1175, 1176, 1176,
        0,    0,    0,    0, 1179, 1179,    0, 1176, 1176, 1176,
     1176,    0,    0, 1179, 1179, 1179, 1179,    0,    0,    0,
     1176, 1176, 1176, 1176, 1176, 1176, 1179, 1179, 1179, 1179,

     1179, 1179, 1180, 1180,    0,    0,    0,    0, 1182, 1182,
        0, 1180, 1180, 1180, 1180,    0,    0, 1182, 1182, 1182,
     1182,    0,    0,    0, 1180, 1180, 1180, 1180, 1180, 1180,
     1182, 1182, 1182, 1182, 1182, 1182, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,

        0,    0,    0,    0, 1191, 1191, 1192, 1192, 1192, 1193,
        0, 1193, 1193,    0, 1193, 1193, 1193, 1193, 1194,    0,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1196,
     1196, 1196, 1197, 1197, 1198, 1198, 1198, 1199,    0,    0,
     1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1201, 1201,
     1201, 1202,    0, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
        0, 1204,    0, 1204, 1204, 1204, 1204, 1204, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1207, 1207, 1207, 1207,

     1207, 1207, 1207, 1207, 1207, 1208,    0, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1210, 1210, 1210, 1211, 1211, 1211, 1212,
     1212, 1213, 1213, 1213, 1214,    0, 1214, 1214,    0, 1214,
     1214, 1214, 1214, 1215,    0, 1215, 1215,    0,    0, 1215,
     1215, 1215, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1218, 1218, 1218, 1219, 1219, 1219, 1220, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220, 1221, 1221, 1221, 1222, 1222,
     1222, 1223,    0, 1223, 1223, 1223, 1223, 1223, 1223, 1223,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1225,
     1225, 1225, 1226, 1226, 1226, 1227,    0, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1228,    0, 1228, 1228, 1228, 1228,
     1228, 1228, 1228, 1229,    0, 1229,    0, 1229, 1229, 1229,
     1229, 1229, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1233,
        0, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1234, 1234,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1236,
     1236, 1236, 1237, 1237, 1237, 1238, 1238, 1238, 1239, 1239,

     1239, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244, 1244,
     1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
     1246, 1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1248, 1248, 1248, 1249, 1249, 1249, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1252, 1252, 1252, 1253, 1253,
     1253, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1257, 1257,
     1257, 1258, 1258, 1258, 1259, 1259, 1259, 1260, 1260, 1260,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1263, 1263,
     1263, 1264, 1264, 1264, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1266, 1266, 1266, 1267, 1267, 1267, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1269, 1269,
     1269, 1270, 1270, 1270, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1274, 1274, 1274, 1275, 1275, 1275, 1276, 1276, 1276,
     1277, 1277, 1277, 1278, 1278, 1278, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "csharp_lexer.ll"
#line 2 "csharp_lexer.ll"
/*****************************************************************************
 * Copyright (c) 2005, 2006 Jakob Petsovits <jpetso@gmx.at>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/
#line 28 "csharp_lexer.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "csharp_lexer.h"


// This is meant to be called with the first token in a pre-processor line.
// Pre-processing completely bypasses the normal tokenizing process.
#define PP_PROCESS_TOKEN(t) \
{ \
    csharp_pp::parser ppParser; \
    csharp_pp::parser::pp_parse_result result = \
        ppParser.pp_parse_line( csharp_pp::parser::Token_##t, ppCurrentScope(), this ); \
    \
    if ( result == csharp_pp::parser::result_eof ) \
    { \
        BEGIN(INITIAL); \
        return 0; /* end of file */  \
    } \
    else if ( result == csharp_pp::parser::result_invalid ) \
    { \
        BEGIN(INITIAL); \
        return parser::Token_INVALID; \
    } \
    else if ( result == csharp_pp::parser::result_ok ) \
    { \
        if (ppCurrentScope()->is_active()) \
            BEGIN(INITIAL); \
        else \
            BEGIN(PP_SKIPPED_SECTION_PART); \
    } \
}

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* 0x0041-0x005a, 0x005f, 0x0061-0x007a: one byte in UTF-8 */
/* 0x00c0-0x00d6, 0x00d8-0x00f6, 0x00f8-0x00ff */
/* 0x0100-0x1fff */
/* 0x3040-0x318f */
/* 0x3300-0x337f */
/* 0x3400-0x3d2d */
/* 0x4e00-0x9fff */
/* 0xf900-0xfaff */
/* 0x0080-0xffff */
/* 0x10000-0x10ffff */
/* Unicode characters above 0x10ffff are not supported by C#. */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* 0x2028 and 0x2029, currently unused in this lexer
for performance and convenience reasons. */
/* non-Unicode stuff */








#line 2764 "csharp_lexer.cpp"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1
#define PP_EXPECT_NEW_LINE 2
#define PP_DECLARATION 3
#define PP_IF_CLAUSE 4
#define PP_LINE 5
#define PP_MESSAGE 6
#define PP_PRAGMA 7
#define PP_SKIPPED_SECTION_PART 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 147 "csharp_lexer.ll"


 /* whitespace, newlines and comments */

#line 2880 "csharp_lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1184 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8327 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 151 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 152 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 154 "csharp_lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 156 "csharp_lexer.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 158 "csharp_lexer.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 159 "csharp_lexer.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 160 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 161 "csharp_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 162 "csharp_lexer.ll"
{
    m_parser->report_problem( parser::error,
        "Encountered end of file in an unclosed block comment" );
    cleanup();
    return parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 9:
YY_RULE_SETUP
#line 173 "csharp_lexer.ll"
return parser::Token_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 174 "csharp_lexer.ll"
return parser::Token_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 175 "csharp_lexer.ll"
return parser::Token_LBRACE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 176 "csharp_lexer.ll"
return parser::Token_RBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 177 "csharp_lexer.ll"
return parser::Token_LBRACKET;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 178 "csharp_lexer.ll"
return parser::Token_RBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 179 "csharp_lexer.ll"
return parser::Token_COMMA;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 180 "csharp_lexer.ll"
return parser::Token_SEMICOLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 181 "csharp_lexer.ll"
return parser::Token_DOT;
	YY_BREAK
/* operators */
case 18:
YY_RULE_SETUP
#line 186 "csharp_lexer.ll"
return parser::Token_COLON;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 187 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility ) {
        return parser::Token_SCOPE;
    }
    else {
        m_parser->report_problem( parser::error,
            "Global alias access (with \"::\") is not supported by C# 1.0" );
        return parser::Token_INVALID;
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 197 "csharp_lexer.ll"
return parser::Token_QUESTION;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 198 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility ) {
        return parser::Token_QUESTIONQUESTION;
    }
    else {
        m_parser->report_problem( parser::error,
            "Null coalescing expressions (with \"??\") are not supported by C# 1.0" );
        return parser::Token_INVALID;
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 208 "csharp_lexer.ll"
return parser::Token_BANG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 209 "csharp_lexer.ll"
return parser::Token_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 210 "csharp_lexer.ll"
return parser::Token_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 211 "csharp_lexer.ll"
return parser::Token_LESS_THAN;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 212 "csharp_lexer.ll"
return parser::Token_LESS_EQUAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 213 "csharp_lexer.ll"
return parser::Token_GREATER_THAN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 214 "csharp_lexer.ll"
return parser::Token_GREATER_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 215 "csharp_lexer.ll"
return parser::Token_NOT_EQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 216 "csharp_lexer.ll"
return parser::Token_LOG_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 217 "csharp_lexer.ll"
return parser::Token_LOG_OR;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 218 "csharp_lexer.ll"
return parser::Token_ARROW_RIGHT; // TODO: new in 2.0 or not?
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 219 "csharp_lexer.ll"
return parser::Token_INCREMENT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 220 "csharp_lexer.ll"
return parser::Token_DECREMENT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 221 "csharp_lexer.ll"
return parser::Token_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 222 "csharp_lexer.ll"
return parser::Token_PLUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 223 "csharp_lexer.ll"
return parser::Token_PLUS_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 224 "csharp_lexer.ll"
return parser::Token_MINUS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 225 "csharp_lexer.ll"
return parser::Token_MINUS_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 226 "csharp_lexer.ll"
return parser::Token_STAR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 227 "csharp_lexer.ll"
return parser::Token_STAR_ASSIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 228 "csharp_lexer.ll"
return parser::Token_SLASH;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 229 "csharp_lexer.ll"
return parser::Token_SLASH_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 230 "csharp_lexer.ll"
return parser::Token_BIT_AND;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 231 "csharp_lexer.ll"
return parser::Token_BIT_AND_ASSIGN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 232 "csharp_lexer.ll"
return parser::Token_BIT_OR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "csharp_lexer.ll"
return parser::Token_BIT_OR_ASSIGN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "csharp_lexer.ll"
return parser::Token_BIT_XOR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 235 "csharp_lexer.ll"
return parser::Token_BIT_XOR_ASSIGN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 236 "csharp_lexer.ll"
return parser::Token_REMAINDER;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 237 "csharp_lexer.ll"
return parser::Token_REMAINDER_ASSIGN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 238 "csharp_lexer.ll"
return parser::Token_LSHIFT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 239 "csharp_lexer.ll"
return parser::Token_LSHIFT_ASSIGN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 240 "csharp_lexer.ll"
return parser::Token_RSHIFT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 241 "csharp_lexer.ll"
return parser::Token_RSHIFT_ASSIGN;
	YY_BREAK
/* reserved words */
case 56:
YY_RULE_SETUP
#line 246 "csharp_lexer.ll"
return parser::Token_ABSTRACT;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "csharp_lexer.ll"
return parser::Token_AS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 248 "csharp_lexer.ll"
return parser::Token_BASE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "csharp_lexer.ll"
return parser::Token_BOOL;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "csharp_lexer.ll"
return parser::Token_BREAK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "csharp_lexer.ll"
return parser::Token_BYTE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "csharp_lexer.ll"
return parser::Token_CASE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 253 "csharp_lexer.ll"
return parser::Token_CATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 254 "csharp_lexer.ll"
return parser::Token_CHAR;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 255 "csharp_lexer.ll"
return parser::Token_CHECKED;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 256 "csharp_lexer.ll"
return parser::Token_CLASS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "csharp_lexer.ll"
return parser::Token_CONST;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 258 "csharp_lexer.ll"
return parser::Token_CONTINUE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 259 "csharp_lexer.ll"
return parser::Token_DECIMAL;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 260 "csharp_lexer.ll"
return parser::Token_DEFAULT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 261 "csharp_lexer.ll"
return parser::Token_DELEGATE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 262 "csharp_lexer.ll"
return parser::Token_DO;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 263 "csharp_lexer.ll"
return parser::Token_DOUBLE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 264 "csharp_lexer.ll"
return parser::Token_ELSE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 265 "csharp_lexer.ll"
return parser::Token_ENUM;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 266 "csharp_lexer.ll"
return parser::Token_EVENT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 267 "csharp_lexer.ll"
return parser::Token_EXPLICIT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 268 "csharp_lexer.ll"
return parser::Token_EXTERN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 269 "csharp_lexer.ll"
return parser::Token_FALSE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 270 "csharp_lexer.ll"
return parser::Token_FINALLY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 271 "csharp_lexer.ll"
return parser::Token_FIXED;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 272 "csharp_lexer.ll"
return parser::Token_FLOAT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "csharp_lexer.ll"
return parser::Token_FOR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "csharp_lexer.ll"
return parser::Token_FOREACH;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "csharp_lexer.ll"
return parser::Token_GOTO;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 276 "csharp_lexer.ll"
return parser::Token_IF;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "csharp_lexer.ll"
return parser::Token_IMPLICIT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "csharp_lexer.ll"
return parser::Token_IN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 279 "csharp_lexer.ll"
return parser::Token_INT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 280 "csharp_lexer.ll"
return parser::Token_INTERFACE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 281 "csharp_lexer.ll"
return parser::Token_INTERNAL;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "csharp_lexer.ll"
return parser::Token_IS;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 283 "csharp_lexer.ll"
return parser::Token_LOCK;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 284 "csharp_lexer.ll"
return parser::Token_LONG;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 285 "csharp_lexer.ll"
return parser::Token_NAMESPACE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 286 "csharp_lexer.ll"
return parser::Token_NEW;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 287 "csharp_lexer.ll"
return parser::Token_NULL;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 288 "csharp_lexer.ll"
return parser::Token_OBJECT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 289 "csharp_lexer.ll"
return parser::Token_OPERATOR;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 290 "csharp_lexer.ll"
return parser::Token_OUT;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "csharp_lexer.ll"
return parser::Token_OVERRIDE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 292 "csharp_lexer.ll"
return parser::Token_PARAMS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 293 "csharp_lexer.ll"
return parser::Token_PRIVATE;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 294 "csharp_lexer.ll"
return parser::Token_PROTECTED;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 295 "csharp_lexer.ll"
return parser::Token_PUBLIC;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 296 "csharp_lexer.ll"
return parser::Token_READONLY;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 297 "csharp_lexer.ll"
return parser::Token_REF;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 298 "csharp_lexer.ll"
return parser::Token_RETURN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 299 "csharp_lexer.ll"
return parser::Token_SBYTE;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 300 "csharp_lexer.ll"
return parser::Token_SEALED;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 301 "csharp_lexer.ll"
return parser::Token_SHORT;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 302 "csharp_lexer.ll"
return parser::Token_SIZEOF;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 303 "csharp_lexer.ll"
return parser::Token_STACKALLOC;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 304 "csharp_lexer.ll"
return parser::Token_STATIC;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 305 "csharp_lexer.ll"
return parser::Token_STRING;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 306 "csharp_lexer.ll"
return parser::Token_STRUCT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 307 "csharp_lexer.ll"
return parser::Token_SWITCH;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 308 "csharp_lexer.ll"
return parser::Token_THIS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 309 "csharp_lexer.ll"
return parser::Token_THROW;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 310 "csharp_lexer.ll"
return parser::Token_TRUE;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 311 "csharp_lexer.ll"
return parser::Token_TRY;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 312 "csharp_lexer.ll"
return parser::Token_TYPEOF;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 313 "csharp_lexer.ll"
return parser::Token_UINT;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 314 "csharp_lexer.ll"
return parser::Token_ULONG;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 315 "csharp_lexer.ll"
return parser::Token_UNCHECKED;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 316 "csharp_lexer.ll"
return parser::Token_UNSAFE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 317 "csharp_lexer.ll"
return parser::Token_USHORT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 318 "csharp_lexer.ll"
return parser::Token_USING;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 319 "csharp_lexer.ll"
return parser::Token_VIRTUAL;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 320 "csharp_lexer.ll"
return parser::Token_VOID;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 321 "csharp_lexer.ll"
return parser::Token_VOLATILE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 322 "csharp_lexer.ll"
return parser::Token_WHILE;
	YY_BREAK
/* Non-keyword identifiers. They only have special meaning in
  * specific contexts and are treated as identifiers otherwise.
  * Many of those have been introduced by C# 2.0. */
case 133:
YY_RULE_SETUP
#line 329 "csharp_lexer.ll"
return parser::Token_ADD;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 330 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility )
        return parser::Token_ALIAS;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 336 "csharp_lexer.ll"
return parser::Token_GET;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 337 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility )
        return parser::Token_GLOBAL;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 343 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility )
        return parser::Token_PARTIAL;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 349 "csharp_lexer.ll"
return parser::Token_REMOVE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 350 "csharp_lexer.ll"
return parser::Token_SET;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 351 "csharp_lexer.ll"
return parser::Token_VALUE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 352 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility )
        return parser::Token_WHERE;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 358 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility )
        return parser::Token_YIELD;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
/* A non-keyword identifier that is not marked as such by the specification,
  * for global attributes: */
case 143:
YY_RULE_SETUP
#line 367 "csharp_lexer.ll"
return parser::Token_ASSEMBLY;
	YY_BREAK
/* characters and strings */
case 144:
YY_RULE_SETUP
#line 372 "csharp_lexer.ll"
return parser::Token_CHARACTER_LITERAL;
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 373 "csharp_lexer.ll"
{
    m_parser->report_problem( parser::error,
        std::string("Invalid character literal: ") + yytext );
    return parser::Token_CHARACTER_LITERAL;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 379 "csharp_lexer.ll"
return parser::Token_STRING_LITERAL;
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 380 "csharp_lexer.ll"
{
    m_parser->report_problem( parser::error,
        std::string("Invalid string literal: ") + yytext );
    return parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* verbatim strings: */
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 386 "csharp_lexer.ll"
return parser::Token_STRING_LITERAL;
	YY_BREAK
/* the pre-processor */

case 149:
YY_RULE_SETUP
#line 393 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_DEFINE);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 394 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_UNDEF);
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 395 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_IF);
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 396 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_ELIF);
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 397 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ELSE);
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 398 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ENDIF);
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 399 "csharp_lexer.ll"
BEGIN(PP_LINE);            PP_PROCESS_TOKEN(PP_LINE);
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 400 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ERROR);
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 401 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_WARNING);
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 402 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_REGION);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 403 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ENDREGION);
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 404 "csharp_lexer.ll"
{
    if( m_parser->compatibility_mode() >= parser::csharp20_compatibility ) {
        BEGIN(PP_PRAGMA); PP_PROCESS_TOKEN(PP_PRAGMA);
    }
    else {
        BEGIN(INITIAL);
        m_parser->report_problem( parser::error,
            "#pragma directives are not supported by C# 1.0" );
        return parser::Token_INVALID;
    }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 415 "csharp_lexer.ll"
{
    m_parser->report_problem( parser::error,
        std::string("Invalid pre-processor directive: ``") + yytext + "''" );
    return parser::Token_INVALID;
}
	YY_BREAK


case YY_STATE_EOF(PP_EXPECT_NEW_LINE):
case YY_STATE_EOF(PP_DECLARATION):
case YY_STATE_EOF(PP_IF_CLAUSE):
case YY_STATE_EOF(PP_LINE):
case YY_STATE_EOF(PP_MESSAGE):
case YY_STATE_EOF(PP_PRAGMA):
#line 423 "csharp_lexer.ll"
{
    m_parser->report_problem( parser::warning,
        "No newline at the end of the file" );
    return csharp_pp::parser::Token_EOF;
}
	YY_BREAK


case 162:
YY_RULE_SETUP
#line 431 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 432 "csharp_lexer.ll"
/* before an unexpected EOF, skip */ ;
	YY_BREAK


case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 437 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 438 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 166:
YY_RULE_SETUP
#line 442 "csharp_lexer.ll"
{
    m_parser->report_problem( parser::error,
        "You may not define ``true'' or ``false'' with #define or #undef" );
    return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL;  // we could do Token_INVALID here,
    // but this way the error is shown and the parser continues, I prefer this.
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 448 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL; // ...including keywords
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 449 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 450 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 170:
YY_RULE_SETUP
#line 454 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_EQUAL;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 455 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NOT_EQUAL;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 456 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LOG_AND;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 457 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LOG_OR;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 458 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_BANG;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 459 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_TRUE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 460 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_FALSE;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 461 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LPAREN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 462 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_RPAREN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 463 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_CONDITIONAL_SYMBOL;
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 464 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 465 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


/* splitting the line at "#" keeps the token shorter than real directives, */
/* so that those are recognized and not taken as skipped text as well.     */
case 182:
YY_RULE_SETUP
#line 471 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 472 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 473 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK


case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 477 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 478 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_LINE_NUMBER;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 479 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_FILE_NAME;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 480 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_DEFAULT;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 481 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_IDENTIFIER_OR_KEYWORD;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 482 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_INVALID;
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 486 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_MESSAGE;
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 487 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK


case 193:
YY_RULE_SETUP
#line 491 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_PRAGMA_TEXT;
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 492 "csharp_lexer.ll"
return csharp_pp::parser::Token_PP_NEW_LINE;
	YY_BREAK

/* identifiers and number literals */
case 195:
YY_RULE_SETUP
#line 498 "csharp_lexer.ll"
return parser::Token_IDENTIFIER;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 500 "csharp_lexer.ll"
return parser::Token_INTEGER_LITERAL;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 501 "csharp_lexer.ll"
return parser::Token_REAL_LITERAL;
	YY_BREAK
/* everything else is not a valid lexeme */
case 198:
YY_RULE_SETUP
#line 506 "csharp_lexer.ll"
return parser::Token_INVALID;
	YY_BREAK
/* some additional checking for unclosed #ifs and #regions at the EOF */

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP_SKIPPED_SECTION_PART):
#line 512 "csharp_lexer.ll"
{
    cleanup();
    return parser::Token_EOF;
}
	YY_BREAK

case 199:
YY_RULE_SETUP
#line 518 "csharp_lexer.ll"
ECHO;
	YY_BREAK
#line 4111 "csharp_lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1184 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1184 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1183);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 518 "csharp_lexer.ll"



namespace csharp
{

Lexer::Lexer( parser *parser, char *contents ) : m_ppRootScope(0)
{
    restart( parser, contents );
}

void Lexer::restart( parser *parser, char *contents )
{
    cleanup();

    m_parser = parser;
    m_locationTable = parser->token_stream->location_table();
    m_contents = contents;
    m_ppRootScope = 0;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;

    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':
        m_locationTable->newline( m_currentOffset );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

csharp_pp::scope* Lexer::ppCurrentScope()
{
    if ( m_ppRootScope == 0 )
    {
        m_ppRootScope = new csharp_pp::scope( m_parser );
    }
    return m_ppRootScope->current_scope();
}

void Lexer::cleanup()
{
    // check for open scopes, and pop them / report errors as needed
    if (m_ppRootScope != 0)
    {
        csharp_pp::scope* currentScope = ppCurrentScope();
        csharp_pp::scope::scope_type scopeType = currentScope->type();

        while ( scopeType != csharp_pp::scope::type_root )
          {
            if ( scopeType == csharp_pp::scope::type_if )
            {
                m_parser->report_problem( parser::error,
                  "Encountered end of file in an unclosed #if/#elif/#else section" );
            }
            else if ( scopeType == csharp_pp::scope::type_region )
            {
                m_parser->report_problem( parser::error,
                  "Encountered end of file in an unclosed #region section" );
            }

            if ( !currentScope->pop_scope(scopeType, &currentScope) )
                break;

            scopeType = currentScope->type();
        }

        delete m_ppRootScope;
        m_ppRootScope = 0;
    }
}

} // end of namespace csharp


