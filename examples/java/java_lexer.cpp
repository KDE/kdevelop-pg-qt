#line 2 "java_lexer.cpp"
#line 2 "java_lexer.ll"
/*****************************************************************************
 * Copyright (c) 2005, 2006 Jakob Petsovits <jpetso@gmx.at>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/



#line 25 "java_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int java::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[819] =
    {   0,
        0,    0,    5,    5,  119,  117,    1,    2,    2,   21,
      117,  114,   48,   42,  117,    9,   10,   38,   34,   15,
       36,   17,   40,  115,  115,   20,   16,   24,   33,   26,
       19,   18,   13,   14,   46,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   11,   44,   12,   22,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,    5,    7,    7,    6,    1,
        2,   28,    0,  113,  112,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  114,  114,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   49,   29,   43,

        0,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   39,   31,   35,   32,   37,    0,  116,    0,
        0,    0,    0,    0,    4,    3,   41,  116,  115,    0,
      116,  116,  115,    0,    0,    0,    0,    0,    0,  115,
        0,    0,    0,    0,    0,   50,   25,   23,   27,   52,
       47,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   69,  114,  114,  114,  114,  114,  114,  114,  114,
       80,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       45,   30,  114,  114,  114,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,    7,    6,    6,    8,    0,    0,    0,    0,
        0,    0,    0,    0,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  110,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   56,  116,  116,    0,    0,    0,    0,    0,
        0,    0,    0,    3,  116,  116,  116,    0,    0,    0,
        0,    0,  115,    0,  116,  116,    0,    0,    0,    0,
        0,    0,  115,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   51,   53,
       54,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,   78,
      114,  114,  114,   84,  114,  114,   88,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  106,  114,  114,  114,  114,  114,  114,
        0,    0,    0,    0,    0,  114,  114,  114,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  114,  114,
      114,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  116,
        0,    0,    0,    0,    0,  116,    0,  116,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  115,  116,    0,  115,   55,  114,  114,  114,  114,
       61,   62,  114,   64,  114,  114,  114,  114,  114,   71,
       72,  114,  114,  114,  114,   79,  114,  114,  114,  114,
       86,  114,   89,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  101,  114,  114,  105,  107,  114,
      114,  114,  114,    0,    0,    0,    0,    0,  114,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  116,  116,  116,    0,
        0,  116,  116,    0,    0,    0,    0,    0,  114,  114,
      114,   60,   63,   65,   66,  114,  114,  114,  114,   74,

       75,   77,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   95,  114,  114,   98,  114,  114,  102,  114,
      114,  109,  114,    0,    0,    0,    0,    0,    0,    0,
        0,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  116,  116,    0,  116,  116,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      114,   58,  114,  114,  114,   70,  114,  114,  114,   82,
      114,  114,   87,  114,  114,  114,   93,   94,   96,  114,
       99,  114,  103,  114,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  116,  114,   59,  114,   68,
       73,   76,  114,  114,  114,   90,   91,  114,  114,  114,
      114,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,   57,   67,  114,  114,  114,

      114,   97,  114,  114,  108,    0,  114,  114,   85,   92,
      114,  104,   81,   83,  114,  114,  100,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   29,   29,   30,   31,   32,
        7,    7,    7,    7,    7,   33,    7,    7,    7,   34,
        7,    7,    7,    7,    7,    7,    7,   35,    7,    7,
       36,   37,   38,   39,    7,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,    7,   49,   50,   51,   52,
       53,   54,    7,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1,   68,   69,   70,
       70,   71,   71,   72,   73,   74,   74,   75,   75,   76,
       76,   75,   75,   77,   77,   77,   77,   77,   77,   77,
       78,   79,   79,   80,   80,   80,   80,   80,   80,   81,
       81,   81,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   94,   96,   97,
       98,   99,  100,  101,  102,  103,  104,  105,  103,  103,
      103,    1,    1,  106,  107,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  109,  108,  110,  108,
      108,  108,  108,  111,  112,  113,  114,  115,  116,  116,
      116,  116,  116,  113,  113,  113,  113,  113,  117,  118,
      119,  119,  119,  119,  119,  119,  119,  120,  121,  121,
      121,  122,  123,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[124] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    1,    5,    3,    3,
        3,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    1,    6,    7,    7,
        7,    7,    6,    6,    6,    7,    7,    8,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    9,    9,    9,    9,    9,    9,   10,   10,   11,

       10,   10,   10,   10,   10,    1,    3,    3,    3,    3,
        3,    3,    1,    3,    3,    3,    3,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[872] =
    {   0,
        0,    0,  121,  123, 3383, 8731, 3367, 8731, 3365, 3331,
      134,  109, 3138,  122,  255, 8731, 8731, 3096,  118, 8731,
      117,  157,  126,  362,  279, 8731, 8731,  121, 3094,  123,
     8731, 8731, 8731, 8731, 3093,  171,  100,  117,  119,  143,
      157,  113,  219,  127,  145,  174,  138,  274,  181,  155,
      248, 8731,  208, 8731, 8731,    0,    0,  256,  250,  399,
     3048,  332,  215,    0,  331,    0, 8731, 3112,  221, 3110,
     8731, 8731,  502, 8731, 8731,  506,  623,  679,  369,  708,
      382,  740,  285,  775,  193,  525,  536,    0,    0,  378,
      433,  800, 3041,  496,  323,    0,  435, 8731, 8731, 8731,

      903, 8731,  905, 1024, 1080,  505, 1109,  526, 1141,  362,
     1176,  233, 8731, 8731, 8731, 8731, 8731, 3091,  934,  505,
      567,  843, 3037, 2999, 8731,    0, 8731,  953, 1265, 1282,
     8731, 1302, 8731, 1037,  589,  583, 1246, 2851, 2814, 1335,
      835,  892, 1333, 2849, 2812, 2887, 8731, 8731, 8731,  162,
     8731, 2855, 2854, 2856, 2864, 2850,  220, 2846, 2845, 2832,
     2838, 2820, 2821, 2818, 2818, 2824, 2821, 2818, 2814, 2811,
        0, 2813,  234, 2813, 2803, 2798, 2806, 2812,  260, 2811,
     2793, 2769,   95, 2741, 2746, 2740,  104,  909,  152, 2736,
     8731, 8731,    0,    0, 1419,    0,  915,    0, 1316, 2699,

        0,  228,  967,    0, 1015,    0,    0,    0,    0,    0,
      248,    0, 8731,    0,  315, 8731, 1534, 1655, 1776, 1897,
     1367, 2002, 2052, 2090, 1434, 1446,    0, 1401,    0, 1411,
     2698,    0,  307, 1219,    0, 1437,    0,    0,    0,    0,
        0,  321, 2193, 8731, 1561, 2314, 2370, 1446, 2399, 1514,
     2431,  586, 2466,  341, 2569, 2690, 2804, 1513, 2854, 2892,
     2930, 2968, 8731, 8731, 1674, 1507, 1578, 1588, 1546, 1623,
      389, 1289,  398,    0, 1705, 8731, 1813, 1387, 1644, 1753,
     2712, 2675, 8731, 1588, 1924, 8731, 1491, 1657, 1776, 2701,
     2664, 1930, 2181, 1714, 1820, 1892, 1901, 1958,  436, 1659,

     1968, 2152, 2162, 1939, 2172,  459, 1927,  471, 8731, 8731,
     2743, 2262, 2247,  509,  121, 2723, 2722,  510,  516,  228,
      887,  191,  165, 2721,  336, 2712,  879,  253,  467, 2711,
      425,  908,  870, 2710,  559,  642, 2709,  925,  907,  889,
      924,  926,  989,  594,  938, 1004, 2704,  985,  562, 1015,
     1267,  518, 2703, 2702,  316, 1009, 1250, 2557, 2700, 2595,
     1981, 2175, 2993, 2674, 2243,    0, 2698, 2697, 2600, 3096,
     3152, 2265, 3181, 2522, 3213, 1388, 3248,  619, 3351, 3472,
     2634, 3528, 3566, 3603, 3706, 2203, 3762, 3800, 2682, 2681,
     2680, 3903, 4024, 4129, 2628, 4228, 4278, 4316, 2640, 4354,

     2677, 4441, 4491, 4528, 3370, 4566, 4604, 4642, 2676, 3374,
     2211, 2534, 2768, 2654, 2617, 3401, 2770, 3405, 2499, 2794,
     3018, 2645, 2608, 2813, 3039, 3050, 3059, 3069,  953, 2747,
      995, 3274, 3289, 3408, 3438, 3629, 1227, 2758, 1292, 3733,
     3750, 1319, 3929, 3891, 3945, 8731, 1273, 1275, 2664, 1006,
     2659, 2658,  584, 2657, 1328, 1294, 1373, 1337, 1296, 2655,
     2654,  885, 2629, 1299, 1339, 2628, 2627, 1379, 1495, 1386,
     2626, 1016, 2621, 1526, 1561, 2620, 1566, 1388, 1353, 1567,
      868, 1524, 1383, 1436, 2619, 1560, 1503, 2618, 2612, 1639,
     2610, 3961, 2609, 2756, 3830, 4667, 2582, 3997, 4073, 4022,

        0, 4035, 2562,    0, 1549, 3434, 1607, 4770, 4891, 4996,
     4045, 5095, 5145, 5183, 5286, 5407, 4110, 5463, 5501, 5538,
     5641, 4132, 4169, 4182, 4195, 4382, 3724, 4408, 4149, 4758,
     3451, 3647, 5762, 5883, 4415, 5939, 5977, 6014, 6117, 3674,
     6173, 6211, 4785, 3833, 4737, 4757, 1613, 2539, 6307, 4832,
     4848, 4861, 4874, 4887, 4821, 4961, 4904, 5030, 6357,    0,
     4992, 5002, 5033, 5011, 5043, 1624, 3883, 1643, 5053, 5063,
     5209, 5218, 5228, 1710, 3979, 1715, 5305, 5309, 5326,  260,
     5340, 5344, 8731, 4014, 5283, 5581, 2574, 2537, 5618, 5629,
     1267, 2580, 2569, 2567, 2565, 1560, 1425, 1690, 1766, 2560,

     1761, 2556, 1391, 2555, 1767, 1763, 1768, 1764, 2551, 1784,
     1793, 1795, 2548, 1797, 2542, 2518, 1813, 1632,  365, 1341,
     1733, 2309, 5748, 5378, 5603, 5613, 2263,    0, 1798, 4107,
     1842, 5787, 6460, 6581, 5739, 6637, 6675, 6712, 6815, 4208,
     6871, 6909, 7012, 7133,    0, 5623, 5758,    0, 5823, 5853,
     6086, 7254, 6161, 7375, 7496, 6113, 7552, 7590, 7627, 7730,
     6272, 6285, 6298, 6311, 6401, 5346, 6430, 6047, 6489, 4699,
     4937, 6516, 6457, 6470, 6553, 6780, 6793, 6328, 6756, 6390,
     6792, 7000, 7031, 7035, 6503, 7049, 8731, 4982, 5834, 7000,
     2210, 2128, 6504, 6803, 6826, 7086, 7096, 1854, 5583, 1869,

     7277, 2186, 1911, 1795, 1822, 2166, 1910, 1873, 1786, 2076,
     2067, 1826, 2027, 1995, 1996, 2162, 1960, 1915, 1894, 1923,
     1839, 1820, 1789, 2066, 1579, 7281, 6300, 5636, 7182, 7242,
     7786, 7823, 7398, 6945, 7260, 7318, 7363, 7332, 7113, 7389,
     7435, 7505, 5703, 5728, 7445, 7670, 7654, 7671, 7707, 7720,
     7733, 7691, 7861, 7872,    0, 7941, 7903, 7903, 7913, 7937,
     7742, 7947, 2038, 6071, 2128, 8024, 2175, 1718, 2174, 1681,
     1649, 1618, 2157, 2185, 1561, 1527, 1510, 2236, 1860, 2308,
     2323, 2278, 8041, 8006, 8019, 8032, 8061, 8074, 8091, 8111,
     8122, 8191, 8197, 8167, 8224, 1485, 1439, 2310, 2565, 2279,

      499, 1391, 1916, 2311, 1373, 8230, 2178, 2304, 1348, 1322,
      917, 1241, 1034,  588, 2579, 2338,  565, 8731, 8341, 8352,
      566, 8363, 8369, 8374, 8380, 8385, 8389, 8400, 8411, 8422,
      467, 8428, 8433, 8439, 8444, 8448, 8459, 8470, 8476, 8482,
     8488, 8494, 8500, 8508, 8519, 8530, 8541,  332, 8547, 8553,
     8559, 8565, 8571, 8579, 8590,  235, 8596, 8602, 8613, 8624,
     8635, 8641, 8647, 8658, 8669, 8680,  178, 8686, 8697, 8708,
     8719
    } ;

static yyconst flex_int16_t yy_def[872] =
    {   0,
      818,    1,  819,  819,  818,  818,  818,  818,  818,  818,
      820,  821,  818,  818,  822,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  821,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,  818,  818,  818,  818,  823,  824,  824,  824,  818,
      825,  826,  818,  827,  818,  828,  818,  818,  829,  818,
      818,  818,  820,  818,  818,  830,  820,   77,   78,   78,
       80,   80,   82,   82,   84,  831,  831,  832,  833,  833,
      833,  818,  834,  835,  818,  836,  818,  818,  818,  818,

      837,  818,  837,  837,  104,  105,  105,  107,  107,  109,
      109,  111,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  838,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
      818,  818,   87,   87,   87,  839,  839,  197,  197,  199,

      197,  839,  839,  840,  818,  841,  842,  843,  841,  841,
      818,  844,  818,  845,  845,  818,  846,  847,  847,  846,
      219,  219,  222,  222,  848,  848,  849,  849,  228,  228,
      230,  228,  849,  849,  850,  818,  851,  852,  853,  851,
      851,  818,  854,  818,  854,  854,  246,  247,  247,  249,
      249,  251,  251,  253,  854,  854,  256,  256,  253,  253,
      253,  253,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  855,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  856,  856,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      857,  857,  818,  858,  818,  358,  313,  313,  859,  859,
      370,  371,  371,  373,  373,  375,  375,  377,  860,  860,
      380,  380,  382,  382,  859,  380,  380,  380,  313,  313,
      313,  861,  861,  393,  393,  393,  396,  396,  393,  396,

      400,  393,  402,  402,  393,  402,  402,  402,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  862,  862,  818,  863,  818,  313,  862,

      500,  500,  502,  500,  862,  862,  818,  864,  864,  509,
      509,  509,  512,  512,  865,  865,  516,  516,  518,  518,
      865,  516,  516,  516,  516,  516,  516,  516,  516,  509,
      516,  516,  866,  866,  534,  534,  536,  536,  866,  534,
      534,  534,  539,  534,  534,  536,  538,  538,  539,  534,
      534,  534,  534,  534,  534,  534,  534,  539,  534,  559,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  867,  867,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  868,  868,  868,  626,  625,  868,  868,
      818,  623,  869,  869,  634,  634,  636,  636,  869,  634,
      634,  634,  870,  870,  644,  644,  644,  644,  644,  644,
      644,  870,  639,  871,  871,  655,  655,  657,  657,  871,
      655,  655,  655,  655,  655,  655,  655,  655,  660,  655,
      655,  660,  655,  655,  655,  655,  655,  655,  655,  655,
      660,  660,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      623,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  639,  634,  634,  636,
      636,  636,  639,  634,  634,  634,  634,  634,  634,  634,
      634,  639,  634,  634,  652,  660,  655,  655,  655,  655,
      655,  655,  655,  655,  660,  660,  660,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  639,  634,  634,  634,  634,  634,  634,  634,
      634,  639,  639,  660,  818,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  639,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,    0,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818
    } ;

static yyconst flex_int16_t yy_nxt[8855] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       25,   26,   27,   28,   29,   30,   31,   32,   12,   12,
       12,   12,   12,   12,   12,   33,    6,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   12,   43,   12,   44,
       12,   45,   12,   46,   47,   48,   49,   12,   50,   51,
       12,   12,   12,   52,   53,   54,   55,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,    6,   56,   57,   58,   59,
       60,   61,    6,   62,   63,   64,   65,    6,    6,    6,
        6,    6,    6,   67,   68,   67,   68,   87,   87,   87,
       99,  114,  116,   69,  345,   69,   74,   74,  125,   75,
       86,  117,  115,  126,  146,  147,  100,  149,  150,  346,
      127,  350,  154,   86,  155,   86,  157,   86,  351,   86,
      450,  156,  161,  158,   86,  170,  159,   86,   86,  160,
       76,  162,   86,  118,   86,  119,  119,  119,   86,  174,
       86,  181,   86,   86,  175,   86,  310,  311,  176,   87,
       87,   87,  163,   86,  164,   86,  166,   86,   86,  355,

       86,  356,  177,  165,  167,  459,  168,  189,   86,  169,
       86,  152,   86,  178,   86,   88,   89,   90,   91,   92,
       93,   86,   94,   95,   96,   97,  153,  187,  179,   86,
      458,  180,  191,  215,   86,  188,   86,   86,  216,   77,
       77,   77,   77,   77,   78,   79,   79,   79,   79,   79,
       79,   80,   81,   82,   83,   84,   85,  102,  102,   86,
      224,  224,  224,  171,  102,  120,  121,  122,  123,  172,
      173,   86,  192,  124,   86,  317,  318,   88,   89,   90,
       91,   92,   93,  455,   94,   95,   96,   97,   86,  333,
      334,  103,  464,  443,  190,  128,   86,  140,  140,  140,

      262,  262,  262,   86,  195,  195,  195,  340,  131,  132,
      131,  133,  341,  443,   86,  209,  209,  209,  209,  209,
      182,  131,  132,  131,  130,  130,  130,  215,  133,   86,
      183,  184,  216,  185,   86,  186,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  223,  223,  223,  223,  223,  223,  489,   86,
      104,  104,  104,  104,  104,  105,  106,  106,  106,  106,
      106,  106,  107,  108,  109,  110,  111,  112,  128,   86,
      129,  129,  130,  226,  226,  226,  461,  141,  142,  143,
      144,  131,  132,  131,  133,  145,  134,   87,   87,   87,

      204,  204,  204,  205,  131,  132,  131,  206,  398,  398,
      398,  133,  210,  210,  210,  210,  210,  210,  210,  210,
      723,   86,  134,  240,  240,  240,  240,  240,  208,  261,
      261,  261,  261,  261,  261,  211,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  226,  226,
      226,  226,  226,  226,  226,  119,  119,  119,   86,   86,
      135,  136,  137,  138,  119,  119,  119,  466,  139,  196,
      196,  197,  196,  197,  196,  198,  196,  198,  196,  199,
      196,  200,  196,  201,  201,  196,  201,  196,  196,  196,

      202,  196,  202,  196,   74,   74,  465,   75,   74,   74,
       86,   73,  130,  130,  130,  218,  241,  241,  241,  241,
      241,  241,  241,  241,  219,  219,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  140,  140,  140,   76,  242,
       86,  810,   73,   87,   87,   87,  218,  140,  140,  140,
      218,  453,   86,   86,   87,   87,   87,  218,  449,   86,
      218,   86,  218,  220,  235,  235,  235,  236,   86,  487,
      454,  237,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  119,  119,  119,  119,  119,
      119,  119,  239,  260,  260,  260,  260,  260,  260,  260,

      260,  260,   86,  484,  471,   86,   86,   77,   77,   77,
       77,   77,   78,   79,   79,   79,   79,   79,   79,   80,
       81,   82,   83,   84,   85,   74,   74,   86,   75,   86,
      593,   88,   89,   90,   91,   92,   93,   86,   94,   95,
       96,   97,   88,   89,   90,   91,   92,   93,  479,   94,
       95,   96,   97,  397,  397,  397,  397,  397,  397,   76,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,   86,  514,  514,  514,  472,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,   77,   77,
       77,   77,   77,   78,   79,   79,   79,   79,   79,   79,
       80,   81,   82,   83,   84,   85,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      227,  227,  228,  227,  228,  227,  229,  227,  229,  227,
      230,  227,  231,  227,  232,  232,  227,  232,  227,  227,

      227,  233,  227,  233,  227,  102,  102,  102,  102,  615,
      255,   86,  244,   86,  101,  140,  140,  140,  140,  140,
      140,  140,   86,  256,  256,  266,  469,  266,   86,  267,
       86,  267,   86,  268,  463,  269,  599,  270,  270,  245,
      270,  101,  456,  457,  271,  255,  271,  475,  352,  255,
       86,   86,  119,  119,  119,  474,  255,  467,   86,  255,
      468,  255,  257,  264,  265,  264,  353,   86,   86,   86,
      354,  275,  275,  275,  473,  477,  264,  265,  264,  815,
      476,   86,  276,  277,  276,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  480,  276,  277,  276,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  246,  246,
      246,  246,  246,  247,  248,  248,  248,  248,  248,  248,
      249,  250,  251,  252,  253,  254,  102,  102,   86,  275,
      275,  275,   86,  244,  195,  195,  195,  195,  195,  195,
      195,  483,  120,  121,  122,  123,  478,   86,  490,   86,
      124,  481,   86,  292,  592,  293,  293,  293,   86,   86,
      245,  278,  279,  280,  281,  293,  293,  293,  293,  282,
      485,  275,  275,  275,  607,   86,  293,  293,  293,  293,
      293,  293,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  246,
      246,  246,  246,  246,  247,  248,  248,  248,  248,  248,
      248,  249,  250,  251,  252,  253,  254,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  128,   86,  129,  129,  130,  226,  226,  226,  226,
      226,  226,  226,   86,  131,  132,  131,  283,  128,  491,

      130,  130,  130,  285,  285,  285,  703,  131,  132,  131,
       86,  131,  132,  131,  283,  284,   86,  284,   86,  486,
      285,  285,  285,   86,  131,  132,  131,  589,  294,  590,
      294,  286,  295,  286,  295,  580,  296,   86,  297,   86,
      298,  298,   86,  298,  286,  598,  286,  299,  601,  299,
      595,  128,  443,  140,  140,  140,  119,  119,  119,  119,
      119,  119,  119,   86,  131,  132,  131,  133,  285,  285,
      285,   86,  443,  135,  136,  137,  138,  131,  132,  131,
       86,  139,   86,  594,  133,   73,   73,   73,  724,   86,
      135,  136,  137,  138,  597,  602,   86,   86,  139,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  613,
      287,  288,  289,  290,   86,  301,   86,  301,  291,  302,
      596,  302,   86,  303,  617,  304,   86,  305,  305,   86,
      305,   86,   86,  604,  306,  128,  306,  358,  358,  358,
      606,  709,  612,  141,  142,  143,  144,   86,  359,  360,
      359,  145,   87,   87,   87,  513,  513,  513,  513,  513,
      513,  359,  360,  359,   87,   87,   87,  275,  275,  275,
      275,  275,  275,  275,  705,   77,   77,   78,   79,   86,
       86,   86,  618,   79,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,   86,  361,  362,  363,
      364,  243,  243,  243,  605,  365,   74,   74,   86,   74,
       88,   89,   90,   91,   92,   93,   86,   94,   95,   96,
       97,   86,   88,   89,   90,   91,   92,   93,  620,   94,
       95,   96,   97,  102,  102,  608,  392,   86,   86,   86,
      369,  285,  285,  285,  285,  285,  285,  285,  616,  393,
      393,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      609,  392,  800,   86,   86,  392,  285,  285,  285,   86,
       86,  704,  392,  611,  614,  392,   86,  392,  394,  619,
       86,  246,  246,  247,  248,  499,  499,  499,  782,  248,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  370,
      370,  370,  370,  370,  371,  372,  372,  372,  372,  372,
      372,  373,  374,  375,  376,  377,  378,   74,   74,   86,
       75,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  679,   86,  358,  358,  358,  722,  409,   86,  409,
       86,   76,  410,  410,  410,  621,  287,  288,  289,  290,

      410,  410,  410,  264,  291,  264,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  264,  246,  264,  410,
      410,  410,   86,  275,  275,  275,  130,  130,  130,  130,
      130,  130,  130,  706,  276,  277,  276,  275,  275,  275,
      275,  275,  275,  275,  275,  275,   86,  276,  277,  276,
      285,  285,  285,  285,  285,  285,  285,  285,  285,   86,
       77,   77,   77,   77,   77,   78,   79,   79,   79,   79,
       79,   79,   80,   81,   82,   83,   84,   85,   74,   74,
      725,   75,  411,  412,  413,  414,  418,  418,  418,   86,
      415,  418,  418,  418,  379,  379,  379,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  712,  707,  714,
      708,  713,   76,  278,  279,  280,  281,   86,  711,   86,
       86,  282,   86,   86,   86,  716,  417,   86,  417,  773,
       86,  418,  418,  418,  717,  424,   86,  424,  719,  425,
       86,  425,  276,  426,  276,  427,  718,  428,  428,   86,
      428,   86,  769,   86,  429,  276,  429,  276,  432,  721,
      432,   86,  433,   86,  433,  775,  434,   86,  435,   86,
      436,  436,  780,  436,  623,  623,  623,  437,  770,  437,
       86,   77,   77,   77,  380,  381,  382,  383,   79,   79,
       79,   79,  384,   80,   81,   82,   83,   84,   85,   74,

       74,   86,   74,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  802,   86,  385,  385,  385,  492,  492,
      492,  419,  420,  421,  422,  385,  385,  385,  385,  423,
      582,  582,  582,  369,  772,   86,  385,  385,  385,  385,
      385,  385,  285,  285,  285,  582,  582,  582,  440,  440,
      440,   86,   86,  286,  220,  286,   86,   86,  440,  440,
      440,  440,  768,  811,   86,  771,  286,  779,  286,  440,
      440,  440,  440,  440,  440,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  140,  140,  140,  140,  140,  140,

      140,   86,  370,  370,  370,  370,  370,  371,  372,  372,
      372,  372,  372,  372,  373,  374,  375,  376,  377,  378,
       73,   73,   73,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  287,  288,  289,  290,   86,   86,  776,  777,
      291,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  499,  499,  499,  499,  499,  499,  499,   86,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  386,  386,   86,  774,  781,
       77,   77,   78,   79,  686,  686,  686,   86,   79,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  102,  102,  441,   86,  293,

      293,  293,  102,   86,  686,  686,  686,   86,  798,  293,
      293,  293,  293,  442,  443,   86,   86,  797,  778,   86,
      293,  293,  293,  293,  293,  293,   86,   86,  799,  245,
      442,  796,  765,  813,  443,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,   87,   87,   87,  499,  499,
      499,  499,  499,  499,  499,  499,  499,   86,  764,  801,
       87,   87,   87,  221,  221,  221,  221,  221,  221,  221,
      448,  410,  410,  410,  410,  410,  410,  410,  246,  246,

      246,  246,  246,  247,  248,  248,  248,  248,  248,  248,
      249,  250,  251,  252,  253,  254,  102,  102,  447,   86,
       86,  805,  809,  102,  241,  241,  241,  241,  241,  241,
      241,  241,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,   86,  225,  507,  814,   86,
      245,   86,   86,   88,   89,   90,   91,   92,   93,  803,
       94,   95,   96,   97,   86,   86,  807,  812,   88,   89,
       90,   91,   92,   93,  804,   94,   95,   96,   97,   86,
      817,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  246,
      246,  246,  246,  246,  247,  248,  248,  248,  248,  248,
      248,  249,  250,  251,  252,  253,  254,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  102,  102,  128,   86,  358,  358,  358,  244,  418,
      418,  418,  418,  418,  418,  418,  359,  360,  359,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  720,  359,

      360,  359,   74,   74,   86,  245,   86,  715,  284,  508,
      284,  710,   86,  492,  492,  492,   86,  808,  509,  509,
       86,   86,  816,   86,  493,   86,  493,  410,  410,  410,
      410,  410,  410,  410,  410,  410,   86,  493,   86,  493,
      508,  700,  699,  680,  508,  225,  243,  243,  243,  244,
      630,  508,   86,  622,  508,   86,  508,  510,  543,  543,
      543,   86,   86,  610,   86,  361,  362,  363,  364,   86,
      603,   86,  600,  365,  246,  246,  246,  246,  246,  247,
      248,  248,  248,  248,  248,  248,  249,  250,  251,  252,
      253,  254,  102,  102,  410,  410,  410,   86,   86,  244,

       86,   86,   86,  494,  495,  496,  497,  591,  399,  399,
      399,  498,  576,  575,  221,  221,  221,  221,  221,  221,
      221,  568,  567,   86,   86,   86,  245,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  246,  246,  247,  248,
       86,   86,  506,   86,  248,   86,  488,  482,  544,  545,
      546,  547,   86,  470,   86,  462,  548,  395,  395,  395,
      395,  395,  395,  395,  460,  452,  451,  446,  439,  438,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  431,
      430,  225,  194,  357,  411,  412,  413,  414,  418,  418,
      418,  349,  415,  348,  347,  246,  246,  246,  400,  401,

      402,  403,  248,  248,  248,  248,  404,  249,  250,  251,
      252,  253,  254,  102,  275,  275,  275,  275,  275,  275,
      275,  344,  405,  405,  405,  285,  285,  285,  285,  285,
      285,  285,  405,  405,  405,  405,  623,  623,  623,  623,
      623,  623,  623,  405,  405,  405,  405,  405,  405,  343,
      561,  342,  561,  339,  562,  338,  562,  337,  563,  336,
      564,  257,  565,  565,  335,  565,  332,  331,  330,  566,
      329,  566,  328,  327,  326,  325,  324,  323,  419,  420,
      421,  422,  322,  321,  320,  319,  423,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  316,  315,  314,  313,
      312,  309,  246,  246,  247,  248,  308,  307,  211,  300,
      248,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  227,  227,  500,  227,  500,  227,  501,
      227,  501,  227,  502,  227,  503,  227,  504,  504,  227,
      504,  227,  227,  227,  505,  227,  505,  227,   74,   74,

      569,   74,  569,  273,  570,  272,  570,  263,  571,  234,
      572,   70,  573,  573,  213,  573,  203,  151,  148,  574,
      113,  574,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  369,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,   98,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  370,  370,  370,  370,  370,  371,  372,  372,  372,
      372,  372,  372,  373,  374,  375,  376,  377,  378,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,   74,   74,   72,   75,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,   71,   70,  515,
      515,  515,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  818,  818,  818,  818,  818,   76,  558,  558,
      558,  818,  410,  410,  410,  818,  818,  818,  558,  558,

      558,  558,  818,  264,  818,  264,  818,  818,  818,  558,
      558,  558,  558,  558,  558,  818,  264,  818,  264,  119,
      119,  119,  818,  418,  418,  418,  818,  818,  818,  818,
      264,  265,  264,  818,  276,  818,  276,  818,  818,  818,
      818,  818,  818,  264,  265,  264,  818,  276,  818,  276,
      818,  818,  818,  818,  818,  818,   77,   77,   77,  516,
      517,  518,  519,   79,   79,   79,   79,  520,   80,   81,
       82,   83,   84,   85,   74,   74,  818,   75,  246,  246,
      247,  248,  411,  412,  413,  414,  248,  818,  818,  818,
      415,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  499,  499,  499,  499,  499,  499,  499,   76,  120,
      121,  122,  123,  419,  420,  421,  422,  124,  818,  818,
      818,  423,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  221,  221,  221,  221,  221,  221,  221,  818,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  521,  521,  521,  521,  521,  521,  521,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,   77,   77,   77,
       77,   77,   78,   79,   79,   79,   79,   79,   79,   80,
       81,   82,   83,   84,   85,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   77,   77,
      522,   77,  522,   77,  523,   77,  523,   77,  524,   77,
      525,   77,  526,  526,   77,  526,   77,   77,   77,  527,
       77,  527,   77,   77,  528,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  818,  818,   77,  818,
       77,  818,   77,  818,   77,  818,   77,  818,   77,  818,
       77,   77,  818,   77,  818,  818,  818,   77,  818,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  818,  818,   77,  818,   77,  818,   77,
      818,   77,  818,   77,  818,   77,  818,   77,   77,  818,

       77,  818,  818,  818,   77,  818,   77,  529,   74,   74,
      818,   74,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  818,  818,  530,  530,  530,  221,  221,  221,
      221,  221,  221,  221,  530,  530,  530,  530,  818,  818,
      818,  818,  369,  818,  818,  530,  530,  530,  530,  530,
      530,  440,  440,  440,  395,  395,  395,  395,  395,  395,
      395,  440,  440,  440,  440,  818,  579,  818,  440,  440,
      440,  818,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  818,  443,  818,  818,  579,  818,  818,  440,
      440,  440,  440,  440,  440,  818,  818,  818,  818,  818,

      521,  521,  521,  443,  221,  221,  221,  221,  221,  221,
      221,  370,  370,  370,  370,  370,  371,  372,  372,  372,
      372,  372,  372,  373,  374,  375,  376,  377,  378,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  102,  102,  128,  818,  130,
      130,  130,  102,  672,  672,  672,  672,  672,  672,  672,
      131,  132,  131,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  818,  131,  132,  131,  818,  818,  818,  245,
      818,  818,  581,  818,  581,  818,  818,  582,  582,  582,
      410,  410,  410,  410,  410,  410,  410,  818,  583,  818,
      583,  128,  818,  140,  140,  140,  818,  818,  818,  818,
      818,  583,  818,  583,  131,  132,  131,  133,  818,  492,
      492,  492,  818,  818,  818,  818,  818,  131,  132,  131,
      493,  818,  493,  818,  133,  818,  818,  818,  818,  135,

      136,  137,  138,  493,   86,  493,  818,  139,  246,  246,
      246,  246,  246,  247,  248,  248,  248,  248,  248,  248,
      249,  250,  251,  252,  253,  254,  102,  102,  818,  818,
      818,  818,  818,  102,  818,  818,  818,  584,  585,  586,
      587,  818,  533,  533,  533,  588,  418,  418,  418,  418,
      418,  418,  418,  141,  142,  143,  144,  818,  818,  818,
      245,  145,  818,  217,  217,  217,  818,  818,  818,  494,
      495,  496,  497,  818,  818,  818,  818,  498,  241,  241,
      241,  241,  241,  241,  241,  241,  818,  818,  818,  128,
      818,  358,  358,  358,  582,  582,  582,  582,  582,  582,

      582,  631,  359,  360,  359,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  359,  360,  359,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  818,  246,
      246,  246,  534,  535,  536,  537,  248,  248,  248,  248,
      538,  249,  250,  251,  252,  253,  254,  539,  539,  539,
      818,  818,  818,  370,  370,  371,  372,  539,  539,  539,
      539,  372,  818,  818,  818,  818,  818,  818,  539,  539,
      539,  539,  539,  539,  623,  623,  623,  623,  623,  623,
      623,  361,  362,  363,  364,  818,  394,  818,  818,  365,
      221,  221,  221,  221,  221,  221,  221,  818,  818,  818,

      818,  818,  818,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  221,  221,  221,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  818,  221,
      221,  221,  221,  221,  221,  221,  818,  246,  246,  247,
      248,  818,  818,  818,  818,  248,  243,  243,  243,  221,
      221,  221,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  221,  221,  221,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  221,  221,  221,  221,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  511,  511,
      511,  511,  511,  511,  511,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  818,  818,  818,  246,  246,  247,  248,
      818,  818,  818,  818,  248,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  549,  549,  549,  549,  549,  549,
      549,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  243,
      243,  243,  221,  221,  221,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  818,  818,  818,  818,  818,  818,  221,  221,
      221,  221,  221,  221,  221,  395,  395,  395,  395,  395,

      395,  395,  818,  818,  818,  818,  818,  818,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  818,  818,  818,
      818,  246,  246,  550,  246,  550,  246,  551,  246,  551,
      246,  552,  246,  553,  246,  554,  554,  246,  554,  246,
      246,  246,  555,  246,  555,  246,  818,  818,  818,  246,
      246,  247,  248,  818,  818,  818,  818,  248,  246,  556,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  818,  818,  246,  818,  246,  818,  246,  818,  246,
      818,  246,  818,  246,  818,  246,  246,  818,  246,  818,
      818,  818,  246,  818,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  818,  818,
      246,  818,  246,  818,  246,  818,  246,  818,  246,  818,
      246,  818,  246,  246,  818,  246,  818,  818,  818,  246,
      818,  246,  557,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  559,  559,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  227,  227,  624,
      227,  624,  227,  625,  227,  625,  227,  626,  227,  627,
      227,  628,  628,  227,  628,  227,  227,  227,  629,  227,
      629,  227,   74,   74,  818,   74,  653,  653,  653,  395,
      395,  395,  395,  395,  395,  395,  653,  653,  653,  653,
      818,  818,  818,  818,  244,  818,  818,  653,  653,  653,

      653,  653,  653,  243,  243,  243,  369,  818,  818,  818,
      818,  818,  818,  243,  243,  243,  243,  395,  395,  395,
      395,  395,  395,  395,  243,  243,  243,  243,  243,  243,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  673,
      818,  673,  818,  674,  818,  674,  818,  675,  818,  676,
      818,  677,  677,  818,  677,  818,  818,  818,  678,  818,
      678,  818,  818,  818,  818,  818,  370,  370,  371,  372,
      818,  818,  818,  818,  372,  370,  370,  370,  370,  370,
      371,  372,  372,  372,  372,  372,  372,  373,  374,  375,
      376,  377,  378,   74,   74,  818,   74,  549,  549,  549,

      818,  395,  395,  395,  395,  395,  395,  395,  818,  633,
      633,  633,  395,  395,  395,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  818,  818,  369,  395,  395,
      395,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  395,  395,  395,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  395,  395,  395,  395,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  395,  395,  395,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  818,  395,  395,  395,  395,  395,  395,
      395,  818,  818,  818,  818,  818,  370,  370,  370,  634,

      635,  636,  637,  372,  372,  372,  372,  638,  373,  374,
      375,  376,  377,  378,  639,  639,  639,  395,  395,  395,
      395,  395,  395,  395,  639,  639,  639,  639,  549,  549,
      549,  549,  549,  549,  549,  639,  639,  639,  639,  639,
      639,  395,  395,  395,  395,  395,  395,  395,  682,  682,
      682,  818,  818,  510,  818,  818,  818,  818,  682,  682,
      682,  682,  686,  686,  686,  686,  686,  686,  686,  682,
      682,  682,  682,  682,  682,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  370,  370,  371,  372,  818,  818,
      818,  818,  372,  217,  217,  217,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  818,  818,  818,  818,
      818,  818,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

      818,  818,  818,  370,  370,  371,  372,  818,  818,  818,
      818,  372,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,   74,   74,
      818,   75,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  818,   76,  275,  275,  275,  818,  285,  285,  285,
      818,  818,  818,  818,  276,  277,  276,  818,  286,  685,
      286,  685,  818,  818,  686,  686,  686,  276,  277,  276,
      818,  286,  818,  286,  818,  687,  818,  687,  582,  582,
      582,  818,  582,  582,  582,  818,  818,  818,  687,  818,
      687,  818,  818,  583,  818,  583,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  818,  583,  818,  583,  818,
      818,   77,   77,   77,   77,   77,   78,   79,   79,   79,

       79,   79,   79,   80,   81,   82,   83,   84,   85,   74,
       74,  818,   75,  278,  279,  280,  281,  287,  288,  289,
      290,  282,  660,  660,  660,  291,  395,  395,  395,  395,
      395,  395,  395,  818,  688,  689,  690,  691,  818,  818,
      818,  818,  692,   76,  818,  818,  818,  818,  584,  585,
      586,  587,  584,  585,  586,  587,  588,  818,  818,  818,
      588,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  818,  818,  818,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  643,  643,  643,
      643,  643,  643,  643,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,   77,   77,   77,   77,   77,   78,   79,   79,
       79,   79,   79,   79,   80,   81,   82,   83,   84,   85,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   77,   77,  644,   77,  644,   77,  645,
       77,  645,   77,  646,   77,  647,   77,  648,  648,   77,
      648,   77,   77,   77,  649,   77,  649,   77,   77,  650,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  818,  818,   77,  818,   77,  818,   77,  818,   77,
      818,   77,  818,   77,  818,   77,   77,  818,   77,  818,

      818,  818,   77,  818,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  818,  818,
       77,  818,   77,  818,   77,  818,   77,  818,   77,  818,
       77,  818,   77,   77,  818,   77,   87,   87,   87,   77,
      818,   77,  651,   74,   74,  818,   75,   87,   87,   87,
      582,  582,  582,  582,  582,  582,  582,  701,  818,  515,
      515,  515,  818,  693,  818,  693,  818,  694,  818,  694,
      818,  695,  818,  696,  818,  697,  697,   76,  697,  818,
      818,  818,  698,  818,  698,  702,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  783,  783,  783,  783,
      783,  783,  783,  818,   88,   89,   90,   91,   92,   93,
      818,   94,   95,   96,   97,   88,   89,   90,   91,   92,
       93,  818,   94,   95,   96,   97,   77,   77,   77,  516,
      517,  518,  519,   79,   79,   79,   79,  520,   80,   81,
       82,   83,   84,   85,  102,  102,  492,  492,  492,  818,
      818,  102,  818,  818,  818,  818,  818,  493,  818,  493,
      654,  654,  654,  511,  511,  511,  511,  511,  511,  511,
      493,  818,  493,  818,  818,  818,  818,  818,  245,  818,

      818,  818,  818,  128,   86,  358,  358,  358,  511,  511,
      511,  511,  511,  511,  511,  818,  359,  360,  359,  511,
      511,  511,  511,  511,  511,  511,  818,  818,  818,  359,
      360,  359,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  221,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  818,  818,  818,  818,  818,  494,  495,  496,  497,
      818,  818,  818,  818,  498,  818,  818,  246,  246,  246,
      655,  656,  657,  658,  248,  248,  248,  248,  659,  249,
      250,  251,  252,  253,  254,  102,  102,  818,  818,  818,
      818,  818,  102,  818,  818,  361,  362,  363,  364,  643,

      643,  643,  818,  365,  818,  818,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  818,  818,  818,  245,
      643,  643,  643,  643,  643,  643,  643,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  818,  818,  818,  818,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  660,  660,  660,  660,  660,  660,  660,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  246,  246,
      246,  246,  246,  247,  248,  248,  248,  248,  248,  248,

      249,  250,  251,  252,  253,  254,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  246,
      246,  661,  246,  661,  246,  662,  246,  662,  246,  663,
      246,  664,  246,  665,  665,  246,  665,  246,  246,  246,
      666,  246,  666,  246,  246,  667,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  818,  818,  246,
      818,  246,  818,  246,  818,  246,  818,  246,  818,  246,
      818,  246,  246,  818,  246,  818,  818,  818,  246,  818,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  818,  818,  246,  818,  246,  818,

      246,  818,  246,  818,  246,  818,  246,  818,  246,  246,
      818,  246,  818,  818,  818,  246,  818,  246,  668,  102,
      102,  818,  818,  660,  660,  660,  102,  395,  395,  395,
      395,  395,  395,  395,  818,  669,  669,  669,  686,  686,
      686,  686,  686,  686,  686,  669,  669,  669,  669,  818,
      818,  818,  818,  245,  818,  818,  669,  669,  669,  669,
      669,  669,  643,  643,  643,  818,  818,  818,  818,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  218,
      218,  218,  818,  818,  818,  818,  818,  818,  818,  218,
      218,  218,  218,  395,  395,  395,  395,  395,  395,  395,

      218,  218,  218,  218,  218,  218,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  818,  818,  818,  818,  818,
      818,  818,  246,  246,  246,  246,  246,  247,  248,  248,
      248,  248,  248,  248,  249,  250,  251,  252,  253,  254,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  244,  818,  217,  217,
      217,  818,  818,  818,  818,  543,  543,  543,  217,  217,
      217,  217,  818,  818,  818,  243,  243,  243,  243,  217,
      217,  217,  217,  217,  217,  818,  243,  243,  243,  243,
      243,  243,  395,  395,  395,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  395,  395,  395,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  395,  395,
      395,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  395,  395,  395,  395,  755,  755,  755,  755,  755,

      755,  755,  755,  755,  672,  672,  672,  818,  395,  395,
      395,  395,  395,  395,  395,  544,  545,  546,  547,  818,
      818,  818,  818,  548,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,   74,   74,  818,   74,  672,  672,  672,  818,
      395,  395,  395,  395,  395,  395,  395,  818,  727,  727,
      727,  395,  395,  395,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  818,  818,  369,  660,  660,  660,

      660,  660,  660,  660,  818,  818,  818,  756,  756,  756,
      395,  395,  395,  395,  395,  395,  395,  756,  756,  756,
      756,  686,  686,  686,  818,  244,  818,  818,  756,  756,
      756,  756,  756,  756,  243,  243,  243,  395,  395,  395,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      395,  395,  395,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  818,  818,  370,  370,  370,  728,  729,
      730,  731,  372,  372,  372,  372,  732,  373,  374,  375,
      376,  377,  378,   74,   74,  818,   74,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  246,  246,  247,

      248,  818,  818,  818,  818,  248,  818,  818,  818,  818,
      818,  688,  689,  690,  691,  818,  818,  369,  818,  692,
      818,  818,  818,  818,  246,  246,  247,  248,  818,  818,
      818,  818,  248,  395,  395,  395,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  818,  818,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  733,  733,  733,  733,  733,  733,  733,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  370,  370,  370,  370,
      370,  371,  372,  372,  372,  372,  372,  372,  373,  374,

      375,  376,  377,  378,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  370,  370,  734,
      370,  734,  370,  735,  370,  735,  370,  736,  370,  737,
      370,  738,  738,  370,  738,  370,  370,  370,  739,  370,
      739,  370,  370,  740,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  818,  818,  370,  818,  370,
      818,  370,  818,  370,  818,  370,  818,  370,  818,  370,
      370,  818,  370,  818,  818,  818,  370,  818,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  818,  818,  370,  818,  370,  818,  370,  818,

      370,  244,  370,  818,  370,  818,  370,  370,  818,  370,
      543,  543,  543,  370,  818,  370,  741,   74,   74,  818,
       74,  818,  818,  672,  672,  672,  672,  672,  672,  672,
      818,  818,  818,  742,  742,  742,  395,  395,  395,  395,
      395,  395,  395,  742,  742,  742,  742,  818,  818,  818,
      818,  369,  818,  818,  742,  742,  742,  742,  742,  742,
      395,  395,  395,  395,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  395,  395,  395,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  818,  818,  818,  818,

      544,  545,  546,  547,  818,  818,  818,  818,  548,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  818,
      370,  370,  370,  370,  370,  371,  372,  372,  372,  372,
      372,  372,  373,  374,  375,  376,  377,  378,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,   74,   74,  818,   75,  255,  255,
      255,  818,  818,  818,  818,  511,  511,  511,  255,  255,
      255,  255,  733,  733,  733,  733,  733,  733,  818,  255,
      255,  255,  255,  255,  255,  818,  818,  818,   76,  410,
      410,  410,  818,  418,  418,  418,  818,  818,  818,  818,
      264,  818,  264,  818,  276,  818,  276,  686,  686,  686,
      818,  818,  818,  264,  818,  264,  818,  276,  687,  276,
      687,  818,  758,  818,  758,  818,  759,  818,  759,  818,
      760,  687,  761,  687,  762,  762,  818,  762,  818,  818,

      818,  763,  818,  763,  818,  818,  818,  818,  246,  246,
      247,  248,  818,  818,  818,  818,  248,   77,   77,   77,
       77,   77,   78,   79,   79,   79,   79,   79,   79,   80,
       81,   82,   83,   84,   85,   74,   74,  818,   75,  411,
      412,  413,  414,  419,  420,  421,  422,  415,  818,  818,
      818,  423,  818,  818,  818,  818,  818,  688,  689,  690,
      691,  818,  818,  818,  818,  692,  818,  818,  818,   76,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  733,
      733,  733,  818,  511,  511,  511,  511,  511,  511,  511,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,   77,   77,
       77,   77,   77,   78,   79,   79,   79,   79,   79,   79,
       80,   81,   82,   83,   84,   85,   74,   74,  818,   75,
      818,  818,  511,  511,  511,  511,  511,  511,  511,  818,
      818,  818,  515,  515,  515,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  818,  818,  818,  818,  818,  818,
       76,  818,  818,  818,  818,   87,   87,   87,  818,  492,

      492,  492,  818,  818,  818,  818,   86,  818,   86,  818,
      493,  818,  493,  818,  818,  818,  818,  818,  767,   86,
      818,   86,   86,  493,  784,  493,  784,  818,  785,  818,
      785,  818,  786,  818,  787,  818,  788,  788,  818,  788,
      511,  511,  511,  789,  818,  789,  818,  733,  733,  733,
      733,  733,  733,  818,  818,  818,  818,  818,  818,   77,
       77,   77,  516,  517,  518,  519,   79,   79,   79,   79,
      520,   80,   81,   82,   83,   84,   85,  102,  102,  818,
      818,  818,  818,  818,  102,   90,   91,   92,   93,  494,
      495,  496,  497,   97,  818,  818,  818,  498,  511,  511,

      511,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  245,  511,  511,  511,  818,  727,  727,  727,  733,
      733,  733,  733,  733,  733,  818,  217,  217,  217,  217,
      818,  818,  818,  818,  818,  818,  818,  217,  217,  217,
      217,  217,  217,  511,  511,  511,  511,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  733,  733,  733,  733,
      733,  733,  733,   73,   73,   73,  818,  818,  818,  511,
      511,  511,  511,  511,  511,  511,  818,  818,  818,  818,
      246,  246,  246,  246,  246,  247,  248,  248,  248,  248,
      248,  248,  249,  250,  251,  252,  253,  254,  102,  102,

      818,  818,  818,  818,  818,  102,  728,  729,  730,  731,
      818,  733,  733,  733,  732,  511,  511,  511,  511,  511,
      511,  511,  818,  793,  793,  793,  818,  818,  818,  818,
      818,  818,  245,  793,  793,  793,  793,  818,  818,  818,
      818,  818,  818,  818,  793,  793,  793,  793,  793,  793,
      818,  818,  818,   77,   77,   78,   79,  818,  818,  818,
      818,   79,  818,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  746,  746,  746,  746,
      746,  746,  746,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  246,  246,  246,  246,  246,  247,  248,  248,  248,
      248,  248,  248,  249,  250,  251,  252,  253,  254,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  246,  246,  747,  246,  747,  246,  748,  246,
      748,  246,  749,  246,  750,  246,  751,  751,  246,  751,
      246,  246,  246,  752,  246,  752,  246,  246,  753,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      818,  818,  246,  818,  246,  818,  246,  818,  246,  818,
      246,  818,  246,  818,  246,  246,  818,  246,  243,  243,
      243,  246,  818,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  818,  818,  246,
      818,  246,  818,  246,  818,  246,  818,  246,  818,  246,
      818,  246,  246,  818,  246,  818,  818,  818,  246,  818,
      246,  754,  102,  102,  395,  395,  395,  818,  818,  102,
      818,  746,  746,  746,  746,  746,  746,  818,  654,  654,
      654,  395,  395,  395,  818,  818,  818,  818,  746,  746,
      746,  746,  746,  746,  818,  818,  245,  746,  746,  746,
      818,  395,  395,  395,  395,  395,  395,  395,  246,  246,
      247,  248,  818,  818,  818,  818,  248,  395,  395,  395,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,

      395,  395,  395,  395,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  395,  395,  395,  818,  818,  818,  818,
      746,  746,  746,  746,  746,  746,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  246,  246,  246,  655,  656,
      657,  658,  248,  248,  248,  248,  659,  249,  250,  251,
      252,  253,  254,  370,  790,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  818,  818,  370,  818,
      370,  818,  370,  818,  370,  818,  370,  818,  370,  818,
      370,  370,  818,  370,  818,  818,  818,  370,  818,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  818,  818,  370,  818,  370,  818,  370,
      818,  370,  244,  370,  818,  370,  818,  370,  370,  818,
      370,  243,  243,  243,  370,  818,  370,  791,  746,  746,
      746,  746,  746,  746,  746,  818,  818,  818,  818,  818,
      818,  395,  395,  395,  395,  395,  395,  395,  746,  746,
      746,  818,  395,  395,  395,  395,  395,  395,  395,  392,
      392,  392,  818,  818,  818,  818,  818,  818,  818,  392,
      392,  392,  392,  818,  818,  818,  818,  818,  818,  818,
      392,  392,  392,  392,  392,  392,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  686,  686,  818,  818,  818,  818,
      818,  246,  246,  247,  248,  818,  818,  818,  818,  248,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      818,  818,  582,  582,  582,  818,  818,  818,  818,  246,
      246,  247,  248,  583,  818,  583,  818,  248,  818,  217,
      217,  217,  818,  818,  818,  818,  583,  818,  583,  217,
      217,  217,  217,  818,  818,  818,  818,  818,  818,  818,
      217,  217,  217,  217,  217,  217,  511,  511,  511,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  511,

      511,  511,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  511,  511,  511,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  818,  818,  818,  818,  818,
      818,  818,  584,  585,  586,  587,  818,  818,  818,  818,
      588,  511,  511,  511,  511,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  511,  511,  511,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      818,  511,  511,  511,  511,  511,  511,  511,  783,  783,
      783,  783,  783,  783,  783,  243,  243,  243,  818,  818,
      818,  511,  511,  511,  511,  511,  511,  511,  783,  783,

      783,  818,  511,  511,  511,  511,  511,  511,  511,  727,
      727,  727,  818,  818,  818,  508,  508,  508,  818,  217,
      217,  217,  217,  818,  818,  508,  508,  508,  508,  818,
      217,  217,  217,  217,  217,  217,  508,  508,  508,  508,
      508,  508,  686,  686,  686,  818,  818,  818,  217,  217,
      217,  818,  818,  687,  818,  687,  818,  818,  217,  217,
      217,  217,  818,  818,  818,  818,  687,  818,  687,  217,
      217,  217,  217,  217,  217,  246,  246,  247,  248,  818,
      818,  818,  818,  248,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  728,

      729,  730,  731,  818,  818,  818,  818,  732,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  688,  689,  690,  691,  818,  818,  818,  818,
      692,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  193,  193,  818,  193,  193,  194,
      194,  194,  194,  194,  194,  196,  196,  196,  196,  196,
      196,  207,  207,  207,  209,  209,  209,  209,  209,  209,

      212,  818,  212,  818,  212,  212,  212,  212,  212,  212,
      212,  214,  818,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,   86,   86,  818,   86,   86,  225,  225,
      225,  225,  225,  225,  227,  227,  227,  227,  227,  227,
      238,  238,  238,  240,  240,  240,  240,  240,  240,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      274,  818,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  194,  194,  194,  194,  194,  194,  367,  367,  367,
      367,  367,  367,  193,  193,  193,  193,  193,  193,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  212,  818,
      212,  818,  212,  212,  212,  212,  212,  212,  212,  214,
      818,  214,  818,  818,  214,  214,  214,  214,  214,  214,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,  225,  225,  225,  225,  225,  225,  390,  390,
      390,  390,  390,  390,   86,   86,   86,   86,   86,   86,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      274,  818,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  225,  225,  225,  225,  225,  225,  227,  227,  227,
      227,  227,  227,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  225,  225,  225,  225,
      225,  225,  227,  227,  227,  227,  227,  227,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  225,  225,  225,  225,  225,  225,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
        5,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818
    } ;

static yyconst flex_int16_t yy_chk[8855] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,   12,   12,   12,
       14,   19,   21,    3,  183,    4,   11,   11,   23,   11,
       37,   21,   19,   23,   28,   28,   14,   30,   30,  183,
       23,  187,   37,   42,   37,   37,   38,   38,  187,   39,
      315,   37,   39,   38,  315,   42,   38,   44,   42,   38,
       11,   39,   38,   22,   39,   22,   22,   22,   47,   44,
      867,   47,   44,   40,   45,   45,  150,  150,   45,   36,
       36,   36,   40,   47,   40,   50,   41,   41,   40,  189,

       45,  189,   45,   40,   41,  323,   41,   50,  323,   41,
       50,   36,   41,   46,   46,   12,   12,   12,   12,   12,
       12,   49,   12,   12,   12,   12,   36,   49,   46,   46,
      322,   46,   53,   69,  322,   49,   49,  856,   69,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   15,   15,   43,
       85,   85,   85,   43,   15,   22,   22,   22,   22,   43,
       43,  320,   53,   22,   43,  157,  157,   36,   36,   36,
       36,   36,   36,  320,   36,   36,   36,   36,   51,  173,
      173,   15,  328,  580,   51,   25,  328,   25,   25,   25,

      112,  112,  112,   51,  202,  202,  202,  179,   25,   25,
       25,   25,  179,  580,   48,   63,   63,   63,   63,   63,
       48,   25,   25,   25,  211,  211,  211,  215,   25,   48,
       48,   48,  215,   48,  848,   48,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   83,   83,   83,   83,   83,   83,  355,  355,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   24,  325,
       24,   24,   24,  233,  233,  233,  325,   25,   25,   25,
       25,   24,   24,   24,   24,   25,   24,  242,  242,  242,

       62,   62,   62,   62,   24,   24,   24,   62,  254,  254,
      254,   24,   65,   65,   65,   65,   65,   65,   65,   65,
      619,  619,   24,   95,   95,   95,   95,   95,   62,  110,
      110,  110,  110,  110,  110,   65,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   90,   90,
       90,   90,   90,   90,   90,  271,  271,  271,  331,  831,
       24,   24,   24,   24,  273,  273,  273,  331,   24,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   73,   73,  329,   73,   76,   76,
      329,   76,  299,  299,  299,   76,   97,   97,   97,   97,
       97,   97,   97,   97,   76,   76,   91,   91,   91,   91,
       91,   91,   91,   91,   91,  306,  306,  306,   73,   97,
      801,  801,   76,   86,   86,   86,   76,  308,  308,  308,
       76,  318,  314,  318,   87,   87,   87,   76,  314,  319,
       76,  352,   76,   76,   94,   94,   94,   94,  821,  352,
      319,   94,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  120,  120,  120,  120,  120,
      120,  120,   94,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  335,  349,  335,  349,  817,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   77,   77,  453,   77,  814,
      453,   86,   86,   86,   86,   86,   86,  344,   86,   86,
       86,   86,   87,   87,   87,   87,   87,   87,  344,   87,
       87,   87,   87,  252,  252,  252,  252,  252,  252,   77,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  135,
      135,  135,  135,  135,  135,  135,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  336,  378,  378,  378,  336,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,  101,  101,  103,  103,  481,
      103,  481,  101,  333,  103,  141,  141,  141,  141,  141,
      141,  141,  327,  103,  103,  122,  333,  122,  462,  122,
      321,  122,  340,  122,  327,  122,  462,  122,  122,  101,
      122,  103,  321,  321,  122,  103,  122,  340,  188,  103,
      339,  332,  119,  119,  119,  339,  103,  332,  811,  103,
      332,  103,  103,  119,  119,  119,  188,  341,  338,  342,
      188,  128,  128,  128,  338,  342,  119,  119,  119,  811,
      341,  345,  128,  128,  128,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  345,  128,  128,  128,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  104,  104,  348,  429,
      429,  429,  343,  104,  203,  203,  203,  203,  203,  203,
      203,  348,  119,  119,  119,  119,  343,  346,  356,  450,
      119,  346,  356,  134,  450,  134,  134,  134,  350,  472,
      104,  128,  128,  128,  128,  134,  134,  134,  134,  128,
      350,  431,  431,  431,  472,  813,  134,  134,  134,  134,
      134,  134,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  129,  812,  129,  129,  129,  234,  234,  234,  234,
      234,  234,  234,  357,  129,  129,  129,  129,  130,  357,

      130,  130,  130,  437,  437,  437,  591,  129,  129,  129,
      351,  130,  130,  130,  129,  132,  447,  132,  448,  351,
      132,  132,  132,  591,  130,  130,  130,  447,  137,  448,
      137,  132,  137,  132,  137,  442,  137,  456,  137,  459,
      137,  137,  464,  137,  132,  459,  132,  137,  464,  137,
      456,  140,  442,  140,  140,  140,  272,  272,  272,  272,
      272,  272,  272,  810,  140,  140,  140,  140,  439,  439,
      439,  455,  442,  129,  129,  129,  129,  140,  140,  140,
      458,  129,  465,  455,  140,  221,  221,  221,  620,  809,
      130,  130,  130,  130,  458,  465,  479,  620,  130,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  479,
      132,  132,  132,  132,  805,  143,  457,  143,  132,  143,
      457,  143,  468,  143,  483,  143,  483,  143,  143,  470,
      143,  478,  802,  468,  143,  195,  143,  195,  195,  195,
      470,  603,  478,  140,  140,  140,  140,  603,  195,  195,
      195,  140,  225,  225,  225,  376,  376,  376,  376,  376,
      376,  195,  195,  195,  226,  226,  226,  278,  278,  278,
      278,  278,  278,  278,  597,  221,  221,  221,  221,  484,
      797,  597,  484,  221,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  796,  195,  195,  195,
      195,  258,  258,  258,  469,  195,  217,  217,  469,  217,
      225,  225,  225,  225,  225,  225,  487,  225,  225,  225,
      225,  777,  226,  226,  226,  226,  226,  226,  487,  226,
      226,  226,  226,  245,  245,  474,  245,  482,  776,  474,
      217,  287,  287,  287,  287,  287,  287,  287,  482,  245,
      245,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      475,  245,  775,  486,  475,  245,  284,  284,  284,  477,
      480,  596,  245,  477,  480,  245,  596,  245,  245,  486,
      725,  258,  258,  258,  258,  505,  505,  505,  725,  258,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  218,  218,  772,
      218,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  547,  490,  507,  507,  507,  618,  265,  618,  265,
      771,  218,  265,  265,  265,  490,  284,  284,  284,  284,

      566,  566,  566,  265,  284,  265,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  265,  547,  265,  568,
      568,  568,  770,  275,  275,  275,  300,  300,  300,  300,
      300,  300,  300,  598,  275,  275,  275,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  598,  275,  275,  275,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  768,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  219,  219,
      621,  219,  265,  265,  265,  265,  574,  574,  574,  621,
      265,  576,  576,  576,  219,  219,  219,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  606,  599,  608,
      601,  607,  219,  275,  275,  275,  275,  601,  605,  606,
      608,  275,  599,  605,  607,  610,  277,  709,  277,  709,
      723,  277,  277,  277,  611,  280,  704,  280,  614,  280,
      610,  280,  277,  280,  277,  280,  612,  280,  280,  611,
      280,  612,  704,  614,  280,  277,  280,  277,  289,  617,
      289,  722,  289,  705,  289,  712,  289,  712,  289,  617,
      289,  289,  722,  289,  629,  629,  629,  289,  705,  289,
      721,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  220,

      220,  779,  220,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  779,  708,  220,  220,  220,  631,  631,
      631,  277,  277,  277,  277,  220,  220,  220,  220,  277,
      698,  698,  698,  220,  708,  719,  220,  220,  220,  220,
      220,  220,  285,  285,  285,  700,  700,  700,  292,  292,
      292,  707,  703,  285,  220,  285,  718,  803,  292,  292,
      292,  292,  703,  803,  720,  707,  285,  720,  285,  292,
      292,  292,  292,  292,  292,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  307,  307,  307,  307,  307,  307,

      307,  717,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      222,  222,  222,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  285,  285,  285,  285,  714,  715,  714,  715,
      285,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  361,  361,  361,  361,  361,  361,  361,  713,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  222,  724,  711,  724,
      222,  222,  222,  222,  763,  763,  763,  710,  222,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  243,  243,  293,  773,  293,

      293,  293,  243,  716,  765,  765,  765,  706,  773,  293,
      293,  293,  293,  293,  293,  769,  767,  769,  716,  807,
      293,  293,  293,  293,  293,  293,  774,  702,  774,  243,
      293,  767,  692,  807,  293,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  313,  313,  313,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  778,  691,  778,
      312,  312,  312,  386,  386,  386,  386,  386,  386,  386,
      313,  411,  411,  411,  411,  411,  411,  411,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  246,  246,  312,  782,
      800,  782,  800,  246,  365,  365,  365,  365,  365,  365,
      365,  365,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  808,  627,  365,  808,  780,
      246,  798,  804,  313,  313,  313,  313,  313,  313,  780,
      313,  313,  313,  313,  781,  622,  798,  804,  312,  312,
      312,  312,  312,  312,  781,  312,  312,  312,  312,  816,
      816,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  255,  255,  358,  616,  358,  358,  358,  255,  419,
      419,  419,  419,  419,  419,  419,  358,  358,  358,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  615,  358,

      358,  358,  369,  369,  613,  255,  799,  609,  360,  369,
      360,  604,  602,  360,  360,  360,  600,  799,  369,  369,
      815,  595,  815,  594,  360,  593,  360,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  592,  360,  360,  360,
      369,  588,  587,  548,  369,  503,  395,  395,  395,  399,
      497,  369,  493,  491,  369,  489,  369,  369,  399,  399,
      399,  488,  485,  476,  473,  358,  358,  358,  358,  471,
      467,  466,  463,  358,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  256,  256,  409,  409,  409,  461,  460,  256,

      454,  452,  451,  360,  360,  360,  360,  449,  256,  256,
      256,  360,  423,  422,  381,  381,  381,  381,  381,  381,
      381,  415,  414,  391,  390,  389,  256,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  395,  395,  395,  395,
      368,  367,  364,  359,  395,  354,  353,  347,  399,  399,
      399,  399,  337,  334,  330,  326,  399,  401,  401,  401,
      401,  401,  401,  401,  324,  317,  316,  311,  291,  290,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  282,
      281,  231,  200,  190,  409,  409,  409,  409,  417,  417,
      417,  186,  409,  185,  184,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  257,  430,  430,  430,  430,  430,  430,
      430,  182,  257,  257,  257,  438,  438,  438,  438,  438,
      438,  438,  257,  257,  257,  257,  494,  494,  494,  494,
      494,  494,  494,  257,  257,  257,  257,  257,  257,  181,
      413,  180,  413,  178,  413,  177,  413,  176,  413,  175,
      413,  257,  413,  413,  174,  413,  172,  170,  169,  413,
      168,  413,  167,  166,  165,  164,  163,  162,  417,  417,
      417,  417,  161,  160,  159,  158,  417,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  156,  155,  154,  153,
      152,  146,  257,  257,  257,  257,  145,  144,  139,  138,
      257,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  370,  370,

      421,  370,  421,  124,  421,  123,  421,  118,  421,   93,
      421,   70,  421,  421,   68,  421,   61,   35,   29,  421,
       18,  421,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  370,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,   13,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  379,  379,   10,  379,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,    9,    7,  379,
      379,  379,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,    5,    0,    0,    0,    0,  379,  405,  405,
      405,    0,  410,  410,  410,    0,    0,    0,  405,  405,

      405,  405,    0,  410,    0,  410,    0,    0,    0,  405,
      405,  405,  405,  405,  405,    0,  410,    0,  410,  416,
      416,  416,    0,  418,  418,  418,    0,    0,    0,    0,
      416,  416,  416,    0,  418,    0,  418,    0,    0,    0,
        0,    0,    0,  416,  416,  416,    0,  418,    0,  418,
        0,    0,    0,    0,    0,    0,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  380,  380,    0,  380,  405,  405,
      405,  405,  410,  410,  410,  410,  405,    0,    0,    0,
      410,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  506,  506,  506,  506,  506,  506,  506,  380,  416,
      416,  416,  416,  418,  418,  418,  418,  416,    0,    0,
        0,  418,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  531,  531,  531,  531,  531,  531,  531,    0,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,    0,    0,  383,    0,
      383,    0,  383,    0,  383,    0,  383,    0,  383,    0,
      383,  383,    0,  383,    0,    0,    0,  383,    0,  383,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,    0,    0,  384,    0,  384,    0,  384,
        0,  384,    0,  384,    0,  384,    0,  384,  384,    0,

      384,    0,    0,    0,  384,    0,  384,  384,  385,  385,
        0,  385,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,    0,    0,  385,  385,  385,  532,  532,  532,
      532,  532,  532,  532,  385,  385,  385,  385,    0,    0,
        0,    0,  385,    0,    0,  385,  385,  385,  385,  385,
      385,  440,  440,  440,  540,  540,  540,  540,  540,  540,
      540,  440,  440,  440,  440,    0,  440,    0,  441,  441,
      441,    0,  440,  440,  440,  440,  440,  440,  441,  441,
      441,  441,    0,  441,    0,    0,  440,    0,    0,  441,
      441,  441,  441,  441,  441,    0,    0,    0,    0,    0,

      527,  527,  527,  441,  527,  527,  527,  527,  527,  527,
      527,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  392,  392,  444,    0,  444,
      444,  444,  392,  544,  544,  544,  544,  544,  544,  544,
      444,  444,  444,  495,  495,  495,  495,  495,  495,  495,
      495,  495,    0,  444,  444,  444,    0,    0,    0,  392,
        0,    0,  443,    0,  443,    0,    0,  443,  443,  443,
      567,  567,  567,  567,  567,  567,  567,    0,  443,    0,
      443,  445,    0,  445,  445,  445,    0,    0,    0,    0,
        0,  443,    0,  443,  445,  445,  445,  445,    0,  492,
      492,  492,    0,    0,    0,    0,    0,  445,  445,  445,
      492,    0,  492,    0,  445,    0,    0,    0,    0,  444,

      444,  444,  444,  492,  492,  492,    0,  444,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  393,  393,    0,    0,
        0,    0,    0,  393,    0,    0,    0,  443,  443,  443,
      443,    0,  393,  393,  393,  443,  575,  575,  575,  575,
      575,  575,  575,  445,  445,  445,  445,    0,    0,    0,
      393,  445,    0,  511,  511,  511,    0,    0,    0,  492,
      492,  492,  492,    0,    0,    0,    0,  492,  498,  498,
      498,  498,  498,  498,  498,  498,    0,    0,    0,  499,
        0,  499,  499,  499,  584,  584,  584,  584,  584,  584,

      584,  498,  499,  499,  499,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  499,  499,  499,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,    0,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  394,  394,  394,
        0,    0,    0,  511,  511,  511,  511,  394,  394,  394,
      394,  511,    0,    0,    0,    0,    0,    0,  394,  394,
      394,  394,  394,  394,  630,  630,  630,  630,  630,  630,
      630,  499,  499,  499,  499,    0,  394,    0,    0,  499,
      517,  517,  517,  517,  517,  517,  517,    0,    0,    0,

        0,    0,    0,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  529,  529,  529,    0,  529,
      529,  529,  529,  529,  529,  529,    0,  394,  394,  394,
      394,    0,    0,    0,    0,  394,  396,  396,  396,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  640,  640,
      640,  640,  640,  640,  640,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,    0,    0,    0,  396,  396,  396,  396,
        0,    0,    0,    0,  396,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  402,
      402,  402,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  528,  528,  528,  528,  528,
      528,  528,    0,    0,    0,    0,    0,    0,  528,  528,
      528,  528,  528,  528,  528,  535,  535,  535,  535,  535,

      535,  535,    0,    0,    0,    0,    0,    0,  535,  535,
      535,  535,  535,  535,  535,  535,  535,    0,    0,    0,
        0,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,    0,    0,    0,  402,
      402,  402,  402,    0,    0,    0,    0,  402,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,    0,    0,  403,    0,  403,    0,  403,    0,  403,
        0,  403,    0,  403,    0,  403,  403,    0,  403,    0,
        0,    0,  403,    0,  403,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,    0,    0,
      404,    0,  404,    0,  404,    0,  404,    0,  404,    0,
      404,    0,  404,  404,    0,  404,    0,    0,    0,  404,
        0,  404,  404,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  508,  508,    0,  508,  530,  530,  530,  670,
      670,  670,  670,  670,  670,  670,  530,  530,  530,  530,
        0,    0,    0,    0,  543,    0,    0,  530,  530,  530,

      530,  530,  530,  543,  543,  543,  508,    0,    0,    0,
        0,    0,    0,  543,  543,  543,  543,  545,  545,  545,
      545,  545,  545,  545,  543,  543,  543,  543,  543,  543,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  546,
        0,  546,    0,  546,    0,  546,    0,  546,    0,  546,
        0,  546,  546,    0,  546,    0,    0,    0,  546,    0,
      546,    0,    0,    0,    0,    0,  530,  530,  530,  530,
        0,    0,    0,    0,  530,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  509,  509,    0,  509,  555,  555,  555,

        0,  555,  555,  555,  555,  555,  555,  555,    0,  509,
      509,  509,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,    0,    0,  509,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      557,  557,  557,    0,  557,  557,  557,  557,  557,  557,
      557,    0,    0,    0,    0,    0,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  510,  510,  671,  671,  671,
      671,  671,  671,  671,  510,  510,  510,  510,  556,  556,
      556,  556,  556,  556,  556,  510,  510,  510,  510,  510,
      510,  556,  556,  556,  556,  556,  556,  556,  558,  558,
      558,    0,    0,  510,    0,    0,    0,    0,  558,  558,
      558,  558,  688,  688,  688,  688,  688,  688,  688,  558,
      558,  558,  558,  558,  558,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  564,  564,  564,  564,  564,

      564,  564,  564,  564,  510,  510,  510,  510,    0,    0,
        0,    0,  510,  512,  512,  512,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,    0,    0,    0,    0,
        0,    0,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

        0,    0,    0,  512,  512,  512,  512,    0,    0,    0,
        0,  512,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  515,  515,
        0,  515,  571,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,    0,  515,  577,  577,  577,    0,  578,  578,  578,
        0,    0,    0,    0,  577,  577,  577,    0,  578,  579,
      578,  579,    0,    0,  579,  579,  579,  577,  577,  577,
        0,  578,    0,  578,    0,  579,    0,  579,  581,  581,
      581,    0,  582,  582,  582,    0,    0,    0,  579,    0,
      579,    0,    0,  582,    0,  582,  585,  585,  585,  585,
      585,  585,  585,  585,  585,    0,  582,    0,  582,    0,
        0,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  515,  515,  516,
      516,    0,  516,  577,  577,  577,  577,  578,  578,  578,
      578,  577,  666,  666,  666,  578,  666,  666,  666,  666,
      666,  666,  666,    0,  579,  579,  579,  579,    0,    0,
        0,    0,  579,  516,    0,    0,    0,    0,  581,  581,
      581,  581,  582,  582,  582,  582,  581,    0,    0,    0,
      582,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,    0,    0,    0,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,    0,    0,  519,    0,  519,    0,  519,    0,  519,
        0,  519,    0,  519,    0,  519,  519,    0,  519,    0,

        0,    0,  519,    0,  519,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,    0,    0,
      520,    0,  520,    0,  520,    0,  520,    0,  520,    0,
      520,    0,  520,  520,    0,  520,  589,  589,  589,  520,
        0,  520,  520,  521,  521,    0,  521,  590,  590,  590,
      699,  699,  699,  699,  699,  699,  699,  589,    0,  521,
      521,  521,    0,  586,    0,  586,    0,  586,    0,  586,
        0,  586,    0,  586,    0,  586,  586,  521,  586,    0,
        0,    0,  586,    0,  586,  590,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  728,  728,  728,  728,
      728,  728,  728,    0,  589,  589,  589,  589,  589,  589,
        0,  589,  589,  589,  589,  590,  590,  590,  590,  590,
      590,    0,  590,  590,  590,  590,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  533,  533,  623,  623,  623,    0,
        0,  533,    0,    0,    0,    0,    0,  623,    0,  623,
      533,  533,  533,  743,  743,  743,  743,  743,  743,  743,
      623,    0,  623,    0,    0,    0,    0,    0,  533,    0,

        0,    0,    0,  632,  623,  632,  632,  632,  744,  744,
      744,  744,  744,  744,  744,    0,  632,  632,  632,  635,
      635,  635,  635,  635,  635,  635,    0,    0,    0,  632,
      632,  632,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,    0,    0,    0,    0,    0,  623,  623,  623,  623,
        0,    0,    0,    0,  623,    0,    0,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  534,  534,    0,    0,    0,
        0,    0,  534,    0,    0,  632,  632,  632,  632,  649,

      649,  649,    0,  632,    0,    0,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,    0,    0,    0,  534,
      650,  650,  650,  650,  650,  650,  650,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,    0,    0,    0,    0,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,

      534,  534,  534,  534,  534,  534,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,    0,    0,  537,
        0,  537,    0,  537,    0,  537,    0,  537,    0,  537,
        0,  537,  537,    0,  537,    0,    0,    0,  537,    0,
      537,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,    0,    0,  538,    0,  538,    0,

      538,    0,  538,    0,  538,    0,  538,    0,  538,  538,
        0,  538,    0,    0,    0,  538,    0,  538,  538,  539,
      539,    0,    0,  668,  668,  668,  539,  668,  668,  668,
      668,  668,  668,  668,    0,  539,  539,  539,  764,  764,
      764,  764,  764,  764,  764,  539,  539,  539,  539,    0,
        0,    0,    0,  539,    0,    0,  539,  539,  539,  539,
      539,  539,  651,  651,  651,    0,    0,    0,    0,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  653,
      653,  653,    0,    0,    0,    0,    0,    0,    0,  653,
      653,  653,  653,  656,  656,  656,  656,  656,  656,  656,

      653,  653,  653,  653,  653,  653,  656,  656,  656,  656,
      656,  656,  656,  656,  656,    0,    0,    0,    0,    0,
        0,    0,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  549,    0,  727,  727,
      727,    0,    0,    0,    0,  549,  549,  549,  727,  727,
      727,  727,    0,    0,    0,  549,  549,  549,  549,  727,
      727,  727,  727,  727,  727,    0,  549,  549,  549,  549,
      549,  549,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  664,  664,  664,  678,  678,  678,    0,  678,  678,
      678,  678,  678,  678,  678,  549,  549,  549,  549,    0,
        0,    0,    0,  549,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  633,  633,    0,  633,  680,  680,  680,    0,
      680,  680,  680,  680,  680,  680,  680,    0,  633,  633,
      633,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,    0,    0,  633,  667,  667,  667,

      667,  667,  667,  667,    0,    0,    0,  669,  669,  669,
      667,  667,  667,  667,  667,  667,  667,  669,  669,  669,
      669,  685,  685,  685,    0,  672,    0,    0,  669,  669,
      669,  669,  669,  669,  672,  672,  672,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,    0,    0,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  634,  634,    0,  634,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  669,  669,  669,

      669,    0,    0,    0,    0,  669,    0,    0,    0,    0,
        0,  685,  685,  685,  685,    0,    0,  634,    0,  685,
        0,    0,    0,    0,  672,  672,  672,  672,    0,    0,
        0,    0,  672,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,    0,    0,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,    0,    0,  637,    0,  637,
        0,  637,    0,  637,    0,  637,    0,  637,    0,  637,
      637,    0,  637,    0,    0,    0,  637,    0,  637,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,    0,    0,  638,    0,  638,    0,  638,    0,

      638,  681,  638,    0,  638,    0,  638,  638,    0,  638,
      681,  681,  681,  638,    0,  638,  638,  639,  639,    0,
      639,    0,    0,  679,  679,  679,  679,  679,  679,  679,
        0,    0,    0,  639,  639,  639,  679,  679,  679,  679,
      679,  679,  679,  639,  639,  639,  639,    0,    0,    0,
        0,  639,    0,    0,  639,  639,  639,  639,  639,  639,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,    0,    0,    0,    0,

      681,  681,  681,  681,    0,    0,    0,    0,  681,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,    0,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  643,  643,    0,  643,  682,  682,
      682,    0,    0,    0,    0,  734,  734,  734,  682,  682,
      682,  682,  734,  734,  734,  734,  734,  734,    0,  682,
      682,  682,  682,  682,  682,    0,    0,    0,  643,  683,
      683,  683,    0,  684,  684,  684,    0,    0,    0,    0,
      683,    0,  683,    0,  684,    0,  684,  686,  686,  686,
        0,    0,    0,  683,    0,  683,    0,  684,  686,  684,
      686,    0,  690,    0,  690,    0,  690,    0,  690,    0,
      690,  686,  690,  686,  690,  690,    0,  690,    0,    0,

        0,  690,    0,  690,    0,    0,    0,    0,  682,  682,
      682,  682,    0,    0,    0,    0,  682,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  644,  644,    0,  644,  683,
      683,  683,  683,  684,  684,  684,  684,  683,    0,    0,
        0,  684,    0,    0,    0,    0,    0,  686,  686,  686,
      686,    0,    0,    0,    0,  686,    0,    0,    0,  644,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  739,
      739,  739,    0,  739,  739,  739,  739,  739,  739,  739,

      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  652,  652,    0,  652,
        0,    0,  729,  729,  729,  729,  729,  729,  729,    0,
        0,    0,  652,  652,  652,  729,  729,  729,  729,  729,
      729,  729,  729,  729,    0,    0,    0,    0,    0,    0,
      652,    0,    0,    0,    0,  701,  701,  701,    0,  726,

      726,  726,    0,    0,    0,    0,  701,    0,  701,    0,
      726,    0,  726,    0,    0,    0,    0,    0,  701,  701,
        0,  701,  726,  726,  730,  726,  730,    0,  730,    0,
      730,    0,  730,    0,  730,    0,  730,  730,    0,  730,
      735,  735,  735,  730,    0,  730,    0,  735,  735,  735,
      735,  735,  735,    0,    0,    0,    0,    0,    0,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  654,  654,    0,
        0,    0,    0,    0,  654,  701,  701,  701,  701,  726,
      726,  726,  726,  701,    0,    0,    0,  726,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  654,  738,  738,  738,    0,  733,  733,  733,  738,
      738,  738,  738,  738,  738,    0,  733,  733,  733,  733,
        0,    0,    0,    0,    0,    0,    0,  733,  733,  733,
      733,  733,  733,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  740,  740,  740,  740,
      740,  740,  740,  745,  745,  745,    0,    0,    0,  740,
      740,  740,  740,  740,  740,  740,    0,    0,    0,    0,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  655,  655,

        0,    0,    0,    0,    0,  655,  733,  733,  733,  733,
        0,  741,  741,  741,  733,  741,  741,  741,  741,  741,
      741,  741,    0,  742,  742,  742,    0,    0,    0,    0,
        0,    0,  655,  742,  742,  742,  742,    0,    0,    0,
        0,    0,    0,    0,  742,  742,  742,  742,  742,  742,
        0,    0,    0,  745,  745,  745,  745,    0,    0,    0,
        0,  745,    0,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
        0,    0,  658,    0,  658,    0,  658,    0,  658,    0,
      658,    0,  658,    0,  658,  658,    0,  658,  746,  746,
      746,  658,    0,  658,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,    0,    0,  659,
        0,  659,    0,  659,    0,  659,    0,  659,    0,  659,
        0,  659,  659,    0,  659,    0,    0,    0,  659,    0,
      659,  659,  660,  660,  747,  747,  747,    0,    0,  660,
        0,  747,  747,  747,  747,  747,  747,    0,  660,  660,
      660,  748,  748,  748,    0,    0,    0,    0,  748,  748,
      748,  748,  748,  748,    0,    0,  660,  752,  752,  752,
        0,  752,  752,  752,  752,  752,  752,  752,  746,  746,
      746,  746,    0,    0,    0,    0,  746,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,

      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  751,  751,  751,    0,    0,    0,    0,
      751,  751,  751,  751,  751,  751,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,    0,    0,  731,    0,
      731,    0,  731,    0,  731,    0,  731,    0,  731,    0,
      731,  731,    0,  731,    0,    0,    0,  731,    0,  731,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      732,  732,  732,    0,    0,  732,    0,  732,    0,  732,
        0,  732,  757,  732,    0,  732,    0,  732,  732,    0,
      732,  757,  757,  757,  732,    0,  732,  732,  753,  753,
      753,  753,  753,  753,  753,    0,    0,    0,    0,    0,
        0,  753,  753,  753,  753,  753,  753,  753,  754,  754,
      754,    0,  754,  754,  754,  754,  754,  754,  754,  756,
      756,  756,    0,    0,    0,    0,    0,    0,    0,  756,
      756,  756,  756,    0,    0,    0,    0,    0,    0,    0,
      756,  756,  756,  756,  756,  756,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,    0,    0,    0,    0,
        0,  757,  757,  757,  757,    0,    0,    0,    0,  757,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
        0,    0,  766,  766,  766,    0,    0,    0,    0,  756,
      756,  756,  756,  766,    0,  766,    0,  756,    0,  783,
      783,  783,    0,    0,    0,    0,  766,    0,  766,  783,
      783,  783,  783,    0,    0,    0,    0,    0,    0,    0,
      783,  783,  783,  783,  783,  783,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,    0,    0,    0,    0,    0,
        0,    0,  766,  766,  766,  766,    0,    0,    0,    0,
      766,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  789,  789,  789,
        0,  789,  789,  789,  789,  789,  789,  789,  790,  790,
      790,  790,  790,  790,  790,  794,  794,  794,    0,    0,
        0,  790,  790,  790,  790,  790,  790,  790,  791,  791,

      791,    0,  791,  791,  791,  791,  791,  791,  791,  792,
      792,  792,    0,    0,    0,  793,  793,  793,    0,  792,
      792,  792,  792,    0,    0,  793,  793,  793,  793,    0,
      792,  792,  792,  792,  792,  792,  793,  793,  793,  793,
      793,  793,  795,  795,  795,    0,    0,    0,  806,  806,
      806,    0,    0,  795,    0,  795,    0,    0,  806,  806,
      806,  806,    0,    0,    0,    0,  795,    0,  795,  806,
      806,  806,  806,  806,  806,  794,  794,  794,  794,    0,
        0,    0,    0,  794,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  792,

      792,  792,  792,    0,    0,    0,    0,  792,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  795,  795,  795,  795,    0,    0,    0,    0,
      795,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  823,  823,    0,  823,  823,  824,
      824,  824,  824,  824,  824,  825,  825,  825,  825,  825,
      825,  826,  826,  826,  827,  827,  827,  827,  827,  827,

      828,    0,  828,    0,  828,  828,  828,  828,  828,  828,
      828,  829,    0,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  832,  832,    0,  832,  832,  833,  833,
      833,  833,  833,  833,  834,  834,  834,  834,  834,  834,
      835,  835,  835,  836,  836,  836,  836,  836,  836,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      838,    0,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  839,  839,  839,  839,  839,  839,  840,  840,  840,
      840,  840,  840,  841,  841,  841,  841,  841,  841,  842,

      842,  842,  842,  842,  842,  843,  843,  843,  844,    0,
      844,    0,  844,  844,  844,  844,  844,  844,  844,  845,
        0,  845,    0,    0,  845,  845,  845,  845,  845,  845,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  849,  849,  849,  849,  849,  849,  850,  850,
      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      852,  852,  852,  852,  852,  852,  853,  853,  853,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      855,    0,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  857,  857,  857,  857,  857,  857,  858,  858,  858,
      858,  858,  858,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  862,  862,  862,  862,
      862,  862,  863,  863,  863,  863,  863,  863,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  868,  868,  868,  868,  868,  868,  869,  869,  869,

      869,  869,  869,  869,  869,  869,  869,  869,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "java_lexer.ll"

#line 28 "java_lexer.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "java_lexer.h"


#define YY_USER_ACTION \
_M_token_begin = _M_token_end; \
_M_token_end += yyleng;

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* \u0024, \u0041-\u005a, \u005f, \u0061-\u007a: one byte in UTF-8 */
/* \u00c0-\u00d6, \u00d8-\u00f6, \u00f8-\u00ff */
/* \u0100-\u1fff */
/* \u3040-\u318f */
/* \u3300-\u337f */
/* \u3400-\u3d2d */
/* \u4e00-\u9fff */
/* \uf900-\ufaff */
/* \u0030-\u0039: ISO-LATIN-1 digits */
/* \u0660-\u0669, \u06f0-\u06f9: Arabic-Indic and extended Ar.-Indic digits */
/* \u0966-\u096f, \u09e6-\u09ef: Devanagari digits */
/* \u0a66-\u0a6f, \u0ae6-\u0aef */
/* \u0b66-\u0b6f, \u0be7-\u0bef */
/* \u0c66-\u0c6f, \u0ce6-\u0cef, \u0d66-\u0d6f */
/* \u0e50-\u0e59, \u0ed0-\u0ed9 */
/* \u1040-\u1049 */
/* \uff10-\uff19: Fullwidth digits */
/* \u0080-\uffff */
/* \u10000-\u1fffff */
/* \u200000-\u3ffffff */
/* \u4000000-\u7fffffff */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* non-Unicode stuff */

#line 2699 "java_lexer.cpp"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 128 "java_lexer.ll"


 /* whitespace, newlines and comments */

#line 2805 "java_lexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 819 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8731 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 132 "java_lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 133 "java_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 135 "java_lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 137 "java_lexer.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 139 "java_lexer.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 140 "java_lexer.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 141 "java_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 142 "java_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 143 "java_lexer.ll"
{
    _M_parser->report_problem( parser::error,
      "Encountered end of file in an unclosed block comment");
    return parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 9:
YY_RULE_SETUP
#line 153 "java_lexer.ll"
return parser::Token_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 154 "java_lexer.ll"
return parser::Token_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 155 "java_lexer.ll"
return parser::Token_LBRACE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 156 "java_lexer.ll"
return parser::Token_RBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 157 "java_lexer.ll"
return parser::Token_LBRACKET;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 158 "java_lexer.ll"
return parser::Token_RBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 159 "java_lexer.ll"
return parser::Token_COMMA;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 160 "java_lexer.ll"
return parser::Token_SEMICOLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 161 "java_lexer.ll"
return parser::Token_DOT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 162 "java_lexer.ll"
{
    if (_M_parser->compatibility_mode() >= parser::java15_compatibility)
      return parser::Token_AT;
    else {
      _M_parser->report_problem( parser::error,
        "Annotations are not supported by Java 1.4 or earlier");
      return parser::Token_INVALID;
    }
}
	YY_BREAK
/* operators */
case 19:
YY_RULE_SETUP
#line 175 "java_lexer.ll"
return parser::Token_QUESTION;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 176 "java_lexer.ll"
return parser::Token_COLON;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 177 "java_lexer.ll"
return parser::Token_BANG;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 178 "java_lexer.ll"
return parser::Token_TILDE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 179 "java_lexer.ll"
return parser::Token_EQUAL;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 180 "java_lexer.ll"
return parser::Token_LESS_THAN;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 181 "java_lexer.ll"
return parser::Token_LESS_EQUAL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 182 "java_lexer.ll"
return parser::Token_GREATER_THAN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 183 "java_lexer.ll"
return parser::Token_GREATER_EQUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 184 "java_lexer.ll"
return parser::Token_NOT_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 185 "java_lexer.ll"
return parser::Token_LOG_AND;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 186 "java_lexer.ll"
return parser::Token_LOG_OR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 187 "java_lexer.ll"
return parser::Token_INCREMENT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 188 "java_lexer.ll"
return parser::Token_DECREMENT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 189 "java_lexer.ll"
return parser::Token_ASSIGN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 190 "java_lexer.ll"
return parser::Token_PLUS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 191 "java_lexer.ll"
return parser::Token_PLUS_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 192 "java_lexer.ll"
return parser::Token_MINUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 193 "java_lexer.ll"
return parser::Token_MINUS_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 194 "java_lexer.ll"
return parser::Token_STAR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 195 "java_lexer.ll"
return parser::Token_STAR_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 196 "java_lexer.ll"
return parser::Token_SLASH;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 197 "java_lexer.ll"
return parser::Token_SLASH_ASSIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 198 "java_lexer.ll"
return parser::Token_BIT_AND;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 199 "java_lexer.ll"
return parser::Token_BIT_AND_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 200 "java_lexer.ll"
return parser::Token_BIT_OR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 201 "java_lexer.ll"
return parser::Token_BIT_OR_ASSIGN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 202 "java_lexer.ll"
return parser::Token_BIT_XOR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 203 "java_lexer.ll"
return parser::Token_BIT_XOR_ASSIGN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 204 "java_lexer.ll"
return parser::Token_REMAINDER;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 205 "java_lexer.ll"
return parser::Token_REMAINDER_ASSIGN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 206 "java_lexer.ll"
return parser::Token_LSHIFT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 207 "java_lexer.ll"
return parser::Token_LSHIFT_ASSIGN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 208 "java_lexer.ll"
return parser::Token_SIGNED_RSHIFT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 209 "java_lexer.ll"
return parser::Token_SIGNED_RSHIFT_ASSIGN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 210 "java_lexer.ll"
return parser::Token_UNSIGNED_RSHIFT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 211 "java_lexer.ll"
return parser::Token_UNSIGNED_RSHIFT_ASSIGN;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 212 "java_lexer.ll"
{
    if (_M_parser->compatibility_mode() >= parser::java15_compatibility)
      return parser::Token_ELLIPSIS;
    else {
      _M_parser->report_problem( parser::error,
        "Variable-length argument lists are not supported by Java 1.4 or earlier");
      return parser::Token_INVALID;
    }
}
	YY_BREAK
/* reserved words */
case 57:
YY_RULE_SETUP
#line 225 "java_lexer.ll"
return parser::Token_ABSTRACT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 226 "java_lexer.ll"
{
    if (_M_parser->compatibility_mode() >= parser::java14_compatibility)
      return parser::Token_ASSERT;
    else
      return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 232 "java_lexer.ll"
return parser::Token_BOOLEAN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 233 "java_lexer.ll"
return parser::Token_BREAK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 234 "java_lexer.ll"
return parser::Token_BYTE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 235 "java_lexer.ll"
return parser::Token_CASE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 236 "java_lexer.ll"
return parser::Token_CATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 237 "java_lexer.ll"
return parser::Token_CHAR;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 238 "java_lexer.ll"
return parser::Token_CLASS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 239 "java_lexer.ll"
{
    _M_parser->report_problem( parser::error,
      "\"const\": reserved but unused (invalid) keyword");
    return parser::Token_CONST;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 244 "java_lexer.ll"
return parser::Token_CONTINUE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 245 "java_lexer.ll"
return parser::Token_DEFAULT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 246 "java_lexer.ll"
return parser::Token_DO;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 247 "java_lexer.ll"
return parser::Token_DOUBLE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 248 "java_lexer.ll"
return parser::Token_ELSE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 249 "java_lexer.ll"
{
    if (_M_parser->compatibility_mode() >= parser::java15_compatibility)
      return parser::Token_ENUM;
    else
      return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 255 "java_lexer.ll"
return parser::Token_EXTENDS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 256 "java_lexer.ll"
return parser::Token_FALSE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 257 "java_lexer.ll"
return parser::Token_FINAL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 258 "java_lexer.ll"
return parser::Token_FINALLY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 259 "java_lexer.ll"
return parser::Token_FLOAT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 260 "java_lexer.ll"
return parser::Token_FOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 261 "java_lexer.ll"
{
    _M_parser->report_problem( parser::error,
      "\"goto\": reserved but unused (invalid) keyword");
    return parser::Token_GOTO;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 266 "java_lexer.ll"
return parser::Token_IF;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 267 "java_lexer.ll"
return parser::Token_IMPLEMENTS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 268 "java_lexer.ll"
return parser::Token_IMPORT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 269 "java_lexer.ll"
return parser::Token_INSTANCEOF;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 270 "java_lexer.ll"
return parser::Token_INT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 271 "java_lexer.ll"
return parser::Token_INTERFACE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 272 "java_lexer.ll"
return parser::Token_LONG;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 273 "java_lexer.ll"
return parser::Token_NATIVE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 274 "java_lexer.ll"
return parser::Token_NEW;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 275 "java_lexer.ll"
return parser::Token_NULL;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 276 "java_lexer.ll"
return parser::Token_PACKAGE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 277 "java_lexer.ll"
return parser::Token_PRIVATE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 278 "java_lexer.ll"
return parser::Token_PROTECTED;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 279 "java_lexer.ll"
return parser::Token_PUBLIC;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 280 "java_lexer.ll"
return parser::Token_RETURN;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 281 "java_lexer.ll"
return parser::Token_SHORT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 282 "java_lexer.ll"
return parser::Token_STATIC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 283 "java_lexer.ll"
return parser::Token_STRICTFP;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 284 "java_lexer.ll"
return parser::Token_SUPER;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 285 "java_lexer.ll"
return parser::Token_SWITCH;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 286 "java_lexer.ll"
return parser::Token_SYNCHRONIZED;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 287 "java_lexer.ll"
return parser::Token_THIS;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 288 "java_lexer.ll"
return parser::Token_THROW;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 289 "java_lexer.ll"
return parser::Token_THROWS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 290 "java_lexer.ll"
return parser::Token_TRANSIENT;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 291 "java_lexer.ll"
return parser::Token_TRUE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 292 "java_lexer.ll"
return parser::Token_TRY;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 293 "java_lexer.ll"
return parser::Token_VOID;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 294 "java_lexer.ll"
return parser::Token_VOLATILE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 295 "java_lexer.ll"
return parser::Token_WHILE;
	YY_BREAK
/* characters and strings */
case 110:
YY_RULE_SETUP
#line 300 "java_lexer.ll"
return parser::Token_CHARACTER_LITERAL;
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 301 "java_lexer.ll"
{
    _M_parser->report_problem( parser::error,
      std::string("Invalid character literal: ") + yytext );
    return parser::Token_CHARACTER_LITERAL;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 307 "java_lexer.ll"
return parser::Token_STRING_LITERAL;
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 308 "java_lexer.ll"
{
    _M_parser->report_problem( parser::error,
      std::string("Invalid string literal: ") + yytext );
    return parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* identifiers and number literals */
case 114:
YY_RULE_SETUP
#line 317 "java_lexer.ll"
return parser::Token_IDENTIFIER;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 319 "java_lexer.ll"
return parser::Token_INTEGER_LITERAL;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 320 "java_lexer.ll"
return parser::Token_FLOATING_POINT_LITERAL;
	YY_BREAK
/* everything else is not a valid lexeme */
case 117:
YY_RULE_SETUP
#line 325 "java_lexer.ll"
return parser::Token_INVALID;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 327 "java_lexer.ll"
ECHO;
	YY_BREAK
#line 3540 "java_lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 819 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 819 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 818);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 327 "java_lexer.ll"



namespace java
{

void Lexer::restart(parser *parser, char *contents)
{
  _M_parser = parser;
  _M_contents = contents;
  _M_token_begin = _M_token_end = 0;
  _M_current_offset = 0;

  // check for and ignore the UTF-8 byte order mark
  unsigned char *ucontents = (unsigned char *) _M_contents;
  if (ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF)
    {
      _M_token_begin = _M_token_end = 3;
      _M_current_offset = 3;
    }

  yyrestart(NULL);
  BEGIN(INITIAL); // is not set automatically by yyrestart()
}

} // end of namespace java


