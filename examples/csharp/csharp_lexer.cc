
#line 3 "csharp_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 187
#define YY_END_OF_BUFFER 188
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1291] =
    {   0,
        0,    0,   52,   52,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  188,  186,
       48,   49,   49,   14,  186,   42,   36,  186,    1,    2,
       32,   28,    7,   30,    9,   34,  184,   10,    8,   17,
       27,   19,   12,  186,  183,  183,    5,    6,   40,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,    3,   38,    4,
       15,  186,  186,  186,  186,  186,  186,  186,  186,   48,
      186,  186,   52,   54,   54,   53,  151,  151,  150,  150,
      151,  156,  152,  155,  155,  156,  156,  154,  154,  154,

      156,  156,  156,  156,  156,  156,  156,  156,  169,  157,
      168,  168,  162,  169,  165,  166,  169,  169,  169,  167,
      167,  167,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  178,  172,  173,  173,  178,  178,  174,  178,  177,
      177,  178,  178,  178,  178,  178,  178,  178,  178,  179,
      180,  180,  181,  182,  182,  171,  171,  170,  170,  171,
      171,  171,  171,   48,   49,   21,    0,   59,   58,    0,
        0,    0,    0,    0,    0,    0,   43,   22,   37,    0,
       57,    0,    0,    0,    0,    0,    0,    0,   33,   25,
       29,   26,   31,   24,  185,   51,   50,   35,    0,  184,

        0,  185,  184,  184,   11,   44,   18,   16,   20,   46,
       13,    0,  183,    0,    0,    0,    0,    0,    0,    0,
        0,  183,    0,    0,    0,    0,    0,    0,    0,    0,
       41,  183,   62,  183,  183,  183,  183,  183,  183,  183,
      183,  183,   77,  183,  183,  183,  183,  183,  183,  183,
      183,  183,   90,  183,   92,   96,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,   39,   23,  183,  183,    0,    0,
        0,    0,    0,    0,    0,    0,   48,    0,    0,  149,

      149,  149,  149,  149,  149,  149,  149,  149,    0,    0,
        0,    0,    0,    0,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   54,   53,   53,   55,
        0,    0,    0,  150,    0,  152,    0,    0,  155,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,  154,
        0,    0,    0,    0,    0,    0,    0,    0,  154,  154,
      154,  154,    0,    0,    0,    0,    0,    0,    0,    0,
      157,    0,    0,  168,  159,  160,    0,  158,  167,    0,
        0,    0,    0,    0,    0,    0,    0,  167,    0,    0,
        0,    0,    0,    0,    0,    0,  167,  167,  161,  167,

      167,    0,    0,    0,    0,    0,    0,    0,    0,  172,
        0,    0,  173,    0,    0,  174,  177,    0,    0,    0,
        0,    0,    0,    0,    0,  177,    0,    0,    0,    0,
        0,    0,    0,    0,  177,  177,  177,    0,    0,    0,
        0,    0,    0,    0,    0,  179,  180,  181,  182,    0,
        0,    0,    0,  170,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   56,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  185,    0,
       50,  185,    0,  185,  184,  184,   45,   47,    0,   60,

      183,    0,    0,    0,    0,    0,    0,    0,    0,  183,
        0,    0,    0,    0,    0,    0,    0,    0,  183,    0,
        0,    0,    0,    0,    0,    0,    0,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
       87,  183,  183,   93,  183,  183,  183,  100,  183,  183,
      183,  104,  183,  183,  183,  183,  183,  183,  111,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      125,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  149,    0,    0,    0,    0,    0,

        0,    0,    0,  149,  149,  149,  149,  139,  149,  149,
      149,  149,  149,  149,    0,    0,    0,    0,    0,    0,
        0,    0,  149,    0,    0,    0,    0,    0,    0,    0,
        0,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,  154,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,  154,
      154,  154,  154,    0,  167,    0,    0,    0,    0,    0,
        0,    0,    0,  167,    0,    0,    0,    0,    0,    0,
        0,    0,  167,    0,    0,    0,    0,    0,    0,    0,

        0,  167,  167,  167,  167,  175,    0,  177,    0,    0,
        0,    0,    0,    0,    0,    0,  177,    0,    0,    0,
        0,    0,    0,    0,    0,  177,    0,    0,    0,    0,
        0,    0,    0,    0,  177,  177,  177,    0,  149,  149,
      149,  149,  149,  149,  149,  149,  149,    0,    0,    0,
        0,    0,    0,    0,    0,  149,    0,    0,    0,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  185,    0,  185,  183,    0,

        0,    0,    0,    0,    0,    0,    0,  183,  183,  183,
      183,  183,   63,   64,  183,   66,   67,  183,   69,  183,
      183,  183,  183,  183,  183,  183,  183,   79,   80,  183,
      183,  183,  183,  183,  183,  183,   89,  183,  183,   97,
       98,  183,  101,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  122,  183,  124,  183,  127,  183,  183,  183,  183,
      183,  183,  134,  183,  183,  149,    0,    0,    0,    0,
        0,    0,    0,    0,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,    0,    0,    0,

        0,    0,    0,    0,    0,  149,  149,  154,    0,    0,
        0,    0,    0,    0,    0,    0,  154,  154,  154,  154,
      154,  153,  167,    0,    0,    0,    0,    0,    0,    0,
        0,  167,  167,  167,  167,  167,  163,  177,    0,    0,
        0,    0,    0,    0,    0,    0,  177,  177,  177,  177,
      177,  149,    0,    0,    0,    0,    0,    0,    0,    0,
      149,  149,  149,  149,  139,  149,  149,  149,  149,  149,
      149,    0,    0,    0,    0,    0,    0,    0,    0,  149,
        0,    0,    0,    0,    0,    0,    0,    0,  149,  149,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  185,  183,  183,
      183,   65,   68,  183,   71,   72,  183,  183,  183,  183,
      183,   81,  183,   83,  183,   85,   86,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      113,  183,  115,  183,  183,  183,  183,  183,  183,  123,
      183,  128,  183,  183,  183,  132,  183,  183,  136,  149,
      149,  149,  140,  141,  149,  149,  149,  143,  149,  149,
      149,  149,  149,  149,  154,  154,  167,  167,  164,  177,
      177,  177,  149,    0,    0,    0,    0,    0,    0,    0,
        0,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  183,  183,
      183,  183,  183,  183,   78,  183,  183,  183,  183,  183,
      183,  183,  102,  183,  183,  106,  183,  183,  109,  183,
      112,  114,  116,  183,  118,  119,  120,  121,  126,  183,
      130,  131,  183,  183,  149,  142,  149,  144,  149,  149,
      138,  149,  177,  149,  149,  149,  140,  141,  149,  149,
      149,  143,  149,  149,  149,  149,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  183,   70,
      183,   74,   75,  183,  183,   84,   88,  183,  183,  183,

      183,  183,  183,  107,  183,  183,  183,  183,  133,  183,
      137,  149,  144,  148,  146,  149,  176,  149,  142,  149,
      144,  149,  149,  138,  149,    0,    0,    0,    0,    0,
        0,    0,    0,   61,   73,   76,   82,   91,  183,   95,
      183,  103,  105,  183,  110,  183,  183,  135,  149,  148,
      146,  145,  137,  149,  144,  148,  146,  149,    0,    0,
        0,    0,    0,    0,   94,   99,  108,  183,  129,  149,
      145,  149,  148,  146,  145,    0,    0,    0,    0,  117,
      147,  149,  145,    0,    0,  147,  147,    0,  147,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   29,   30,   31,
       32,   32,   32,   32,   32,   33,   34,   32,   32,   32,
       32,   32,   32,   32,   35,   32,   32,   32,   32,   32,
       36,   37,   38,   39,   32,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   32,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,    1,   69,   70,   70,
       70,   70,   70,   71,   69,   69,   69,   69,   69,   72,
       72,   69,   69,   73,   73,   73,   73,   73,   73,   73,
       74,   75,   75,   75,   75,   75,   75,   75,   75,   76,
       76,   76,   76,   77,   77,   77,   77,   77,   77,   77,
       77,   76,   76,   78,   78,   78,   78,   78,   78,   79,
       80,   80,   81,   82,   82,   82,   82,   82,   82,   82,
       82,    1,    1,   83,   84,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   86,   87,   88,   89,   90,   91,   91,
       91,   91,   91,   88,   88,   88,   88,   88,   92,   93,
       94,   94,   94,   95,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[96] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    6,    7,    7,
        1,    1,    1,    1,    1,    1,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    1,    1,    1,    1,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    8,    8,    8,    8,    1,    8,    8,
        8,    8,    1,    1,    1

    } ;

static yyconst flex_int16_t yy_base[1385] =
    {   0,
        0,   94,   94,   96,  100,  108,  126,    0,  221,    0,
      316,    0,  102,  110,  112,  116,  410,  416, 7838,10133,
     7835,10133, 7833, 7811,  441, 7810,   99,  534,10133,10133,
     7809,  401,10133,  405,  105,  409,  418, 7797,10133,  408,
     7793,  415, 7786,  410,  381,  395,10133,10133, 7787,  419,
      401,  499,  501,  506,  521,  434,  529,  466,  508,  457,
      536,  539,  543,  589,  557,  558,  532,10133,  426,10133,
    10133,  562,  584,  591,  605,  618, 7724,  629, 7726,  115,
      710,  637,    0,10133, 7799,  441,10133,  712,10133, 7798,
     7782,10133,  713,10133, 7779, 7763,  691,  700,  739,  396,

      734,  763,  770,  784,  797, 7698,  808, 7702,10133,  716,
    10133, 7775, 7741, 7755,10133,10133, 7741, 7734,  807,  816,
      855,  434, 7687,  840,  854,  872,  886,  899, 7668,  910,
     7672,10133,  731,10133, 7745,    0, 7729,  499,  909,  918,
      953,  942,  977,  949,  991, 1004, 7653, 1015, 7657,    0,
    10133, 7730,    0,10133, 7696, 7690,  609,10133, 7686,10133,
      813,    0, 1094, 7678,10133,10133, 1184,10133,10133, 1277,
     1337, 1030, 1090, 1122, 1136, 1153,10133,10133,10133, 1430,
    10133, 1523, 1583, 1167, 1181, 1228, 1275, 1289,10133,10133,
    10133,10133,10133,10133, 1353,10133,    0,10133,  502, 1418,

     1099,10133,  454,  395,10133, 7629,10133,10133,10133, 7620,
    10133, 7618, 1389, 1413, 1427, 1212, 1474, 1524, 7541, 1535,
     7541, 1537, 1561, 1610, 1247, 1624, 1637, 7527, 1648, 7523,
    10133, 1674, 7538, 7537,  497,  550,  545,  590, 1076,  503,
      679, 1334,  367, 7536,  592,  764,  691,  662,  765,  531,
      881,  975, 7535,  979, 1073, 7534, 1333,  404, 1060,  984,
     1125, 1132, 1162, 1238, 1208, 1345, 1274, 1399, 1256,  864,
     1323,  959, 1338, 1263, 1344, 1275, 1118, 1388, 1389, 1346,
     1407, 1228, 1480, 1402,10133,10133, 7533, 7532, 1663, 1698,
     1469, 1712, 1726, 1677, 1740, 1754,  786,    0,    0, 1753,

     1797, 1518, 1416, 1422,  553, 7544, 1513, 1428, 1777, 1791,
     1568, 1821, 1834, 7501, 1845, 7497, 1844, 1868, 1882, 1798,
     1896, 1909, 7463, 1920, 7467,    0,10133,    0, 1303,10133,
     1557, 7536, 7516,10133, 7529, 2001, 7529, 7513,10133, 7526,
     1922, 1951, 1965, 1972, 1986, 1999, 7447, 2010, 7447, 2009,
     2033, 2047, 2054, 2068, 2081, 7433, 2092, 7429, 2124, 1330,
     7450, 7449, 2107, 2121, 1519, 2148, 2162, 2176, 2185, 2199,
     2014, 7483, 7447,10133,10133,10133, 7460,10133, 2198, 2222,
     2236, 2243, 2257, 2270, 7381, 2281, 7385, 2280, 2304, 2318,
     2325, 2339, 2352, 7379, 2363, 7383, 2395, 1514,10133, 7399,

     7398, 2378, 2392, 2135, 2419, 2433, 2447, 2456, 2470, 2551,
     7444, 7428,10133, 7438, 7434, 1491, 2472, 2501, 2515, 2522,
     2536, 2549, 7355, 2560, 7359, 2559, 2583, 2597, 2604, 2618,
     2631, 7353, 2642, 7355, 2680, 7378, 7377, 2657, 2671, 2406,
     2704, 2718, 2685, 2732, 2746,    0,10133,    0,10133, 7416,
     7416, 7414, 1528,10133, 2827, 2833, 2922, 2829, 3011, 2764,
     3090, 2917, 1454, 3169,  721, 3249, 3342, 3435, 2997, 3003,
     3528, 3621, 3714,10133, 3060, 3807, 2778, 2858, 2980, 3054,
     3068, 3893, 3957, 3155, 3161, 3247, 3138, 3152,10133, 2896,
        0, 3250, 1558, 3277,10133,10133,10133,10133, 7411, 7410,

     2913, 3280, 3294, 2867, 3311, 2997, 7329, 3325, 7333, 3324,
     3412, 3426, 2496, 3466, 3480, 3373, 3497, 3511, 3425, 3525,
     3559, 2800, 3573, 3590, 3604, 3656, 3683, 3682, 1526, 1436,
     1074, 2966, 2977, 1394, 1699, 1577, 2781, 2856,  435, 1407,
     3052, 1584, 3053, 1704, 1514, 1800, 2901, 2961, 3054, 2978,
     3059, 2778, 1891, 3063, 1967, 1534, 3135, 7351, 2056, 3210,
     3046, 7350, 3050, 3118, 3093, 7349, 2245, 2517, 7348, 2902,
     7347, 2327, 3096, 3214, 3057, 3129, 7329, 2972, 3124, 3215,
     7328, 3216, 7327, 1957, 3224, 3225, 3245, 3056, 7326, 3242,
     3258, 2606, 7319, 7318, 3657, 3706, 3749, 3341, 3776, 3762,

     7293, 3790, 7297, 3828, 3256, 3112, 3262, 7328, 3211, 3265,
     3032, 3192, 3267, 7327, 3852, 3866, 3255, 3934, 3971, 3880,
     3985, 3999, 3933, 4013, 4027, 3380, 4041, 4054, 7289, 4065,
     7293, 4064, 4088, 4102, 3398, 4116, 4130, 4144, 4153, 4167,
     7361, 7360, 4166, 4190, 4204, 3606, 4218, 4231, 7281, 4242,
     7285, 4241, 4265, 4279, 3650, 4293, 4307, 4321, 4330, 4344,
     4343, 4367, 4381, 3720, 4395, 4409, 4423, 4432, 4446, 4472,
     3271, 7304, 7303, 7355, 4446, 4470, 4496, 3828, 4510, 4523,
     7262, 4534, 7266, 4533, 4557, 4571, 3724, 4585, 4599, 4613,
     4622, 4636, 4635, 4659, 4673, 3743, 4687, 4701, 4715, 4724,

     4738, 4764, 3273, 7281, 7280,10133, 7328, 4738, 4762, 4788,
     3902, 4802, 4815, 7247, 4826, 7251, 4825, 4849, 4863, 3889,
     4877, 4891, 4905, 4914, 4928, 4927, 4951, 4965, 3920, 4979,
     4993, 5007, 5016, 5030, 5073, 7287, 7286, 5165, 5259, 7264,
     5063, 7262, 7258, 7237, 7248, 7234, 7246, 5258, 5348, 5277,
     5427, 5291, 3232, 5506, 2826, 5570, 5320, 5659, 5328, 5738,
     5367, 3912, 5817, 3374,    0, 5896, 5975, 5343, 6054, 6133,
     5378, 6212, 6291, 5476, 6371, 5051, 5065, 5194, 5387, 5470,
     6448, 5645, 6528, 6621, 6714, 6807, 5651, 5678, 5724, 6884,
     5730, 5757, 5812, 5484, 3242, 5815, 5134,10133, 5288, 5566,

     5799, 5213, 5832, 5846, 5401, 5860, 5874, 5398, 5896, 5905,
     5914, 5928, 7225, 7222, 3689, 7221, 7220, 4497, 7219, 4504,
     3396, 3263, 5328, 4499, 3415,  691, 4796, 7186, 7179, 3552,
     5338, 3368, 5100, 5112, 3937, 3291, 7173, 5355, 7172, 7171,
     7164, 3507, 7163, 5283, 3321, 7160, 5329, 5240, 5105, 5464,
     4789, 7159, 5242, 5437, 5059, 5378, 5463, 5466, 5380, 5345,
     5481, 7158, 5327, 7157, 5438, 7152, 3724, 5471, 5550, 7151,
     4208, 5469, 7150, 5468, 5474, 5937, 5961, 5990, 5498, 6004,
     6018, 6032, 6069, 6083, 6133, 5526, 5548, 5602, 5543, 5605,
     5485, 7157, 5624, 5630, 7156, 7155, 6026, 6097, 6113, 5630,

     6157, 6171, 6185, 6194, 6227, 6226, 6235, 6244, 6268, 6309,
     5641, 6323, 6340, 6282, 6354, 6425, 6424, 6451, 6490, 6499,
     6508, 7158, 6517, 6559, 6573, 5645, 6590, 6604, 6656, 6665,
     6683, 6682, 6691, 6700, 6729, 6778, 7154, 6769, 6802, 6861,
     5655, 6898, 6912, 6875, 6926, 6940, 6939, 6948, 6957, 6966,
     6977, 7069, 7161, 7240, 5747, 7319, 7175, 5569, 7398, 3436,
     7146, 5699, 7146, 7132,    0, 7134, 7146, 7139, 7141, 7122,
        0, 7477, 7556, 5792, 7635, 7714, 7186, 7793, 7872, 7936,
     8025, 8104, 6402, 8183, 8262, 7195, 8341, 8420,    0,    0,
     8500, 8593, 7152, 7181, 7254, 8670, 7260, 7305, 8750, 8843,

     8936, 7311, 9013, 7338, 7384, 7411, 3637, 7414, 7398, 7407,
     7418, 7427, 7436, 7451, 7133, 7132, 5704, 5738, 4043, 5739,
     7131, 7130, 5565, 7129, 5633, 7125, 7016, 5625, 5661, 5736,
     5740, 5550, 5608, 5746, 5747, 5748, 5761, 5794, 5786, 5806,
     7015, 3799, 7010, 3830, 5793, 5803, 5838, 5807, 5913, 7001,
     5297, 6983, 5841, 6875, 5949, 6784, 5918, 5915, 6768, 7477,
     7486, 7512, 6696, 6670, 5957, 5972, 5908, 6669, 5693, 5709,
     6069, 6148, 7495, 7521, 7530, 7556, 7565, 7574, 7583, 7592,
     7601, 7611,    0, 9092, 9171, 6836, 9250, 9329, 7667, 9408,
     9487, 6641, 6612, 6582, 6427, 6533, 6522, 6516, 6496, 6489,

     6417,    0,    0,    0,    0, 7726, 7732, 7779, 7650, 7785,
     7812, 9567, 7858, 7864, 7891, 8011, 8017, 8099, 5967, 6076,
     6425, 6436, 6495, 6502, 6395, 6437, 5372, 6153, 6438, 6505,
     6510, 6511, 6363, 4782, 6155, 6332, 6288, 6520, 6177, 6744,
     6136, 6077, 5964, 6779, 5822, 5804, 5749, 5660, 5549, 6517,
     5528, 5447, 6780, 6781, 6270, 5307, 6788, 6510, 6789, 5273,
     5244, 5224, 6788,    0,    0, 5099,    0,    0, 5073, 4971,
     4857,    0, 4794, 4669, 4576, 4486, 8044, 8092, 8126, 8169,
     8175, 8202, 8248, 8254, 8281, 8327, 8354, 8415, 6552, 4387,
     4285, 4227, 4108, 3977, 6735, 3952, 3867, 6799, 6235, 6865,

     6236, 6789, 3772, 3743, 3706, 6822, 6866, 3679, 3645, 3582,
     3556, 6870, 3531, 6603, 6717, 7019, 3422, 3310,    0, 3263,
     3261, 3154, 3103,    0, 3012, 8360, 8408, 8442, 8488, 8515,
     8521, 8612, 8630, 2976, 2719, 2603, 2538, 2510, 2439, 2324,
     2242, 2168, 2053, 6394, 1960, 6867, 6644, 1888, 6667, 1883,
     1649, 7164,    0, 1570, 6746, 1532, 1510, 1425, 8676, 8769,
     8787, 8862, 8880, 8955, 1398, 1360, 1298, 6752, 1242, 1213,
     1175,  952, 6884, 6885,  941, 8973, 9019, 9078, 9084,  870,
     7165,  766, 6918, 9111, 9157,  648,  562, 9163, 7166,10133,
     9662, 9670, 9678, 9686, 9694, 9702, 9710, 9715, 9717, 9722,

     9730, 9738,  533, 9740,  507, 9742, 9750,  426, 9752, 9760,
     9768, 9776, 9784, 9792, 9800, 9808, 9816, 9824, 9826, 9828,
     9830, 9832, 9840, 9848, 9856, 9864, 9866, 9868, 9876, 9878,
     9880, 9888, 9896, 9898, 9900, 9908, 9916, 9924, 9932, 9940,
     9948, 9956, 9964, 9972, 9974, 9976, 9978, 9980, 9988, 9996,
     9998,10000,10008,10010,10012,10020,10022,10024,10032,10040,
    10048,10056,10058,10060,10062,10064,10066,10068,10070,10072,
    10074,10076,10084,10092,10100,10108,10110,10112,10114,10116,
    10118,10120,10122,10124
    } ;

static yyconst flex_int16_t yy_def[1385] =
    {   0,
     1290,    1, 1291, 1291, 1292, 1292, 1290,    7, 1290,    9,
     1290,   11, 1293, 1293, 1294, 1294, 1295, 1295, 1290, 1290,
     1290, 1290, 1290, 1290, 1296, 1290, 1290, 1297, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1298, 1299, 1299, 1290, 1290, 1290, 1299,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1300, 1301, 1290, 1290, 1302, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1303, 1304, 1304,   99,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1305, 1306,
     1306,  121, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1307, 1290, 1290, 1308, 1309,
     1309, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1310,
     1290, 1290, 1311, 1290, 1290, 1312, 1313, 1290, 1290, 1290,
     1313,   81, 1312, 1290, 1290, 1290, 1314, 1290, 1290, 1315,
     1314,  171,  171,  171,  171,  171, 1290, 1290, 1290, 1316,
     1290, 1316, 1316,  183,  183,  183,  183,  183, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1317, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1318, 1319, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1320, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1320,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232, 1290, 1290,  232,  232, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290,   81,   81, 1321,

     1321,  301,  301,  301,  301,  301,  301,  301, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1322, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1323, 1290, 1324, 1324, 1290,
     1290, 1290, 1290, 1290, 1325, 1290, 1290, 1290, 1290, 1326,
     1327, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1328,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1328,  359,
      359,  359, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1329, 1290, 1330, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1331, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1331,  397, 1290,  397,

      397, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1332, 1333, 1290, 1334, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1335, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1335,  435,  435, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1336, 1290, 1337, 1290, 1338,
     1290, 1338, 1339, 1290, 1339, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1340, 1341, 1340,  468,  468,
     1341, 1341, 1342, 1290, 1342, 1342,  476,  476,  476,  476,
      476,  476,  476,  483,  483,  483,  476,  476, 1290, 1290,
     1343, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1344, 1290,

     1345, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1345,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1346, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1346,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528, 1347, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1347,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1348, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1348, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1349, 1350, 1351, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1351, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1352, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1352,
      670,  670,  670, 1353, 1354, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1354, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1355, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1355,  702,  702,  702, 1290, 1356, 1357, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1357, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1358, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1358,  735,  735, 1290,  738,  739,
      739,  739,  739,  739,  739,  739,  739, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359,  739, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359,  756, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1360, 1360,  775,  775,  775,  775,  775,
      775,  781, 1361, 1361, 1362, 1362,  786,  786,  786,  786,
      786,  786,  786,  790, 1290, 1290, 1290, 1290, 1363, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1363, 1363, 1364,
     1364, 1364,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812, 1365, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1365,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885, 1366, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1366, 1366, 1367, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1367, 1367, 1368, 1368,
     1368,  921, 1369, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1369, 1369, 1370, 1370, 1370,  936, 1371, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1371, 1371, 1372, 1372,
     1372, 1290, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952, 1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,  952,
     1373, 1373, 1373, 1373, 1373, 1373, 1373, 1373,  980,  980,
     1374, 1374,  992,  992,  992,  992,  992,  992, 1375, 1376,

     1376, 1001, 1001, 1001, 1001, 1001, 1290, 1290, 1377, 1377,
     1378, 1378, 1378, 1378, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1379,
     1379, 1379, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1380, 1380, 1381, 1381, 1382, 1382, 1383, 1384,
     1384, 1372,  952, 1373, 1373, 1373, 1373, 1373, 1373, 1373,
     1373,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  980,  980,  992,  992,  992,  996,  992,
      992, 1375, 1001, 1001, 1001, 1001, 1001, 1001, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1082,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  992,  992,  992,  992,
     1112, 1112, 1001, 1001, 1001, 1001, 1001, 1001, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1062, 1062, 1290, 1062, 1062, 1062, 1082,  952,  952,  952,
      952,  952,  952,  952,  952,  992,  992,  992,  992, 1001,
     1001, 1001, 1001, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1062, 1290,
     1290, 1062,  952,  952, 1373,  952,  952,  952,  992,  992,
      992,  992, 1001, 1001, 1014, 1014, 1014, 1014, 1014, 1062,
     1290,  952, 1373, 1373,  952,  992,  992, 1001, 1001, 1014,
     1062,  952, 1373,  992, 1001, 1290,  952,  992, 1373,    0,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290
    } ;

static yyconst flex_int16_t yy_nxt[10229] =
    {   0,
       20,   21,   22,   23,   24,   25,   20,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   45,
       45,   45,   45,   46,   45,   47,   20,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   45,   57,   45,   45,
       58,   46,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   45,   45,   45,   68,   69,   70,   71,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   72,   73,   74,   75,   20,   76,   77,
       78,   79,   20,   20,   20,   80,   84,   85,   84,   85,

       81,   88,   89,   90,  151,  152,   86,  178,   86,   88,
       89,   90,  151,  152,  154,  155,  297,   91,  154,  155,
       82,  298,  179,  195,  195,   91,   92,   93,   94,   95,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   96,   92,   92,   92,   92,   92,   92,
       92,   92,   97,   98,   98,   98,   98,   98,   98,   98,
       98,   92,   92,   92,   92,   98,   98,   98,   98,   98,
       99,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  100,   98,   98,   98,   98,   98,   98,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,  101,
      102,  103,  104,   92,  105,  106,  107,  108,   92,   92,
       92,  109,  110,  111,  112,  113,  109,  109,  109,  114,
      109,  115,  116,  109,  109,  109,  109,  109,  117,  109,
      109,  109,  109,  109,  118,  109,  109,  119,  120,  120,
      120,  120,  120,  120,  120,  120,  109,  109,  109,  109,
      120,  120,  120,  120,  120,  121,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  122,  120,
      120,  120,  120,  120,  120,  109,  123,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  109,  124,  125,  126,  127,  109,  128,
      129,  130,  131,  109,  109,  109,  132,  133,  134,  135,
      132,  136,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  137,  138,  138,  132,  132,  132,  132,
      132,  132,  139,  140,  140,  140,  140,  140,  140,  140,
      140,  132,  132,  132,  132,  140,  140,  140,  141,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  142,

      143,  144,  145,  132,  146,  147,  148,  149,  132,  132,
      132,  157,  158,  159,  190,  212,  160,  161,  158,  159,
      192,  196,  162,  222,  191,  542,  197,  496,  193,  194,
      206,  207,  198,  417,  199,  350,  200,  200,  209,  210,
      234,  222,  163,  168,  168,  496,  169,  201,  202,  285,
      203,  360,  204,  329,  235,  557,  236,  222,  330,  232,
      222,  201,  202,  237,  223,  224,  225,  226,  203,  227,
      228,  229,  230,  388,  222,  233,  204,  170,  223,  224,
      225,  226,  824,  227,  228,  229,  230,  252,  495,  398,
      222,  286,  222,  214,  215,  216,  217,  261,  218,  219,

      220,  221,  223,  224,  225,  226,  222,  227,  228,  229,
      230,  262,  495,  222,  379,  263,  264,  416,  416,  257,
      492,  492,  222,  171,  171,  171,  172,  173,  173,  173,
      173,  173,  173,  174,  175,  176,  181,  181,  238,  222,
      341,  222,  537,  181,  242,  239,  222,  258,  222,  240,
      530,  259,  241,  222,  243,  222,  244,  222,  245,  222,
      248,  222,  222, 1289,  222,  246,  260,  247,  249,  222,
      182,  250,  222,  253,  251,  265,  222,  222,  284,  222,
      254,  255,  268,  269,  550,  256,  270,  222,  222,  271,
      272,  266,  222,  531,  267,  222,  595,  222,  222,  222,

      273,  222,  532,  274,  278,  282,  222,  279,  610,  280,
      453,  283,  451,  281,  222,  450,  183,  183,  183,  184,
      185,  185,  185,  185,  185,  185,  186,  187,  188,  222,
      287,  287,  287,  287,  287,  275,  287,  287,  287,  287,
      287,  287,  212,  287,  276,  222,  533,  534,  222, 1286,
      544,  277,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  290,  291,  292,
      293,  293,  293,  293,  293,  293,  294,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  299,  547,  331,  336,  332,  337,  371,  222,  372,
      318,  319,  320,  321,  451,  322,  323,  324,  325,  333,
      338,  538,  410,  373,  411,  222, 1020,  300,  300,  300,
      300,  300,  300,  300,  300,  546,  222,  222,  412,  300,
      300,  300,  301,  302,  300,  300,  300,  303,  300,  300,
      304,  300,  300,  300,  305,  306,  300,  300,  307,  300,
      308,  300,  300,  300,  342,  343,  344,  345,  359,  346,
      347,  348,  349,  351,  352,  353,  354,  297,  355,  356,
      357,  358,  298,  309,  310,  311,  312,  773,  313,  314,

      315,  316,  361,  361,  361,  361,  361,  545,  361,  361,
      361,  361,  361,  361,  455,  361,  451,  548, 1287,  456,
      222,  222,  351,  352,  353,  354,  549,  355,  356,  357,
      358,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  364,  365,  366,  367,
      367,  367,  367,  367,  367,  368,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      380,  381,  382,  383,  397,  384,  385,  386,  387,  389,

      390,  391,  392,  572,  393,  394,  395,  396,  400,  400,
      400,  400,  400,  222,  400,  400,  400,  400,  400,  400,
      222,  400,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  551,  222,  389,  390,
      391,  392, 1283,  393,  394,  395,  396,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  403,  404,
      405,  406,  406,  406,  406,  406,  406,  407,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  418,  419,  420,  421,  435,  422,  423,  424,

      425,  427,  428,  429,  430, 1282,  431,  432,  433,  434,
      436,  436,  436,  436,  436,  222,  436,  436,  436,  436,
      436,  436,  574,  436,  438,  438,  438,  438,  438,  438,
      438,  222,  552,  553,  559,  222,  427,  428,  429,  430,
      222,  431,  432,  433,  434,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  439,  440,  441,  442,  442,  442,  442,
      442,  442,  443,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  451,  167,  167,

      167,  167,  167,  167,  167,  171,  171,  171,  171,  171,
      171,  171,  493,  815,  493,  535,  222,  494,  494,  536,
      558,  457,  457,  457,  457,  457,  457,  457,  457,  222,
      554,  222,  222,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  582,  560,  222,  561, 1271,  458,  459,  460,
      461,  222,  462,  463,  464,  465,  168,  168,  222,  169,
      167,  167,  167,  167,  472,  472,  472,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  222,  562,
      170,  472,  472,  472,  472,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  473,  473,  473,  473,  473,
      473,  473,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  564,  222, 1281,  171,  171,  171,  172,
      173,  173,  173,  173,  173,  173,  174,  175,  176,  168,
      168,  563,  167,  589,  222,  222,  467,  511,  511,  511,
      511,  511,  511,  511,  222,  467,  473,  473,  473,  473,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      577,  468,  222,  167,  567,  329,  467,  467,  571,  222,
      330,  467,  520,  520,  520,  520,  520,  520,  520,  467,
      222,  222,  467,  580,  467,  469,  467,  581,  470,  168,
      168,  222,  169,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  195,  195,  170,  555,  539,  573,  575,  540,  222,
      350,  489,  490,  489,  541,  556,  489,  585,  671,  222,
      222,  578,  565,  576,  222,  489,  490,  489,  566,  579,

      222,  222,  586,  222,  489,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  171,
      171,  171,  172,  173,  173,  173,  173,  173,  173,  174,
      175,  176,  181,  181,  199,  818,  200,  200,  568,  474,
      583,  222,  584,  569,  222,  222,  825,  201,  202,  592,
      203,  222,  204,  587,  588,  222,  570,  451,  222,  595,
      608,  201,  202,  222,  222,  595,  475,  613,  203,  609,
     1275,  595,  502,  503,  504,  505,  204,  506,  507,  508,
      509,  213,  213,  213,  213,  213,  814,  213,  213,  213,
      213,  213,  213,  222,  213,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  416,
      416, 1274,  476,  476,  476,  477,  478,  478,  478,  478,
      478,  478,  479,  480,  481,  181,  181,  590,  482,  453,
      591,  451,  180, 1273,  450,  772,  222,  593,  593,  593,
      593,  482,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  595,  483,  331,  180,
      332,  595,  482,  482,  388,  612,  830,  482,  605,  813,
      606,  222,  703,  607,  333,  482,  494,  494,  482,  841,
      482,  484,  482,  222,  485,  181,  181,  672,  672,  672,
      672,  222,  474,  512,  513,  514,  515,  515,  515,  515,

      515,  515,  516,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517, 1272,  820,  475,
      223,  224,  225,  226,  827,  227,  228,  229,  230,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  615,  615,  615,  615,  615,  615,  615,
     1251,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  476,  476,  476,  477,  478,
      478,  478,  478,  478,  478,  479,  480,  481,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  521,  522,  523,  524,
      524,  524,  524,  524,  524,  525,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      528,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  819,  829,  222,  223,  224,  225,
      226,  222,  227,  228,  229,  230,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  596,  597,  598,  599,
      604,  600,  601,  602,  603,  300,  300,  300,  300,  300,
      831,  300,  300,  300,  300,  300,  300,  222,  300,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  633,  633,  633,  633,  633,  633,  633,
      596,  597,  598,  599, 1250,  600,  601,  602,  603,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,

      615,  615,  615,  616,  617,  618,  619,  619,  619,  619,
      619,  619,  620,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  624,  625,  626,
      627,  222,  628,  629,  630,  631,  317,  317,  317,  317,
      317,  838,  317,  317,  317,  317,  317,  317,  222,  317,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  634,  635,
      636,  637,  637,  637,  637,  637,  637,  638,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  336,  222,  337,  644,  645,  646,  647,  867,
      648,  649,  650,  651,  222,  371,  840,  372,  338,  341,
      341,  341,  341,  341,  222,  341,  341,  341,  341,  341,
      341,  373,  341,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  654,  655,
      656,  657,  657,  657,  657,  657,  657,  658,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  351,  352,  353,  354,  222,  355,  356,  357,

      358,  350,  350,  350,  350,  350,  843,  350,  350,  350,
      350,  350,  350,  222,  350,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      663,  664,  665,  666,  666,  666,  666,  666,  666,  667,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  670,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  704,  704,  704,  704,  351,  352,  353,
      354,  222,  355,  356,  357,  358,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  676,  677,  678,  679, 1266,  680,  681,  682,  683,
      379,  379,  379,  379,  379,  850,  379,  379,  379,  379,

      379,  379,  222,  379,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  686,
      687,  688,  689,  689,  689,  689,  689,  689,  690,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  389,  390,  391,  392,  222,  393,  394,
      395,  396,  388,  388,  388,  388,  388,  854,  388,  388,
      388,  388,  388,  388,  222,  388,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  695,  696,  697,  698,  698,  698,  698,  698,  698,
      699,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  702,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  736,  736,  736,  736,  389,  390,
      391,  392, 1265,  393,  394,  395,  396,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  410,  222,  411,  709,  710,  711,  712,  851,
      713,  714,  715,  716,  808,  808,  808,  808,  412,  417,
      417,  417,  417,  417,  222,  417,  417,  417,  417,  417,
      417,  222,  417,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  718,  718,  718,

      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  719,  720,
      721,  722,  722,  722,  722,  722,  722,  723,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  427,  428,  429,  430,  222,  431,  432,  433,
      434,  426,  426,  426,  426,  426,  875,  426,  426,  426,
      426,  426,  426,  222,  426,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      728,  729,  730,  731,  731,  731,  731,  731,  731,  732,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  735,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  222,  427,  428,  429,  430,  451,  431,  432,
      433,  434,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  455,  451,
      451,  837,  451,  456,  738,  222,  451,  821,  222,  766,
      766,  766,  766,  766,  766,  766,  473,  473,  473,  473,
      473,  473,  473,  476,  476,  476,  476,  476,  476,  476,
      739,  739,  739,  739,  739,  739,  739,  739,  810,  810,
      810,  810,  739,  739,  739,  740,  741,  739,  739,  739,
      742,  739,  739,  743,  739,  739,  739,  744,  745,  739,
      739,  746,  739,  747,  739,  739,  739,  457,  457,  457,

      457,  457,  979,  457,  457,  457,  457,  457,  457,  795,
      457,  795,  822,  823,  796,  796,  748,  749,  750,  751,
      451,  752,  753,  754,  755,  451,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      756,  756,  800,  800,  800,  800,  800,  800,  800,  756,
      756,  756,  756,  756,  756,  756,  756,  832,  222,  222,
      852,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  767,  768,  769,  770,
      770,  770,  770,  770,  770,  771,  502,  503,  504,  505,

      833,  506,  507,  508,  509,  757,  758,  759,  760,  816,
      761,  762,  763,  764,  451,  782,  782,  835,  222,  222,
      817,  783,  783,  222,  782,  782,  782,  782,  862,  222,
      783,  783,  783,  783,  222,  222,  782,  782,  782,  782,
      782,  782,  783,  783,  783,  783,  783,  783,  473,  473,
      473,  473,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  181,  181, 1258,  785,  801,  802,  803,  804,
      804,  804,  804,  804,  804,  805,  595,  892,  785,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  451,  786,  826,  828,  834,  857,  785,

      785,  845,  836,  222,  785,  846,  839,  222,  871,  222,
      222,  222,  785,  222,  858,  785,  222,  785,  787,  785,
      222,  788,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      222,  855,  848,  222,  888, 1257,  595,  847,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  451,  792,  792,  222,  859,  863,  842,  793,
      793,  222,  792,  792,  792,  792,  222,  860,  793,  793,
      793,  793,  222, 1256,  792,  792,  792,  792,  792,  792,

      793,  793,  793,  793,  793,  793,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  893,  451,  595,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  168,  168,  844,  168,  595,  474,  856,  864,  865,
      796,  796, 1255,  890,  869,  473,  473,  222,  492,  492,
      868,  222,  222,  222,  473,  473,  473,  473,  202,  797,
      202,  222,  222,  202,  873,  774,  473,  473,  473,  473,
      473,  473,  202,  797,  202,  494,  494,  874,  870,  222,

      595,  202,  222,  886,  891,  798,  595,  798, 1254,  595,
      798,  595,  887,  978,  922,  222,  937,  889,  222,  798,
     1016,  798,  894,  895,  895,  895,  895,  350,  798,  388,
     1028,  775,  775,  775,  776,  777,  777,  777,  777,  777,
      777,  778,  779,  780,  168,  168,  222,  169,  501,  501,
      501,  501,  501, 1253,  501,  501,  501,  501,  501,  501,
     1033,  501,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  222,  451,  170,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806,  502,  503,  504,
      505, 1024,  506,  507,  508,  509,  877,  877,  877,  877,
      877,  877,  877,  222,  171,  171,  171,  172,  173,  173,
      173,  173,  173,  173,  174,  175,  176,  168,  168,  451,
      168,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      988,  222, 1015,  781,  781,  898,  898,  898,  898,  898,
      898,  898,  781,  781,  781,  781,  906,  906,  906,  906,
      222,  774,  426, 1019,  781,  781,  781,  781,  781,  781,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  808,  808,  808,  808,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  808,  223,  224,
      225,  226, 1091,  227,  228,  229,  230,  775,  775,  775,
      776,  777,  777,  777,  777,  777,  777,  778,  779,  780,
      168,  168, 1213,  169,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  222, 1031,  170,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  519,  519,  519,  519,  519,  519,  519,

      519,  519,  519,  519,  519,  519,  519,  222,  595, 1022,
      171,  171,  171,  172,  173,  173,  173,  173,  173,  173,
      174,  175,  176,  168,  168, 1248,  169,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222, 1008, 1008,  170,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  909,  909,  909,  909,  909,  909,  909,  222,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  171,  171,  171,  172,  173,  173,  173,
      173,  173,  173,  174,  175,  176,  181,  181,  917,  917,
      917,  917, 1247,  181,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222, 1012,  812,
      596,  597,  598,  599,  222,  600,  601,  602,  603, 1244,
      475,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  223,  224,  225,  226, 1052,
      227,  228,  229,  230,  595,  595,  595,  595,  595,  222,
      595,  595,  595,  595,  595,  595,  222,  595,  919,  919,
      919,  919,  932,  932,  932,  932,  476,  476,  476,  477,

      478,  478,  478,  478,  478,  478,  479,  480,  481,  181,
      181,  934,  934,  934,  934, 1243,  181,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  878,  879,  880,  881,  881,  881,  881,  881,  881,
      882, 1142,  222,  475,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  885,  222, 1143,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  476,
      476,  476,  477,  478,  478,  478,  478,  478,  478,  479,

      480,  481,  474,  924,  924,  924,  924,  924,  924,  924,
      222,  596,  597,  598,  599,  451,  600,  601,  602,  603,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  947,  947,  947,
      947,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  791,  791,  939,  939,  939,
      939,  939,  939,  939,  791,  791,  791,  791,  949,  949,
      949,  949,  222,  987, 1027,  222,  791,  791,  791,  791,

      791,  791,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  624,  625,  626,  627,
     1236,  628,  629,  630,  631,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  623,  623,  623,  623,  623,  222,  623,  623,  623,
      623,  623,  623, 1123,  623,  897,  897,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  897,  897,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  899,  900,  901,  902,  902,  902,  902,
      902,  902,  903,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  624,  625,  626,
      627,  222,  628,  629,  630,  631,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  907,  907,

      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  644,
      645,  646,  647, 1056,  648,  649,  650,  651,  643,  643,
      643,  643,  643,  222,  643,  643,  643,  643,  643,  643,
      222,  643,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,

      910,  911,  912,  913,  913,  913,  913,  913,  913,  914,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  644,  645,  646,  647, 1235,  648,
      649,  650,  651,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  351,  352,  353,  354,
      222,  355,  356,  357,  358,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  921,  676,
      677,  678,  679, 1225,  680,  681,  682,  683,  675,  675,
      675,  675,  675, 1013,  675,  675,  675,  675,  675,  675,
     1018,  675,  222, 1014,  222,  351,  352,  353,  354,  222,
      355,  356,  357,  358,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  925,  926,  927,  928,  928,  928,  928,  928,

      928,  929,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  676,  677,  678,  679,
     1224,  680,  681,  682,  683,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  389,  390,
      391,  392, 1223,  393,  394,  395,  396,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      936,  709,  710,  711,  712,  222,  713,  714,  715,  716,
      708,  708,  708,  708,  708, 1202,  708,  708,  708,  708,
      708,  708, 1039,  708,  222, 1222, 1021,  389,  390,  391,
      392,  222,  393,  394,  395,  396,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  940,  941,  942,  943,  943,  943,
      943,  943,  943,  944,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  709,  710,
      711,  712, 1221,  713,  714,  715,  716,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,

      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      427,  428,  429,  430, 1220,  431,  432,  433,  434,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  951,  962,  222,  963, 1043, 1219,  964,  466,
      466,  466,  466,  466,  466,  466,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775, 1007, 1037, 1007,
     1025, 1218, 1008, 1008, 1026,  222,  427,  428,  429,  430,
      222,  431,  432,  433,  434,  450,  738,  222,  451,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  739,  739,  739,  739,  739,  739,  739,  739,

      450,  450,  450,  450,  739,  739,  739,  740,  741,  739,
      739,  739,  742,  739,  739,  743,  739,  739,  739,  744,
      745,  739,  739,  746,  739,  747,  739,  739,  739,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  748,  749,
      750,  751,  450,  752,  753,  754,  755,  450,  450,  450,
      450,  451,  466,  466,  466,  466,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996, 1216,  952,  952, 1036,
      451, 1009, 1009, 1009, 1009, 1041,  952,  952,  952,  952,
      952,  952,  952,  952,  451,  222,  595,  222,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  451, 1032, 1215,  739,  739,  739,  739,
      739,  451,  739,  739,  739,  739,  739,  739,  222,  739,
      222, 1149,  953,  954,  955,  956,  451,  957,  958,  959,
      960,  451,  972,  972,  972,  972,  972,  972,  972,  595,
      973,  974,  975,  976,  976,  976,  976,  976,  976,  977,
      451,  502,  503,  504,  505, 1017,  506,  507,  508,  509,
     1035,  451,  222,  222,  222, 1023, 1048, 1050,  756,  756,
      756,  756,  756,  222,  756,  756,  756,  756,  756,  756,

      222,  756, 1029,  981,  981,  981,  981,  981,  981,  981,
      222,  989,  989,  989,  989,  222,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      451, 1044, 1047,  222, 1196,  222,  982,  983,  984,  985,
      985,  985,  985,  985,  985,  986,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,  168,  168,
     1042,  502,  503,  504,  505,  991,  506,  507,  508,  509,
      222, 1051,  222,  222,  991,  972,  972,  972,  972,  972,

      972,  972,  972,  972,  972,  972,  972,  972,  972,  451,
      992, 1038, 1045, 1046, 1053,  991,  991, 1059,  222,  222,
      991,  222, 1049,  222,  222, 1058,  222, 1057,  991,  222,
     1069,  991,  595,  991,  993,  991,  222,  994,  996,  996,
      996,  996,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486, 1060, 1060, 1060, 1060,
     1063,  222,  451,  595,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  756,  756,
      595, 1064,  222,  222, 1054,  595, 1067,  756,  756,  756,

      756,  756,  756,  756,  756,  222, 1126, 1133,  222,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799, 1068, 1065,
     1090,  222,  595,  757,  758,  759,  760, 1066,  761,  762,
      763,  764,  451,  998,  998, 1134, 1128, 1071,  222, 1001,
     1001,  595,  998,  998,  998,  998,  222,  595, 1001, 1001,
     1001, 1001, 1072, 1127,  998,  998,  998,  998,  998,  998,
     1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1073, 1073,

     1073, 1073, 1129,  222,  222, 1002, 1002, 1002, 1002, 1075,
     1075, 1075, 1075, 1077, 1077, 1077, 1077, 1002, 1002, 1002,
     1002, 1002, 1002, 1080, 1080, 1080, 1080,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  451,  473,  473, 1159,  595, 1093,  222, 1004, 1004,
      451,  473,  473,  473,  473, 1094, 1121, 1004, 1004, 1004,
     1004,  595, 1160,  473,  473,  473,  473,  473,  473, 1004,
     1004, 1004, 1004, 1004, 1004, 1005, 1005, 1122, 1124,  222,
     1130,  222,  222,  222, 1005, 1005, 1005, 1005, 1131,  222,
      222,  222,  222, 1135, 1132,  451, 1005, 1005, 1005, 1005,

     1005, 1005, 1138, 1136,  222, 1137,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      451,  474, 1084, 1084, 1084, 1084, 1084, 1084, 1084,  222,
     1006, 1006, 1144,  796,  796, 1139,  222,  222, 1140, 1006,
     1006, 1006, 1006,  489, 1145,  489,  222,  222,  489,  222,
      222, 1006, 1006, 1006, 1006, 1006, 1006,  489, 1141,  489,
     1102, 1102, 1102, 1102, 1147,  222,  489, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009,  222, 1150, 1146,  222,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  451,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  222, 1153,  222, 1148,
      595,  222, 1154, 1158,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  451,  502,
      503,  504,  505, 1011,  506,  507,  508,  509,  223,  224,
      225,  226,  222,  227,  228,  229,  230,  223,  224,  225,

      226, 1156,  227,  228,  229,  230, 1152,  222, 1189,  595,
      222,  223,  224,  225,  226, 1157,  227,  228,  229,  230,
      596,  597,  598,  599,  595,  600,  601,  602,  603,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  451, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,

     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,  624,
      625,  626,  627, 1161,  628,  629,  630,  631, 1190,  222,
      222,  595,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  451,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  222,
     1062, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1162,  222, 1203,  222, 1197,

      595,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  451,  596,  597,  598,  599,
      222,  600,  601,  602,  603,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623, 1239, 1241,  222,  222,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  451,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  624,
      625,  626,  627, 1211,  628,  629,  630,  631,  624,  625,
      626,  627,  595,  628,  629,  630,  631,  644,  645,  646,
      647, 1204,  648,  649,  650,  651,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  168,  168,  222,  168, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  451,  222,  774, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643, 1267,  222,  222,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  775,  775,  775,  776,  777,  777,  777,
      777,  777,  777,  778,  779,  780,  997,  997,  222, 1176,
     1104, 1104, 1104, 1104, 1169,  997,  997,  997,  997,  222,
      222,  222, 1170, 1191, 1195, 1198, 1192,  997,  997,  997,
      997,  997,  997,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  644,  645,  646,
      647, 1213,  648,  649,  650,  651,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      168,  168, 1175,  169,  644,  645,  646,  647,  222,  648,
      649,  650,  651, 1174, 1199,  222,  999,  999,  222, 1200,
     1201,  922, 1193,  222,  222,  999,  999,  999,  999, 1194,
      222, 1173,  595,  222,  170, 1172, 1208,  999,  999,  999,
      999,  999,  999,  351,  352,  353,  354, 1205,  355,  356,
      357,  358,  351,  352,  353,  354, 1171,  355,  356,  357,
      358,  351,  352,  353,  354,  222,  355,  356,  357,  358,

      676,  677,  678,  679, 1250,  680,  681,  682,  683, 1234,
      171,  171,  171,  172,  173,  173,  173,  173,  173,  173,
      174,  175,  176,  168,  168, 1168,  169,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077,  595, 1167,  170,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1269,  222, 1166,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  171,  171,  171,  172,  173,  173,  173,
      173,  173,  173,  174,  175,  176,  181,  181, 1251,  595,
     1270,  595,  595,  181, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675, 1255,  595,  451,
      475,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  676,  677,  678,  679,  595,
      680,  681,  682,  683,  676,  677,  678,  679,  222,  680,
      681,  682,  683,  389,  390,  391,  392,  222,  393,  394,
      395,  396, 1237, 1280, 1206,  222,  476,  476,  476,  477,

      478,  478,  478,  478,  478,  478,  479,  480,  481,  181,
      181,  222,  389,  390,  391,  392,  181,  393,  394,  395,
      396, 1079,  222,  222,  222, 1000, 1000,  222, 1214, 1207,
     1209, 1210,  222, 1212, 1000, 1000, 1000, 1000,  426,  451,
      595,  595,  222,  475, 1242, 1217, 1000, 1000, 1000, 1000,
     1000, 1000,  709,  710,  711,  712, 1238,  713,  714,  715,
      716,  389,  390,  391,  392,  222,  393,  394,  395,  396,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938, 1245, 1273, 1274,  451,  451,  476,
      476,  476,  477,  478,  478,  478,  478,  478,  478,  479,

      480,  481,  473,  473, 1164, 1164, 1164, 1164,  222,  222,
      222,  473,  473,  473,  473, 1240, 1246, 1249, 1151, 1283,
     1268,  451,  595,  473,  473,  473,  473,  473,  473, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  709,  710,  711,  712,  222,  713,  714,  715,
      716,  709,  710,  711,  712, 1082,  713,  714,  715,  716,
      427,  428,  429,  430,  222,  431,  432,  433,  434,  427,
      428,  429,  430,  222,  431,  432,  433,  434,  222,  222,
      427,  428,  429,  430, 1252,  431,  432,  433,  434,  450,
      450,  595,  451,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  952,  952,  450,
      450,  450,  450,  450,  450,  450,  952,  952,  952,  952,

      952,  952,  952,  952,  450,  450,  450,  450,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  953,  954,  955,  956,  450,  957,  958,  959,
      960,  450,  450,  450,  451, 1271, 1286, 1289,  222,  451,
     1107, 1107,  222,  222, 1125,  222,  222, 1101,  451, 1107,
     1107, 1107, 1107, 1100, 1099, 1098, 1097, 1096, 1095,  451,
     1092, 1107, 1107, 1107, 1107, 1107, 1107,  388,  451, 1108,

     1108,  350,  595,  595, 1070,  222, 1055,  222, 1108, 1108,
     1108, 1108,  222,  222, 1040, 1034,  595,  595,  222,  222,
     1108, 1108, 1108, 1108, 1108, 1108,  222, 1030,  222,  952,
      952,  952,  952,  952,  222,  952,  952,  952,  952,  952,
      952,  222,  952,  451, 1085, 1086, 1087, 1088, 1088, 1088,
     1088, 1088, 1088, 1089, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105,  466,  466,  222,  222,  222,  222, 1110, 1110,
      222,  466,  466,  466,  466,  970,  969, 1110, 1110, 1110,
     1110,  968,  967,  466,  466,  466,  466,  466,  466, 1110,

     1110, 1110, 1110, 1110, 1110,  966,  965,  961, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,  451, 1111, 1111,  426,  426,  946,  945, 1115,
     1115,  411, 1111, 1111, 1111, 1111,  388,  388, 1115, 1115,
     1115, 1115,  931,  930, 1111, 1111, 1111, 1111, 1111, 1111,
     1115, 1115, 1115, 1115, 1115, 1115, 1116, 1116,  372,  350,
      350,  916,  915,  337,  332, 1116, 1116, 1116, 1116,  905,
      904,  595,  595,  884,  883,  222,  222, 1116, 1116, 1116,
     1116, 1116, 1116,  872,  866,  222,  861, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084,  451, 1117, 1117,  853,  222,  849,  222,  222,  807,
      806, 1117, 1117, 1117, 1117,  499,  500,  451,  454,  451,
      474,  426,  426, 1117, 1117, 1117, 1117, 1117, 1117, 1118,
     1118,  734, 1008, 1008,  733,  725,  724,  411, 1118, 1118,
     1118, 1118,  202,  706,  202,  415,  413,  202,  388,  388,
     1118, 1118, 1118, 1118, 1118, 1118,  202, 1119,  202,  701,
      700,  692,  691,  372,  377,  202, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
      451,  502,  503,  504,  505,  374,  506,  507,  508,  509,
      502,  503,  504,  505, 1120,  506,  507,  508,  509,  350,

      350,  223,  224,  225,  226,  669,  227,  228,  229,  230,
      223,  224,  225,  226,  668,  227,  228,  229,  230,  223,
      224,  225,  226,  660,  227,  228,  229,  230,  659,  337,
      340,  339,  332,  335,  223,  224,  225,  226,  334,  227,
      228,  229,  230,  640,  639,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  451,
      596,  597,  598,  599, 1155,  600,  601,  602,  603,  596,
      597,  598,  599,  622,  600,  601,  602,  603,  624,  625,
      626,  627,  621,  628,  629,  630,  631,  611,  222,  222,
      222,  222,  543,  529,  222,  596,  597,  598,  599,  527,

      600,  601,  602,  603,  624,  625,  626,  627,  526,  628,
      629,  630,  631,  644,  645,  646,  647,  518,  648,  649,
      650,  651,  517,  500, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,  451,  644,
      645,  646,  647,  498,  648,  649,  650,  651,  676,  677,
      678,  679,  497,  680,  681,  682,  683,  676,  677,  678,
      679, 1163,  680,  681,  682,  683,  389,  390,  391,  392,
      451,  393,  394,  395,  396,  709,  710,  711,  712,  164,
      713,  714,  715,  716,  709,  710,  711,  712,  454,  713,
      714,  715,  716,  451,  427,  428,  429,  430,  449,  431,

      432,  433,  434,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  451,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  447,  445,  444, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1177, 1177,  415,  413,  409,  408,
     1178, 1178,  399, 1177, 1177, 1177, 1177,  378,  377, 1178,
     1178, 1178, 1178,  376,  375, 1177, 1177, 1177, 1177, 1177,
     1177, 1178, 1178, 1178, 1178, 1178, 1178,  374,  370,  369,
      340,  339, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1103, 1103, 1103,  451, 1179, 1179,  335,

      334,  327,  296, 1180, 1180,  295, 1179, 1179, 1179, 1179,
      231,  211, 1180, 1180, 1180, 1180,  208,  205, 1179, 1179,
     1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180, 1180,
     1181, 1181,  189,  177,  166,  165,  164, 1290, 1290, 1181,
     1181, 1181, 1181, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1181, 1181, 1181, 1181, 1181, 1181, 1290, 1290, 1290,
     1290,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  451, 1183, 1183, 1290, 1290,
     1290, 1290, 1184, 1184, 1290, 1183, 1183, 1183, 1183, 1290,
     1290, 1184, 1184, 1184, 1184, 1290, 1290, 1183, 1183, 1183,

     1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184, 1185,
     1185, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1185, 1185,
     1185, 1185, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1185, 1185, 1185, 1185, 1185, 1185, 1290, 1290, 1290, 1290,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  756,  756, 1290, 1290, 1290, 1290,
     1290, 1290, 1290,  756,  756,  756,  756,  756,  756,  756,
      756, 1290, 1290, 1290, 1290,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,  757,
      758,  759,  760, 1290,  761,  762,  763,  764,  451, 1186,
     1186, 1290, 1290, 1290, 1290, 1187, 1187, 1290, 1186, 1186,
     1186, 1186, 1290, 1290, 1187, 1187, 1187, 1187, 1290, 1290,
     1186, 1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187,
     1187, 1187, 1226, 1226, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1226, 1226, 1226, 1226, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1226, 1226, 1226, 1226, 1226, 1226, 1290,
     1290, 1290, 1290,  980,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  451,  474, 1290,
     1227, 1227, 1290, 1290, 1290, 1290, 1290, 1188, 1188, 1227,
     1227, 1227, 1227, 1290, 1290, 1290, 1188, 1188, 1188, 1188,
     1290, 1227, 1227, 1227, 1227, 1227, 1227, 1290, 1188, 1188,
     1188, 1188, 1188, 1188, 1228, 1228, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1228, 1228, 1228, 1228, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1228, 1228, 1228, 1228, 1228,
     1228, 1290, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104,  451, 1229, 1229, 1290,
     1290, 1290, 1290,  167,  167, 1290, 1229, 1229, 1229, 1229,

     1290, 1290,  167,  167,  167,  167, 1290, 1290, 1229, 1229,
     1229, 1229, 1229, 1229,  167,  167,  167,  167,  167,  167,
      167,  167, 1290, 1290, 1290, 1290, 1290, 1290, 1290,  167,
      167,  167,  167, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290,  167,  167,  167,  167,  167,  167, 1290, 1290, 1290,
     1290,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  451, 1230, 1230, 1290, 1290,
     1290, 1290, 1231, 1231, 1290, 1230, 1230, 1230, 1230, 1290,
     1290, 1231, 1231, 1231, 1231, 1290, 1290, 1230, 1230, 1230,
     1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231, 1231, 1232,

     1232, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1232, 1232,
     1232, 1232, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1232, 1232, 1232, 1232, 1232, 1232, 1290, 1290, 1290, 1290,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105,  451, 1233, 1233, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1233, 1233, 1233, 1233, 1290, 1290,
     1290, 1290, 1290,  474, 1290, 1290, 1233, 1233, 1233, 1233,
     1233, 1233,  473,  473, 1290, 1290, 1290, 1290, 1259, 1259,
     1290,  473,  473,  473,  473, 1290, 1290, 1259, 1259, 1259,
     1259, 1290, 1290,  473,  473,  473,  473,  473,  473, 1259,

     1259, 1259, 1259, 1259, 1259, 1290, 1290, 1290, 1290,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  451,  474, 1290, 1260, 1260, 1290, 1290,
     1290, 1290, 1290,  473,  473, 1260, 1260, 1260, 1260, 1290,
     1290, 1290,  473,  473,  473,  473, 1290, 1260, 1260, 1260,
     1260, 1260, 1260, 1290,  473,  473,  473,  473,  473,  473,
     1261, 1261, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1261,
     1261, 1261, 1261, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1261, 1261, 1261, 1261, 1261, 1261, 1290,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,

      756,  756,  168,  168, 1290,  168, 1262, 1262, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1262, 1262, 1262, 1262, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1262, 1262, 1262,
     1262, 1262, 1262, 1263, 1263, 1290,  774, 1290, 1290,  473,
      473, 1290, 1263, 1263, 1263, 1263, 1290, 1290,  473,  473,
      473,  473, 1290, 1290, 1263, 1263, 1263, 1263, 1263, 1263,
      473,  473,  473,  473,  473,  473, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290,  775,  775,  775,  776,  777,  777,  777,  777,
      777,  777,  778,  779,  780,  168,  168, 1290,  168, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1106, 1106, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1106, 1106, 1106, 1106, 1290, 1290, 1290, 1290, 1290,  774,
      473,  473, 1106, 1106, 1106, 1106, 1106, 1106, 1290,  473,
      473,  473,  473, 1290, 1290, 1290, 1290, 1290, 1264, 1264,
     1290,  473,  473,  473,  473,  473,  473, 1264, 1264, 1264,
     1264, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1264,
     1264, 1264, 1264, 1264, 1264,  775,  775,  775,  776,  777,
      777,  777,  777,  777,  777,  778,  779,  780,  466,  466,
     1290, 1290, 1290, 1290, 1276, 1276, 1290,  466,  466,  466,

      466, 1290, 1290, 1276, 1276, 1276, 1276, 1290, 1290,  466,
      466,  466,  466,  466,  466, 1276, 1276, 1276, 1276, 1276,
     1276, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109,  168,  168, 1290,  169, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1112, 1112,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1112, 1112, 1112,
     1112, 1290, 1290, 1290, 1290, 1290,  170,  466,  466, 1112,
     1112, 1112, 1112, 1112, 1112, 1290,  466,  466,  466,  466,

     1290, 1290, 1290, 1290, 1290,  466,  466, 1290,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290,  466,  466,  466,  466,
      466,  466,  171,  171,  171,  172,  173,  173,  173,  173,
      173,  173,  174,  175,  176,  181,  181, 1290, 1290, 1290,
     1290, 1290,  181, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1113, 1113, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1113, 1113, 1113, 1113, 1290, 1290, 1290, 1290, 1290,  475,
     1277, 1277, 1113, 1113, 1113, 1113, 1113, 1113, 1290, 1277,
     1277, 1277, 1277, 1290, 1290, 1290, 1290, 1290, 1278, 1278,

     1290, 1277, 1277, 1277, 1277, 1277, 1277, 1278, 1278, 1278,
     1278, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1278,
     1278, 1278, 1278, 1278, 1278,  476,  476,  476,  477,  478,
      478,  478,  478,  478,  478,  479,  480,  481,  181,  181,
     1290, 1290, 1290, 1290, 1290,  181, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1114, 1114, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1114, 1114, 1114, 1114, 1290, 1290, 1290,
     1290, 1290,  475, 1279, 1279, 1114, 1114, 1114, 1114, 1114,
     1114, 1290, 1279, 1279, 1279, 1279, 1290, 1290, 1290, 1290,
     1290, 1284, 1284, 1290, 1279, 1279, 1279, 1279, 1279, 1279,

     1284, 1284, 1284, 1284, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1284, 1284, 1284, 1284, 1284, 1284,  476,  476,
      476,  477,  478,  478,  478,  478,  478,  478,  479,  480,
      481,  473,  473, 1290, 1290, 1290, 1290, 1181, 1181, 1290,
      473,  473,  473,  473, 1290, 1290, 1181, 1181, 1181, 1181,
     1290, 1290,  473,  473,  473,  473,  473,  473, 1181, 1181,
     1181, 1181, 1181, 1181, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  451, 1285, 1285, 1290, 1290,

     1290, 1290, 1187, 1187, 1290, 1285, 1285, 1285, 1285, 1290,
     1290, 1187, 1187, 1187, 1187, 1290, 1290, 1285, 1285, 1285,
     1285, 1285, 1285, 1187, 1187, 1187, 1187, 1187, 1187, 1288,
     1288, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1288, 1288,
     1288, 1288, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1288, 1288, 1288, 1288, 1288, 1288, 1290, 1290, 1290, 1290,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083,  451, 1231, 1231, 1290, 1290, 1290,
     1290, 1260, 1260, 1290, 1231, 1231, 1231, 1231, 1290, 1290,
     1260, 1260, 1260, 1260, 1290, 1290, 1231, 1231, 1231, 1231,

     1231, 1231, 1260, 1260, 1260, 1260, 1260, 1260, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164,  451, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  451, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1165, 1165, 1165,

     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165,  451, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      451, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  168,
      168, 1290,  169, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1182, 1182, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1182, 1182, 1182, 1182, 1290, 1290,

     1290, 1290, 1290,  170, 1290, 1290, 1182, 1182, 1182, 1182,
     1182, 1182, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,  171,
      171,  171,  172,  173,  173,  173,  173,  173,  173,  174,
      175,  176,   83,   83,   83,   83,   83,   83,   83,   83,
       87,   87,   87,   87,   87,   87,   87,   87,  150,  150,
      150,  150,  150,  150,  150,  150,  153,  153,  153,  153,
      153,  153,  153,  153,  156,  156,  156,  156,  156,  156,

      156,  156,  167,  167,  167,  167,  167,  167,  167,  167,
      180,  180,  180,  180,  180,  180,  180,  180,  213, 1290,
     1290, 1290,  213,  222,  222,  317, 1290, 1290, 1290,  317,
      326, 1290, 1290,  326, 1290,  326,  326,  326,  328, 1290,
     1290,  328,  328,  328,  328,  328,  350,  350,  388,  388,
      414, 1290, 1290, 1290,  414,  414,  414,  414,  426,  426,
      446, 1290, 1290,  446,  446,  446,  446,  446,  448, 1290,
     1290,  448,  448,  448,  448,  448,  450, 1290,  450,  450,
      450,  450,  450,  450,  452, 1290,  452,  452,  452,  452,
      452,  452,  167,  167,  167,  167,  167,  167,  167,  167,

      466,  466,  466,  466,  466,  466,  466,  466,  473,  473,
      473,  473,  473,  473,  473,  473,  491, 1290, 1290,  491,
      491,  491,  491,  491,  499,  499,  499,  499,  499,  499,
      499,  499,  501,  501,  222,  222,  595,  595,  623,  623,
      326, 1290, 1290,  326, 1290,  326,  326,  326,  328, 1290,
     1290,  328, 1290, 1290,  328,  328,  641, 1290,  641,  641,
      641,  641,  641,  641,  642, 1290,  642,  642,  642,  642,
      642,  642,  643,  643,  350,  350,  674, 1290,  674,  674,
      674,  674,  674,  674,  675,  675,  388,  388,  414, 1290,
     1290,  414,  414,  414,  414,  414,  707, 1290,  707,  707,

      707,  707,  707,  707,  708,  708,  426,  426,  446, 1290,
     1290,  446,  446,  446,  446,  446,  448, 1290, 1290,  448,
      448,  448,  448,  448,  450, 1290,  450,  450,  450,  450,
      450,  450,  452, 1290,  452,  452,  452,  452,  452,  452,
      466,  466,  466,  466,  466,  466,  466,  466,  167,  167,
      167,  167,  167,  167,  167,  167,  473,  473,  473,  473,
      473,  473,  473,  473,  491, 1290, 1290,  491,  491,  491,
      491,  491,  499,  499,  499,  499,  499,  499,  499,  499,
      501,  501,  222,  222,  595,  595,  623,  623,  641, 1290,
      641,  641,  641,  641,  641,  641,  642, 1290,  642,  642,

      642,  642,  642,  642,  643,  643,  350,  350,  674, 1290,
      674,  674,  674,  674,  674,  674,  675,  675,  388,  388,
      707, 1290,  707,  707,  707,  707,  707,  707,  708,  708,
      426,  426,  450, 1290,  450,  450,  450,  450,  450,  450,
      466,  466,  466,  466,  466,  466,  466,  466,  167,  167,
      167,  167,  167,  167,  167,  167,  473,  473,  473,  473,
      473,  473,  473,  473,  501,  501,  222,  222,  595,  595,
      623,  623,  643,  643,  350,  350,  675,  675,  388,  388,
      708,  708,  426,  426,  450, 1290,  450,  450,  450,  450,
      450,  450,  466,  466,  466,  466,  466,  466,  466,  466,

      167,  167,  167,  167,  167,  167,  167,  167,  473,  473,
      473,  473,  473,  473,  473,  473,  501,  501,  222,  222,
      595,  595,  623,  623,  643,  643,  675,  675,  388,  388,
      708,  708,   19, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290
    } ;

static yyconst flex_int16_t yy_chk[10229] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    4,    4,

        2,    5,    5,    5,   13,   13,    3,   27,    4,    6,
        6,    6,   14,   14,   15,   15,   80,    5,   16,   16,
        2,   80,   27,   35,   35,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   17,   17,   17,   32,   44,   17,   18,   18,   18,
       34,   36,   18,  243,   32,  243,   36,  204,   34,   34,
       40,   40,   36, 1308,   37,  100,   37,   37,   42,   42,
       51,   51,   18,   25,   25,  204,   25,   37,   37,   69,
       37,  100,   37,   86,   51,  258,   51,   51,   86,   50,
      258,   37,   37,   51,   45,   45,   45,   45,   37,   45,
       45,   45,   45,  122,   56,   50,   37,   25,   46,   46,
       46,   46,  539,   46,   46,   46,   46,   56,  203,  122,
       56,   69,  539,   44,   44,   44,   44,   60,   44,   44,

       44,   44,   50,   50,   50,   50,   58,   50,   50,   50,
       50,   60,  203,   60, 1305,   60,   60,  138,  138,   58,
      199,  199,   58,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   28,   28,   52,   52,
     1303,   53,  240,   28,   53,   52,   54,   59,   59,   52,
      235,   59,   52,  235,   53,   52,   54,   53,   54,  240,
       55,   55,   54, 1287,   59,   54,   59,   54,   55,   57,
       28,   55,   67,   57,   55,   61,   61,   55,   67,   62,
       57,   57,   62,   63,  250,   57,   63,  250,   67,   63,
       63,   61,   61,  236,   61,   62,  305,   65,   66,   63,

       63,  237,  237,   63,   65,   66,  236,   65,  305,   65,
      157,   66,  157,   65,   66,  157,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   64,
       72,   72,   72,   72,   72,   64,   72,   72,   72,   72,
       72,   72,   82,   72,   64,   64,  238,  238,  245, 1286,
      245,   64,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   74,   74,   74,   74,
       74,   74,   74,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   81,  248,   88,   93,   88,   93,  110,  248,  110,
       82,   82,   82,   82,  465,   82,   82,   82,   82,   88,
       93,  241,  133,  110,  133,  241,  826,   81,   81,   81,
       81,   81,   81,   81,   81,  247,  826,  247,  133,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   97,   97,   97,   97,   99,   97,
       97,   97,   97,   98,   98,   98,   98,  297,   98,   98,
       98,   98,  297,   81,   81,   81,   81,  465,   81,   81,

       81,   81,  101,  101,  101,  101,  101,  246,  101,  101,
      101,  101,  101,  101,  161,  101,  161,  249, 1282,  161,
      246,  249,   99,   99,   99,   99,  249,   99,   99,   99,
       99,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  103,  103,  103,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      119,  119,  119,  119,  121,  119,  119,  119,  119,  120,

      120,  120,  120,  270,  120,  120,  120,  120,  124,  124,
      124,  124,  124, 1280,  124,  124,  124,  124,  124,  124,
      270,  124,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  251,  251,  121,  121,
      121,  121, 1275,  121,  121,  121,  121,  126,  126,  126,
      126,  126,  126,  126,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  139,  139,  139,  139,  141,  139,  139,  139,

      139,  140,  140,  140,  140, 1272,  140,  140,  140,  140,
      142,  142,  142,  142,  142,  272,  142,  142,  142,  142,
      142,  142,  272,  142,  144,  144,  144,  144,  144,  144,
      144,  252,  252,  254,  260,  254,  141,  141,  141,  141,
      260,  141,  141,  141,  141,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  163,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  201,  531,  201,  239,  259,  201,  201,  239,
      259,  163,  163,  163,  163,  163,  163,  163,  163,  255,
      255,  531,  239,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  277,  261,  277,  262, 1271,  163,  163,  163,
      163,  261,  163,  163,  163,  163,  167,  167,  262,  167,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  263,  263,
      167,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  265,  265, 1270,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  170,
      170,  264,  170,  282,  282, 1269,  170,  216,  216,  216,
      216,  216,  216,  216,  264,  170,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      274,  170,  269,  170,  267,  329,  170,  170,  269,  274,
      329,  170,  225,  225,  225,  225,  225,  225,  225,  170,
      267,  276,  170,  276,  170,  170,  170,  276,  170,  171,
      171, 1267,  171,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  195,  195,  171,  257,  242,  271,  273,  242,  271,
      360,  195,  195,  195,  242,  257,  195,  280,  360,  257,
      242,  275,  266,  273,  273,  195,  195,  195,  266,  275,

      275,  266,  280, 1266,  195,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  180,  180,  200,  534,  200,  200,  268,  180,
      278, 1265,  279,  268,  278,  279,  540,  200,  200,  284,
      200,  534,  200,  281,  281,  268,  268,  463,  284,  303,
      303,  200,  200,  281,  540,  304,  180,  308,  200,  304,
     1258,  308,  213,  213,  213,  213,  200,  213,  213,  213,
      213,  214,  214,  214,  214,  214,  530,  214,  214,  214,
      214,  214,  214,  530,  214,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  416,
      416, 1257,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  182,  182,  283,  182,  453,
      283,  453,  182, 1256,  453,  463,  283,  291,  291,  291,
      291,  182,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  307,  182,  331,  182,
      331,  302,  182,  182,  398,  307,  545,  182,  302,  529,
      302,  545,  398,  302,  331,  182,  493,  493,  182,  556,
      182,  182,  182,  529,  182,  183,  183,  365,  365,  365,
      365,  556,  183,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220, 1254,  536,  183,
      222,  222,  222,  222,  542,  222,  222,  222,  222,  223,
      223,  223,  223,  223,  536,  223,  223,  223,  223,  223,
      223,  542,  223,  311,  311,  311,  311,  311,  311,  311,
     1251,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      232,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  535,  544,  535,  232,  232,  232,
      232,  544,  232,  232,  232,  232,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  293,  293,  293,  293,  293,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  300,  300,  300,  300,
      301,  300,  300,  300,  300,  309,  309,  309,  309,  309,
      546,  309,  309,  309,  309,  309,  309,  546,  309,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  320,  320,  320,  320,  320,  320,  320,
      301,  301,  301,  301, 1250,  301,  301,  301,  301,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  317,  317,  317,
      317, 1248,  317,  317,  317,  317,  318,  318,  318,  318,
      318,  553,  318,  318,  318,  318,  318,  318,  553,  318,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  336, 1245,  336,  341,  341,  341,  341,  584,
      341,  341,  341,  341,  584,  371,  555,  371,  336,  342,
      342,  342,  342,  342,  555,  342,  342,  342,  342,  342,
      342,  371,  342,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  344,  344,  344,
      344,  344,  344,  344,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  350,  350,  350,  350, 1243,  350,  350,  350,

      350,  351,  351,  351,  351,  351,  559,  351,  351,  351,
      351,  351,  351,  559,  351,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  353,  353,  353,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  359,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  404,  404,  404,  404,  359,  359,  359,
      359, 1242,  359,  359,  359,  359,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  379,  379,  379,  379, 1241,  379,  379,  379,  379,
      380,  380,  380,  380,  380,  567,  380,  380,  380,  380,

      380,  380,  567,  380,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  382,  382,
      382,  382,  382,  382,  382,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  388,  388,  388,  388, 1240,  388,  388,
      388,  388,  389,  389,  389,  389,  389,  572,  389,  389,
      389,  389,  389,  389,  572,  389,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      391,  391,  391,  391,  391,  391,  391,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  397,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  440,  440,  440,  440,  397,  397,
      397,  397, 1239,  397,  397,  397,  397,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  410, 1238,  410,  417,  417,  417,  417,  568,
      417,  417,  417,  417,  513,  513,  513,  513,  410,  418,
      418,  418,  418,  418,  568,  418,  418,  418,  418,  418,
      418, 1237,  418,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,

      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  426,  426,  426,  426, 1236,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  592,  427,  427,  427,
      427,  427,  427,  592,  427,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      429,  429,  429,  429,  429,  429,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,

      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  435,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  443,  443,  443,  443,  443,  443,  443,
      443,  443, 1235,  435,  435,  435,  435,  460,  435,  435,
      435,  435,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  455,  755,
      455,  552,  458,  455,  456,  552,  456,  537,  537,  460,
      460,  460,  460,  460,  460,  460,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      456,  456,  456,  456,  456,  456,  456,  456,  522,  522,
      522,  522,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  458,  458,  458,

      458,  458,  755,  458,  458,  458,  458,  458,  458,  490,
      458,  490,  538,  538,  490,  490,  456,  456,  456,  456,
      462,  456,  456,  456,  456,  457,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      457,  457,  504,  504,  504,  504,  504,  504,  504,  457,
      457,  457,  457,  457,  457,  457,  457,  547,  547,  570,
      570,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  501,  501,  501,  501,

      548,  501,  501,  501,  501,  457,  457,  457,  457,  532,
      457,  457,  457,  457,  459,  469,  469,  550,  548, 1234,
      533,  470,  470,  532,  469,  469,  469,  469,  578,  578,
      470,  470,  470,  470,  533,  550,  469,  469,  469,  469,
      469,  469,  470,  470,  470,  470,  470,  470,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  475,  475, 1225,  475,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  611,  611,  475,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  461,  475,  541,  543,  549,  575,  475,

      475,  561,  551,  561,  475,  563,  554,  563,  588,  541,
      543,  549,  475,  588,  575,  475,  551,  475,  475,  475,
      554,  475,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      565,  573,  565,  573,  606, 1223,  606,  564,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  464,  484,  484,  564,  576,  579,  557,  485,
      485,  579,  484,  484,  484,  484,  576,  576,  485,  485,
      485,  485,  557, 1222,  484,  484,  484,  484,  484,  484,

      485,  485,  485,  485,  485,  485,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  612,  753,  612,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  466,  466,  560,  466,  609,  486,  574,  580,  582,
      795,  795, 1221,  609,  586,  486,  486,  560,  492,  492,
      585,  574,  580,  582,  486,  486,  486,  486,  492,  492,
      492,  585,  586,  492,  590,  466,  486,  486,  486,  486,
      486,  486,  492,  492,  492,  494,  494,  591,  587,  590,

      605,  492,  587,  605,  610,  494,  607,  494, 1220,  610,
      494,  613,  605,  753,  671,  591,  703,  607,  822,  494,
      822,  494,  613,  617,  617,  617,  617,  671,  494,  703,
      836,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  467,  836,  467,  502,  502,
      502,  502,  502, 1218,  502,  502,  502,  502,  502,  502,
      845,  502,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  845,  764,  467,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  510,  510,  510,
      510,  832,  510,  510,  510,  510,  598,  598,  598,  598,
      598,  598,  598,  832,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  468,  468,  960,
      468,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      764,  821,  821,  468,  468,  626,  626,  626,  626,  626,
      626,  626,  468,  468,  468,  468,  635,  635,  635,  635,
      825,  468, 1217,  825,  468,  468,  468,  468,  468,  468,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  519,  519,
      519,  519,  960,  519,  519,  519,  519,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      471,  471, 1213,  471,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  842,  842,  471,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  830, 1211,  830,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  472,  472, 1210,  472,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523, 1007, 1007,  472,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  646,  646,  646,  646,  646,  646,  646, 1209,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  473,  473,  655,  655,
      655,  655, 1208,  473,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  815,  528,
      595,  595,  595,  595,  815,  595,  595,  595,  595, 1205,
      473,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  528,  528,  528,  528,  867,
      528,  528,  528,  528,  596,  596,  596,  596,  596,  867,
      596,  596,  596,  596,  596,  596, 1204,  596,  664,  664,
      664,  664,  687,  687,  687,  687,  473,  473,  473,  473,

      473,  473,  473,  473,  473,  473,  473,  473,  473,  476,
      476,  696,  696,  696,  696, 1203,  476,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600, 1042, 1042,  476,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  604, 1044, 1044,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  482,  678,  678,  678,  678,  678,  678,  678,
     1197,  604,  604,  604,  604,  762,  604,  604,  604,  604,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  720,  720,  720,
      720,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  483,  483,  711,  711,  711,
      711,  711,  711,  711,  483,  483,  483,  483,  729,  729,
      729,  729,  835,  762,  835, 1196,  483,  483,  483,  483,

      483,  483,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  623,  623,  623,  623,
     1194,  623,  623,  623,  623,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  624,  624,  624,  624,  624, 1019,  624,  624,  624,
      624,  624,  624, 1019,  624,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  632,  632,  632,
      632, 1193,  632,  632,  632,  632,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  637,  637,

      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  643,
      643,  643,  643,  871,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  871,  644,  644,  644,  644,  644,  644,
     1192,  644,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  652,  652,  652,  652, 1191,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  661,  661,  661,  661,
     1190,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  670,  675,
      675,  675,  675, 1176,  675,  675,  675,  675,  676,  676,
      676,  676,  676,  818,  676,  676,  676,  676,  676,  676,
      824,  676,  818,  820,  824,  670,  670,  670,  670,  820,
      670,  670,  670,  670,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  684,  684,  684,  684,
     1175,  684,  684,  684,  684,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  693,  693,
      693,  693, 1174,  693,  693,  693,  693,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      702,  708,  708,  708,  708, 1134,  708,  708,  708,  708,
      709,  709,  709,  709,  709, 1134,  709,  709,  709,  709,
      709,  709,  851,  709,  851, 1173,  827,  702,  702,  702,
      702,  827,  702,  702,  702,  702,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  715,  715,  715,  715,  715,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  717,  717,
      717,  717, 1171,  717,  717,  717,  717,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      726,  726,  726,  726, 1170,  726,  726,  726,  726,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  735,  741,  855,  741,  855, 1169,  741,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  797,  849,  797,
      833, 1166,  797,  797,  834,  833,  735,  735,  735,  735,
      849,  735,  735,  735,  735,  738,  738,  834,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      739,  748,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778, 1162,  739,  739,  848,
      750,  802,  802,  802,  802,  853,  739,  739,  739,  739,
      739,  739,  739,  739,  752,  848, 1161,  853,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  757,  844, 1160,  748,  748,  748,  748,
      748,  759,  748,  748,  748,  748,  748,  748,  844,  748,
     1051, 1051,  739,  739,  739,  739,  768,  739,  739,  739,
      739,  749,  750,  750,  750,  750,  750,  750,  750, 1156,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      761,  799,  799,  799,  799,  823,  799,  799,  799,  799,
      847,  771,  863,  823,  847,  831,  860,  863,  757,  757,
      757,  757,  757,  831,  757,  757,  757,  757,  757,  757,

      860,  757,  838,  759,  759,  759,  759,  759,  759,  759,
      838,  768,  768,  768,  768, 1127,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      751,  856,  859,  856, 1127,  859,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  774,  774,
      854,  808,  808,  808,  808,  774,  808,  808,  808,  808,
     1152,  865,  854,  865,  774,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  754,
      774,  850,  857,  858,  868,  774,  774,  875,  857,  850,
      774,  858,  861,  874,  872,  874,  868,  872,  774,  875,
      891,  774,  891,  774,  774,  774,  861,  774,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  879,  879,  879,  879,
      886, 1151,  958,  886,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  756,  756,
      889,  887, 1149, 1032,  869,  887,  889,  756,  756,  756,

      756,  756,  756,  756,  756,  869, 1023, 1032, 1023,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  890,  888,
      958, 1033,  890,  756,  756,  756,  756,  888,  756,  756,
      756,  756,  758,  782,  782, 1033, 1028,  893, 1028,  787,
      787,  893,  782,  782,  782,  782, 1025,  894,  787,  787,
      787,  787,  894, 1025,  782,  782,  782,  782,  782,  782,
      787,  787,  787,  787,  787,  787,  788,  788,  900,  900,

      900,  900, 1029, 1148, 1029,  788,  788,  788,  788,  911,
      911,  911,  911,  926,  926,  926,  926,  788,  788,  788,
      788,  788,  788,  941,  941,  941,  941,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  760,  789,  789, 1069, 1069,  962, 1017,  791,  791,
      955,  789,  789,  789,  789,  962, 1017,  791,  791,  791,
      791, 1070, 1070,  789,  789,  789,  789,  789,  789,  791,
      791,  791,  791,  791,  791,  792,  792, 1018, 1020, 1030,
     1030, 1018, 1020, 1031,  792,  792,  792,  792, 1030, 1034,
     1035, 1036, 1147, 1034, 1031,  974,  792,  792,  792,  792,

      792,  792, 1037, 1035, 1037, 1036,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      763,  793,  955,  955,  955,  955,  955,  955,  955, 1039,
      793,  793, 1045,  796,  796, 1038, 1045, 1038, 1039,  793,
      793,  793,  793,  796, 1046,  796, 1046, 1146,  796, 1040,
     1048,  793,  793,  793,  793,  793,  793,  796, 1040,  796,
      974,  974,  974,  974, 1048, 1145,  796,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801, 1047, 1053, 1047, 1053,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  766,

      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807, 1049, 1057, 1058, 1049,
     1067, 1057, 1058, 1067,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  767,  809,
      809,  809,  809,  812,  809,  809,  809,  809,  810,  810,
      810,  810, 1055,  810,  810,  810,  810,  811,  811,  811,

      811, 1065,  811,  811,  811,  811, 1055, 1143, 1119, 1065,
     1119,  812,  812,  812,  812, 1066,  812,  812,  812,  812,
      876,  876,  876,  876, 1066,  876,  876,  876,  876,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  769,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  897,
      897,  897,  897, 1071,  897,  897,  897,  897, 1120, 1120,
     1142, 1071,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  770,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898, 1141,
      885,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899, 1072, 1128, 1135, 1135, 1128,

     1072,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  772,  885,  885,  885,  885,
     1139,  885,  885,  885,  885,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904, 1199, 1201, 1199, 1201,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  773,  905,  905,  905,  905,  905,

      905,  905,  905,  905,  905,  905,  905,  905,  905,  906,
      906,  906,  906, 1155,  906,  906,  906,  906,  907,  907,
      907,  907, 1155,  907,  907,  907,  907,  908,  908,  908,
      908, 1137,  908,  908,  908,  908,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  775,  775, 1136,  775,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  912,  912,  912,  912,  912,  912,  912,  912,  912,

      912,  912,  912,  912,  912,  983, 1133,  775,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915, 1244, 1244, 1125,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  781,  781, 1121, 1101,
      983,  983,  983,  983, 1095,  781,  781,  781,  781, 1122,
     1126, 1129, 1095, 1121, 1126, 1129, 1122,  781,  781,  781,
      781,  781,  781,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  916,  917,  917,  917,
      917, 1158,  917,  917,  917,  917,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      783,  783, 1100,  783,  918,  918,  918,  918, 1123,  918,
      918,  918,  918, 1099, 1130, 1124,  783,  783, 1130, 1131,
     1132,  921, 1123, 1131, 1132,  783,  783,  783,  783, 1124,
     1150, 1098, 1158, 1138,  783, 1097, 1150,  783,  783,  783,
      783,  783,  783,  919,  919,  919,  919, 1138,  919,  919,
      919,  919,  920,  920,  920,  920, 1096,  920,  920,  920,
      920,  921,  921,  921,  921, 1189,  921,  921,  921,  921,

      923,  923,  923,  923, 1214,  923,  923,  923,  923, 1189,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  784,  784, 1094,  784,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925, 1214, 1093,  784,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928, 1247, 1247, 1092,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  785,  785, 1215, 1249,
     1249, 1068, 1064,  785,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930, 1255, 1063, 1255,
      785,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  932,  932,  932,  932, 1215,
      932,  932,  932,  932,  933,  933,  933,  933, 1195,  933,
      933,  933,  933,  934,  934,  934,  934, 1140,  934,  934,
      934,  934, 1195, 1268, 1140, 1268,  785,  785,  785,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  786,
      786, 1059,  935,  935,  935,  935,  786,  935,  935,  935,
      935,  936, 1144, 1153, 1154,  786,  786, 1056, 1159, 1144,
     1153, 1154, 1202, 1157,  786,  786,  786,  786, 1163, 1086,
     1157, 1159, 1198,  786, 1202, 1163,  786,  786,  786,  786,
      786,  786,  938,  938,  938,  938, 1198,  938,  938,  938,
      938,  936,  936,  936,  936, 1206,  936,  936,  936,  936,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939, 1206, 1273, 1274, 1273, 1274,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  790,  790, 1086, 1086, 1086, 1086, 1200, 1207,
     1246,  790,  790,  790,  790, 1200, 1207, 1212, 1054, 1283,
     1246, 1283, 1212,  790,  790,  790,  790,  790,  790,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  947,  947,  947,  947, 1052,  947,  947,  947,
      947,  948,  948,  948,  948,  951,  948,  948,  948,  948,
      949,  949,  949,  949, 1050,  949,  949,  949,  949,  950,
      950,  950,  950, 1043,  950,  950,  950,  950, 1041, 1027,
      951,  951,  951,  951, 1216,  951,  951,  951,  951,  952,
      952, 1216,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  953, 1252, 1281, 1289, 1026, 1289,
      993,  993, 1024, 1022, 1021, 1016, 1015,  970,  957,  993,
      993,  993,  993,  969,  968,  967,  966,  964,  963,  977,
      961,  993,  993,  993,  993,  993,  993,  937,  986,  994,

      994,  922,  896,  895,  892,  873,  870,  866,  994,  994,
      994,  994,  864,  862,  852,  846, 1252, 1281,  843,  841,
      994,  994,  994,  994,  994,  994,  840,  839,  837,  953,
      953,  953,  953,  953,  829,  953,  953,  953,  953,  953,
      953,  828,  953,  954,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  995,  995,  819,  817,  816,  814,  997,  997,
      813,  995,  995,  995,  995,  747,  746,  997,  997,  997,
      997,  745,  744,  995,  995,  995,  995,  995,  995,  997,

      997,  997,  997,  997,  997,  743,  742,  740,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  956,  998,  998,  737,  736,  716,  714, 1002,
     1002,  707,  998,  998,  998,  998,  705,  704, 1002, 1002,
     1002, 1002,  683,  681,  998,  998,  998,  998,  998,  998,
     1002, 1002, 1002, 1002, 1002, 1002, 1004, 1004,  674,  673,
      672,  651,  649,  642,  641, 1004, 1004, 1004, 1004,  631,
      629,  614,  608,  603,  601,  594,  593, 1004, 1004, 1004,
     1004, 1004, 1004,  589,  583,  581,  577,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,

      956,  959, 1005, 1005,  571,  569,  566,  562,  558,  509,
      507, 1005, 1005, 1005, 1005,  500,  499,  452,  451,  450,
     1006,  437,  436, 1005, 1005, 1005, 1005, 1005, 1005, 1006,
     1006,  434, 1008, 1008,  432,  425,  423,  415, 1006, 1006,
     1006, 1006, 1008,  414, 1008,  412,  411, 1008,  401,  400,
     1006, 1006, 1006, 1006, 1006, 1006, 1008, 1011, 1008,  396,
      394,  387,  385,  377,  373, 1008,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      972, 1009, 1009, 1009, 1009,  372, 1009, 1009, 1009, 1009,
     1010, 1010, 1010, 1010, 1014, 1010, 1010, 1010, 1010,  362,

      361, 1011, 1011, 1011, 1011,  358, 1011, 1011, 1011, 1011,
     1012, 1012, 1012, 1012,  356, 1012, 1012, 1012, 1012, 1013,
     1013, 1013, 1013,  349, 1013, 1013, 1013, 1013,  347,  340,
      338,  337,  335,  333, 1014, 1014, 1014, 1014,  332, 1014,
     1014, 1014, 1014,  325,  323,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  973,
     1060, 1060, 1060, 1060, 1062, 1060, 1060, 1060, 1060, 1061,
     1061, 1061, 1061,  316, 1061, 1061, 1061, 1061, 1073, 1073,
     1073, 1073,  314, 1073, 1073, 1073, 1073,  306,  288,  287,
      256,  253,  244,  234,  233, 1062, 1062, 1062, 1062,  230,

     1062, 1062, 1062, 1062, 1074, 1074, 1074, 1074,  228, 1074,
     1074, 1074, 1074, 1075, 1075, 1075, 1075,  221, 1075, 1075,
     1075, 1075,  219,  212,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  975, 1076,
     1076, 1076, 1076,  210, 1076, 1076, 1076, 1076, 1077, 1077,
     1077, 1077,  206, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1082, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079,
     1089, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080,  164,
     1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081,  159, 1081,
     1081, 1081, 1081,  156, 1082, 1082, 1082, 1082,  155, 1082,

     1082, 1082, 1082,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  976, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109,  152,  149,  147, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1106, 1106,  137,  135,  131,  129,
     1107, 1107,  123, 1106, 1106, 1106, 1106,  118,  117, 1107,
     1107, 1107, 1107,  114,  113, 1106, 1106, 1106, 1106, 1106,
     1106, 1107, 1107, 1107, 1107, 1107, 1107,  112,  108,  106,
       96,   95,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  978, 1108, 1108,   91,

       90,   85,   79, 1110, 1110,   77, 1108, 1108, 1108, 1108,
       49,   43, 1110, 1110, 1110, 1110,   41,   38, 1108, 1108,
     1108, 1108, 1108, 1108, 1110, 1110, 1110, 1110, 1110, 1110,
     1111, 1111,   31,   26,   24,   23,   21,   19,    0, 1111,
     1111, 1111, 1111,    0,    0,    0,    0,    0,    0,    0,
        0, 1111, 1111, 1111, 1111, 1111, 1111,    0,    0,    0,
        0,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  979, 1113, 1113,    0,    0,
        0,    0, 1114, 1114,    0, 1113, 1113, 1113, 1113,    0,
        0, 1114, 1114, 1114, 1114,    0,    0, 1113, 1113, 1113,

     1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114, 1115,
     1115,    0,    0,    0,    0,    0,    0,    0, 1115, 1115,
     1115, 1115,    0,    0,    0,    0,    0,    0,    0,    0,
     1115, 1115, 1115, 1115, 1115, 1115,    0,    0,    0,    0,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  980,  980,    0,    0,    0,    0,
        0,    0,    0,  980,  980,  980,  980,  980,  980,  980,
      980,    0,    0,    0,    0,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  980,
      980,  980,  980,    0,  980,  980,  980,  980,  981, 1116,
     1116,    0,    0,    0,    0, 1117, 1117,    0, 1116, 1116,
     1116, 1116,    0,    0, 1117, 1117, 1117, 1117,    0,    0,
     1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117,
     1117, 1117, 1177, 1177,    0,    0,    0,    0,    0,    0,
        0, 1177, 1177, 1177, 1177,    0,    0,    0,    0,    0,
        0,    0,    0, 1177, 1177, 1177, 1177, 1177, 1177,    0,
        0,    0,    0,  981,  981,  981,  981,  981,  981,  981,

      981,  981,  981,  981,  981,  981,  981,  982, 1118,    0,
     1178, 1178,    0,    0,    0,    0,    0, 1118, 1118, 1178,
     1178, 1178, 1178,    0,    0,    0, 1118, 1118, 1118, 1118,
        0, 1178, 1178, 1178, 1178, 1178, 1178,    0, 1118, 1118,
     1118, 1118, 1118, 1118, 1179, 1179,    0,    0,    0,    0,
        0,    0,    0, 1179, 1179, 1179, 1179,    0,    0,    0,
        0,    0,    0,    0,    0, 1179, 1179, 1179, 1179, 1179,
     1179,    0,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  984, 1180, 1180,    0,
        0,    0,    0, 1181, 1181,    0, 1180, 1180, 1180, 1180,

        0,    0, 1181, 1181, 1181, 1181,    0,    0, 1180, 1180,
     1180, 1180, 1180, 1180, 1181, 1181, 1181, 1181, 1181, 1181,
     1182, 1182,    0,    0,    0,    0,    0,    0,    0, 1182,
     1182, 1182, 1182,    0,    0,    0,    0,    0,    0,    0,
        0, 1182, 1182, 1182, 1182, 1182, 1182,    0,    0,    0,
        0,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  985, 1183, 1183,    0,    0,
        0,    0, 1184, 1184,    0, 1183, 1183, 1183, 1183,    0,
        0, 1184, 1184, 1184, 1184,    0,    0, 1183, 1183, 1183,
     1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184, 1185,

     1185,    0,    0,    0,    0,    0,    0,    0, 1185, 1185,
     1185, 1185,    0,    0,    0,    0,    0,    0,    0,    0,
     1185, 1185, 1185, 1185, 1185, 1185,    0,    0,    0,    0,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  987, 1186, 1186,    0,    0,    0,
        0,    0,    0,    0, 1186, 1186, 1186, 1186,    0,    0,
        0,    0,    0, 1187,    0,    0, 1186, 1186, 1186, 1186,
     1186, 1186, 1187, 1187,    0,    0,    0,    0, 1226, 1226,
        0, 1187, 1187, 1187, 1187,    0,    0, 1226, 1226, 1226,
     1226,    0,    0, 1187, 1187, 1187, 1187, 1187, 1187, 1226,

     1226, 1226, 1226, 1226, 1226,    0,    0,    0,    0,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  988, 1188,    0, 1227, 1227,    0,    0,
        0,    0,    0, 1188, 1188, 1227, 1227, 1227, 1227,    0,
        0,    0, 1188, 1188, 1188, 1188,    0, 1227, 1227, 1227,
     1227, 1227, 1227,    0, 1188, 1188, 1188, 1188, 1188, 1188,
     1228, 1228,    0,    0,    0,    0,    0,    0,    0, 1228,
     1228, 1228, 1228,    0,    0,    0,    0,    0,    0,    0,
        0, 1228, 1228, 1228, 1228, 1228, 1228,    0,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  991,  991,    0,  991, 1229, 1229,    0,    0,
        0,    0,    0,    0,    0, 1229, 1229, 1229, 1229,    0,
        0,    0,    0,    0,    0,    0,    0, 1229, 1229, 1229,
     1229, 1229, 1229, 1230, 1230,    0,  991,    0,    0, 1231,
     1231,    0, 1230, 1230, 1230, 1230,    0,    0, 1231, 1231,
     1231, 1231,    0,    0, 1230, 1230, 1230, 1230, 1230, 1230,
     1231, 1231, 1231, 1231, 1231, 1231,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  992,  992,    0,  992,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  992,  992,    0,    0,    0,    0,    0,    0,    0,
      992,  992,  992,  992,    0,    0,    0,    0,    0,  992,
     1232, 1232,  992,  992,  992,  992,  992,  992,    0, 1232,
     1232, 1232, 1232,    0,    0,    0,    0,    0, 1233, 1233,
        0, 1232, 1232, 1232, 1232, 1232, 1232, 1233, 1233, 1233,
     1233,    0,    0,    0,    0,    0,    0,    0,    0, 1233,
     1233, 1233, 1233, 1233, 1233,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  996,  996,
        0,    0,    0,    0, 1259, 1259,    0,  996,  996,  996,

      996,    0,    0, 1259, 1259, 1259, 1259,    0,    0,  996,
      996,  996,  996,  996,  996, 1259, 1259, 1259, 1259, 1259,
     1259,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  999,  999,    0,  999,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  999,  999,
        0,    0,    0,    0,    0,    0,    0,  999,  999,  999,
      999,    0,    0,    0,    0,    0,  999, 1260, 1260,  999,
      999,  999,  999,  999,  999,    0, 1260, 1260, 1260, 1260,

        0,    0,    0,    0,    0, 1261, 1261,    0, 1260, 1260,
     1260, 1260, 1260, 1260, 1261, 1261, 1261, 1261,    0,    0,
        0,    0,    0,    0,    0,    0, 1261, 1261, 1261, 1261,
     1261, 1261,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999, 1000, 1000,    0,    0,    0,
        0,    0, 1000,    0,    0,    0,    0,    0,    0,    0,
        0, 1000, 1000,    0,    0,    0,    0,    0,    0,    0,
     1000, 1000, 1000, 1000,    0,    0,    0,    0,    0, 1000,
     1262, 1262, 1000, 1000, 1000, 1000, 1000, 1000,    0, 1262,
     1262, 1262, 1262,    0,    0,    0,    0,    0, 1263, 1263,

        0, 1262, 1262, 1262, 1262, 1262, 1262, 1263, 1263, 1263,
     1263,    0,    0,    0,    0,    0,    0,    0,    0, 1263,
     1263, 1263, 1263, 1263, 1263, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001,
        0,    0,    0,    0,    0, 1001,    0,    0,    0,    0,
        0,    0,    0,    0, 1001, 1001,    0,    0,    0,    0,
        0,    0,    0, 1001, 1001, 1001, 1001,    0,    0,    0,
        0,    0, 1001, 1264, 1264, 1001, 1001, 1001, 1001, 1001,
     1001,    0, 1264, 1264, 1264, 1264,    0,    0,    0,    0,
        0, 1276, 1276,    0, 1264, 1264, 1264, 1264, 1264, 1264,

     1276, 1276, 1276, 1276,    0,    0,    0,    0,    0,    0,
        0,    0, 1276, 1276, 1276, 1276, 1276, 1276, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1003, 1003,    0,    0,    0,    0, 1277, 1277,    0,
     1003, 1003, 1003, 1003,    0,    0, 1277, 1277, 1277, 1277,
        0,    0, 1003, 1003, 1003, 1003, 1003, 1003, 1277, 1277,
     1277, 1277, 1277, 1277,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1084, 1278, 1278,    0,    0,

        0,    0, 1279, 1279,    0, 1278, 1278, 1278, 1278,    0,
        0, 1279, 1279, 1279, 1279,    0,    0, 1278, 1278, 1278,
     1278, 1278, 1278, 1279, 1279, 1279, 1279, 1279, 1279, 1284,
     1284,    0,    0,    0,    0,    0,    0,    0, 1284, 1284,
     1284, 1284,    0,    0,    0,    0,    0,    0,    0,    0,
     1284, 1284, 1284, 1284, 1284, 1284,    0,    0,    0,    0,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1085, 1285, 1285,    0,    0,    0,
        0, 1288, 1288,    0, 1285, 1285, 1285, 1285,    0,    0,
     1288, 1288, 1288, 1288,    0,    0, 1285, 1285, 1285, 1285,

     1285, 1285, 1288, 1288, 1288, 1288, 1288, 1288,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1087,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1088,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1088, 1088, 1088,

     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1090,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1091,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1112,
     1112,    0, 1112,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1112, 1112,    0,    0,    0,
        0,    0,    0,    0, 1112, 1112, 1112, 1112,    0,    0,

        0,    0,    0, 1112,    0,    0, 1112, 1112, 1112, 1112,
     1112, 1112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1295, 1295, 1295, 1295, 1295, 1295,

     1295, 1295, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298,    0,
        0,    0, 1298, 1299, 1299, 1300,    0,    0,    0, 1300,
     1301,    0,    0, 1301,    0, 1301, 1301, 1301, 1302,    0,
        0, 1302, 1302, 1302, 1302, 1302, 1304, 1304, 1306, 1306,
     1307,    0,    0,    0, 1307, 1307, 1307, 1307, 1309, 1309,
     1310,    0,    0, 1310, 1310, 1310, 1310, 1310, 1311,    0,
        0, 1311, 1311, 1311, 1311, 1311, 1312,    0, 1312, 1312,
     1312, 1312, 1312, 1312, 1313,    0, 1313, 1313, 1313, 1313,
     1313, 1313, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,

     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1317,    0,    0, 1317,
     1317, 1317, 1317, 1317, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1319, 1319, 1320, 1320, 1321, 1321, 1322, 1322,
     1323,    0,    0, 1323,    0, 1323, 1323, 1323, 1324,    0,
        0, 1324,    0,    0, 1324, 1324, 1325,    0, 1325, 1325,
     1325, 1325, 1325, 1325, 1326,    0, 1326, 1326, 1326, 1326,
     1326, 1326, 1327, 1327, 1328, 1328, 1329,    0, 1329, 1329,
     1329, 1329, 1329, 1329, 1330, 1330, 1331, 1331, 1332,    0,
        0, 1332, 1332, 1332, 1332, 1332, 1333,    0, 1333, 1333,

     1333, 1333, 1333, 1333, 1334, 1334, 1335, 1335, 1336,    0,
        0, 1336, 1336, 1336, 1336, 1336, 1337,    0,    0, 1337,
     1337, 1337, 1337, 1337, 1338,    0, 1338, 1338, 1338, 1338,
     1338, 1338, 1339,    0, 1339, 1339, 1339, 1339, 1339, 1339,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1343,    0,    0, 1343, 1343, 1343,
     1343, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1345, 1345, 1346, 1346, 1347, 1347, 1348, 1348, 1349,    0,
     1349, 1349, 1349, 1349, 1349, 1349, 1350,    0, 1350, 1350,

     1350, 1350, 1350, 1350, 1351, 1351, 1352, 1352, 1353,    0,
     1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354, 1355, 1355,
     1356,    0, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357,
     1358, 1358, 1359,    0, 1359, 1359, 1359, 1359, 1359, 1359,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1363, 1363, 1364, 1364, 1365, 1365,
     1366, 1366, 1367, 1367, 1368, 1368, 1369, 1369, 1370, 1370,
     1371, 1371, 1372, 1372, 1373,    0, 1373, 1373, 1373, 1373,
     1373, 1373, 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374,

     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1378, 1378,
     1379, 1379, 1380, 1380, 1381, 1381, 1382, 1382, 1383, 1383,
     1384, 1384, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "csharp_lexer.ll"
#line 2 "csharp_lexer.ll"
/*****************************************************************************
 * This file is part of KDevelop.                                            *
 * Copyright (c) 2005, 2006 Jakob Petsovits <jpetso@gmx.at>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/


#include "csharp.h"
#include "csharp_pp.h"

#include <iostream>

/* call this before calling yylex(): */
void lexer_restart(csharp* parser);

extern std::size_t _G_token_begin, _G_token_end;
extern char *_G_contents;



/* the rest of these declarations are internal to the lexer,
 * don't use them outside of this file. */

std::size_t _G_current_offset;
csharp* _G_parser;
csharp_pp_scope* _G_pp_root_scope;

// retrieves the upper-most pre-processor scope
csharp_pp_scope* pp_current_scope();

// to be called from within <<EOF>> rules to free memory and report open scopes
void cleanup();


#define YY_INPUT(buf, result, max_size) \
  { \
    int c = _G_contents[_G_current_offset++]; \
    result = c == 0 ? YY_NULL : (buf[0] = c, 1); \
  }

#define YY_USER_INIT \
_G_token_begin = _G_token_end = 0; \
_G_current_offset = 0;

#define YY_USER_ACTION \
_G_token_begin = _G_token_end; \
_G_token_end += yyleng;

// This is meant to be called with the first token in a pre-processor line.
// Pre-processing completely bypasses the normal tokenizing process.
#define PP_PROCESS_TOKEN(t) \
  { \
    csharp_pp pp_parser; \
    csharp_pp::pp_parse_result result = \
      pp_parser.pp_parse_line( csharp_pp::Token_##t, pp_current_scope() ); \
    \
    if (result == csharp_pp::result_eof) \
      { \
        BEGIN(INITIAL); \
        return 0; /* end of file */  \
      } \
    else if (result == csharp_pp::result_invalid) \
      { \
        BEGIN(INITIAL); \
        return csharp::Token_INVALID; \
      } \
    else if (result == csharp_pp::result_ok) \
      { \
        if (pp_current_scope()->is_active()) \
          BEGIN(INITIAL); \
        else \
          BEGIN(PP_SKIPPED_SECTION_PART); \
      } \
  }

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* 0x0041-0x005a, 0x005f, 0x0061-0x007a: one byte in UTF-8 */
/* 0x00c0-0x00d6, 0x00d8-0x00f6, 0x00f8-0x00ff */
/* 0x0100-0x1fff */
/* 0x3040-0x318f */
/* 0x3300-0x337f */
/* 0x3400-0x3d2d */
/* 0x4e00-0x9fff */
/* 0xf900-0xfaff */
/* 0x0080-0xffff */
/* 0x10000-0x10ffff */
/* Unicode characters above 0x10ffff are not supported by C#. */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* 0x2028 and 0x2029, currently unused in this lexer
for performance and convenience reasons. */
/* non-Unicode stuff */








#line 3256 "csharp_lexer.cc"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1
#define PP_EXPECT_NEW_LINE 2
#define PP_DECLARATION 3
#define PP_IF_CLAUSE 4
#define PP_LINE 5
#define PP_MESSAGE 6
#define PP_PRAGMA 7
#define PP_SKIPPED_SECTION_PART 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 178 "csharp_lexer.ll"


 /* seperators */

#line 3423 "csharp_lexer.cc"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1291 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 10133 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 182 "csharp_lexer.ll"
return csharp::Token_LPAREN;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 183 "csharp_lexer.ll"
return csharp::Token_RPAREN;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 184 "csharp_lexer.ll"
return csharp::Token_LBRACE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 185 "csharp_lexer.ll"
return csharp::Token_RBRACE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 186 "csharp_lexer.ll"
return csharp::Token_LBRACKET;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 187 "csharp_lexer.ll"
return csharp::Token_RBRACKET;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 188 "csharp_lexer.ll"
return csharp::Token_COMMA;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 189 "csharp_lexer.ll"
return csharp::Token_SEMICOLON;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 190 "csharp_lexer.ll"
return csharp::Token_DOT;
	YY_BREAK
/* operators */
case 10:
YY_RULE_SETUP
#line 195 "csharp_lexer.ll"
return csharp::Token_COLON;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 196 "csharp_lexer.ll"
return csharp::Token_COLONCOLON; // TODO: naming... new in 2.0?
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "csharp_lexer.ll"
return csharp::Token_QUESTION;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "csharp_lexer.ll"
return csharp::Token_QUESTIONQUESTION; // TODO: naming... new in 2.0?
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "csharp_lexer.ll"
return csharp::Token_BANG;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 200 "csharp_lexer.ll"
return csharp::Token_TILDE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 201 "csharp_lexer.ll"
return csharp::Token_EQUAL;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 202 "csharp_lexer.ll"
return csharp::Token_LESS_THAN;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 203 "csharp_lexer.ll"
return csharp::Token_LESS_EQUAL;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 204 "csharp_lexer.ll"
return csharp::Token_GREATER_THAN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 205 "csharp_lexer.ll"
return csharp::Token_GREATER_EQUAL;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 206 "csharp_lexer.ll"
return csharp::Token_NOT_EQUAL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 207 "csharp_lexer.ll"
return csharp::Token_LOG_AND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 208 "csharp_lexer.ll"
return csharp::Token_LOG_OR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 209 "csharp_lexer.ll"
return csharp::Token_ARROW_RIGHT; // TODO: naming, CSharpParser.g calls it DEREF... new in 2.0 or not?
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 210 "csharp_lexer.ll"
return csharp::Token_INCREMENT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 211 "csharp_lexer.ll"
return csharp::Token_DECREMENT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 212 "csharp_lexer.ll"
return csharp::Token_ASSIGN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 213 "csharp_lexer.ll"
return csharp::Token_PLUS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 214 "csharp_lexer.ll"
return csharp::Token_PLUS_ASSIGN;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 215 "csharp_lexer.ll"
return csharp::Token_MINUS;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "csharp_lexer.ll"
return csharp::Token_MINUS_ASSIGN;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 217 "csharp_lexer.ll"
return csharp::Token_STAR;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 218 "csharp_lexer.ll"
return csharp::Token_STAR_ASSIGN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 219 "csharp_lexer.ll"
return csharp::Token_SLASH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 220 "csharp_lexer.ll"
return csharp::Token_SLASH_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 221 "csharp_lexer.ll"
return csharp::Token_BIT_AND;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 222 "csharp_lexer.ll"
return csharp::Token_BIT_AND_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 223 "csharp_lexer.ll"
return csharp::Token_BIT_OR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 224 "csharp_lexer.ll"
return csharp::Token_BIT_OR_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 225 "csharp_lexer.ll"
return csharp::Token_BIT_XOR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 226 "csharp_lexer.ll"
return csharp::Token_BIT_XOR_ASSIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 227 "csharp_lexer.ll"
return csharp::Token_REMAINDER;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 228 "csharp_lexer.ll"
return csharp::Token_REMAINDER_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 229 "csharp_lexer.ll"
return csharp::Token_LSHIFT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 230 "csharp_lexer.ll"
return csharp::Token_LSHIFT_ASSIGN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 231 "csharp_lexer.ll"
return csharp::Token_RSHIFT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 232 "csharp_lexer.ll"
return csharp::Token_RSHIFT_ASSIGN;
	YY_BREAK
/* whitespace, newlines and comments */
case 48:
YY_RULE_SETUP
#line 237 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 238 "csharp_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 240 "csharp_lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 242 "csharp_lexer.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 52:
YY_RULE_SETUP
#line 244 "csharp_lexer.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 245 "csharp_lexer.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 246 "csharp_lexer.ll"
/* { newLine(); } */ ;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 247 "csharp_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 248 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::error,
      "Encountered end of file in an unclosed block comment" );
    cleanup();
    return csharp::Token_EOF;
}
	YY_BREAK

/* characters and strings */
case 56:
YY_RULE_SETUP
#line 259 "csharp_lexer.ll"
return csharp::Token_CHARACTER_LITERAL;
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 260 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::warning,
      std::string("Invalid character literal:\n") + yytext );
    return csharp::Token_CHARACTER_LITERAL;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 266 "csharp_lexer.ll"
return csharp::Token_STRING_LITERAL;
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 267 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::warning,
      std::string("Invalid string literal:\n") + yytext );
    return csharp::Token_STRING_LITERAL;
}
	YY_BREAK
/* verbatim strings: */
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 273 "csharp_lexer.ll"
return csharp::Token_STRING_LITERAL;
	YY_BREAK
/* reserved words */
case 61:
YY_RULE_SETUP
#line 278 "csharp_lexer.ll"
return csharp::Token_ABSTRACT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "csharp_lexer.ll"
return csharp::Token_AS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 280 "csharp_lexer.ll"
return csharp::Token_BASE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 281 "csharp_lexer.ll"
return csharp::Token_BOOL;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 282 "csharp_lexer.ll"
return csharp::Token_BREAK;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 283 "csharp_lexer.ll"
return csharp::Token_BYTE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 284 "csharp_lexer.ll"
return csharp::Token_CASE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 285 "csharp_lexer.ll"
return csharp::Token_CATCH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 286 "csharp_lexer.ll"
return csharp::Token_CHAR;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 287 "csharp_lexer.ll"
return csharp::Token_CHECKED;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 288 "csharp_lexer.ll"
return csharp::Token_CLASS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 289 "csharp_lexer.ll"
return csharp::Token_CONST;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 290 "csharp_lexer.ll"
return csharp::Token_CONTINUE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 291 "csharp_lexer.ll"
return csharp::Token_DECIMAL;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 292 "csharp_lexer.ll"
return csharp::Token_DEFAULT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 293 "csharp_lexer.ll"
return csharp::Token_DELEGATE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 294 "csharp_lexer.ll"
return csharp::Token_DO;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 295 "csharp_lexer.ll"
return csharp::Token_DOUBLE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 296 "csharp_lexer.ll"
return csharp::Token_ELSE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 297 "csharp_lexer.ll"
return csharp::Token_ENUM;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 298 "csharp_lexer.ll"
return csharp::Token_EVENT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 299 "csharp_lexer.ll"
return csharp::Token_EXPLICIT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 300 "csharp_lexer.ll"
return csharp::Token_FALSE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 301 "csharp_lexer.ll"
return csharp::Token_FINALLY;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 302 "csharp_lexer.ll"
return csharp::Token_FIXED;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "csharp_lexer.ll"
return csharp::Token_FLOAT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 304 "csharp_lexer.ll"
return csharp::Token_FOR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 305 "csharp_lexer.ll"
return csharp::Token_FOREACH;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 306 "csharp_lexer.ll"
return csharp::Token_GOTO;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 307 "csharp_lexer.ll"
return csharp::Token_IF;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 308 "csharp_lexer.ll"
return csharp::Token_IMPLICIT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 309 "csharp_lexer.ll"
return csharp::Token_IN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 310 "csharp_lexer.ll"
return csharp::Token_INT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 311 "csharp_lexer.ll"
return csharp::Token_INTERFACE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 312 "csharp_lexer.ll"
return csharp::Token_INTERNAL;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 313 "csharp_lexer.ll"
return csharp::Token_IS;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 314 "csharp_lexer.ll"
return csharp::Token_LOCK;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 315 "csharp_lexer.ll"
return csharp::Token_LONG;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 316 "csharp_lexer.ll"
return csharp::Token_NAMESPACE;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 317 "csharp_lexer.ll"
return csharp::Token_NEW;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 318 "csharp_lexer.ll"
return csharp::Token_NULL;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 319 "csharp_lexer.ll"
return csharp::Token_OBJECT;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 320 "csharp_lexer.ll"
return csharp::Token_OPERATOR;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 321 "csharp_lexer.ll"
return csharp::Token_OUT;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 322 "csharp_lexer.ll"
return csharp::Token_OVERRIDE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 323 "csharp_lexer.ll"
return csharp::Token_PARAMS;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 324 "csharp_lexer.ll"
return csharp::Token_PRIVATE;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 325 "csharp_lexer.ll"
return csharp::Token_PROTECTED;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 326 "csharp_lexer.ll"
return csharp::Token_PUBLIC;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 327 "csharp_lexer.ll"
return csharp::Token_READONLY;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 328 "csharp_lexer.ll"
return csharp::Token_REF;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 329 "csharp_lexer.ll"
return csharp::Token_RETURN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 330 "csharp_lexer.ll"
return csharp::Token_SBYTE;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 331 "csharp_lexer.ll"
return csharp::Token_SEALED;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 332 "csharp_lexer.ll"
return csharp::Token_SHORT;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 333 "csharp_lexer.ll"
return csharp::Token_SIZEOF;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 334 "csharp_lexer.ll"
return csharp::Token_STACKALLOC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 335 "csharp_lexer.ll"
return csharp::Token_STATIC;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 336 "csharp_lexer.ll"
return csharp::Token_STRING;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 337 "csharp_lexer.ll"
return csharp::Token_STRUCT;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 338 "csharp_lexer.ll"
return csharp::Token_SWITCH;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 339 "csharp_lexer.ll"
return csharp::Token_THIS;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 340 "csharp_lexer.ll"
return csharp::Token_THROW;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 341 "csharp_lexer.ll"
return csharp::Token_TRUE;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 342 "csharp_lexer.ll"
return csharp::Token_TRY;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 343 "csharp_lexer.ll"
return csharp::Token_TYPEOF;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 344 "csharp_lexer.ll"
return csharp::Token_UINT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 345 "csharp_lexer.ll"
return csharp::Token_ULONG;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 346 "csharp_lexer.ll"
return csharp::Token_UNCHECKED;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 347 "csharp_lexer.ll"
return csharp::Token_UNSAFE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 348 "csharp_lexer.ll"
return csharp::Token_USHORT;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 349 "csharp_lexer.ll"
return csharp::Token_USING;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 350 "csharp_lexer.ll"
return csharp::Token_VIRTUAL;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 351 "csharp_lexer.ll"
return csharp::Token_VOID;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 352 "csharp_lexer.ll"
return csharp::Token_VOLATILE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 353 "csharp_lexer.ll"
return csharp::Token_WHILE;
	YY_BREAK
/* TODO: what to do with those non-keyword identifiers?

"add"           return csharp::Token_ADD;
"alias"         return csharp::Token_ALIAS;
"get"           return csharp::Token_GET;
"global"        return csharp::Token_GLOBAL;
"partial"       return csharp::Token_PARTIAL;
"remove"        return csharp::Token_REMOVE;
"set"           return csharp::Token_SET;
"value"         return csharp::Token_VALUE;
"where"         return csharp::Token_WHERE;
"yield"         return csharp::Token_YIELD;
 */
/* the pre-processor */

case 137:
YY_RULE_SETUP
#line 375 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_DEFINE);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 376 "csharp_lexer.ll"
BEGIN(PP_DECLARATION);     PP_PROCESS_TOKEN(PP_UNDEF);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 377 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_IF);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 378 "csharp_lexer.ll"
BEGIN(PP_IF_CLAUSE);       PP_PROCESS_TOKEN(PP_ELIF);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 379 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ELSE);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 380 "csharp_lexer.ll"
BEGIN(PP_EXPECT_NEW_LINE); PP_PROCESS_TOKEN(PP_ENDIF);
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 381 "csharp_lexer.ll"
BEGIN(PP_LINE);            PP_PROCESS_TOKEN(PP_LINE);
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 382 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ERROR);
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 383 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_WARNING);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 384 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_REGION);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 385 "csharp_lexer.ll"
BEGIN(PP_MESSAGE); PP_PROCESS_TOKEN(PP_ENDREGION);
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 386 "csharp_lexer.ll"
{
    if( _G_parser->compatibility_mode() >= csharp::csharp20_compatibility ) {
      BEGIN(PP_PRAGMA); PP_PROCESS_TOKEN(PP_PRAGMA);
    }
    else {
      BEGIN(INITIAL);
      _G_parser->report_problem( csharp::error,
        "#pragma directives are not supported by C# 1.0" );
      return csharp::Token_INVALID;
    }
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 397 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::error,
      std::string("Invalid pre-processor directive:\n") + yytext );
    return csharp::Token_INVALID;
}
	YY_BREAK


case YY_STATE_EOF(PP_EXPECT_NEW_LINE):
case YY_STATE_EOF(PP_DECLARATION):
case YY_STATE_EOF(PP_IF_CLAUSE):
case YY_STATE_EOF(PP_LINE):
case YY_STATE_EOF(PP_MESSAGE):
case YY_STATE_EOF(PP_PRAGMA):
#line 405 "csharp_lexer.ll"
return csharp_pp::Token_EOF;
	YY_BREAK


case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 410 "csharp_lexer.ll"
return csharp_pp::Token_PP_NEW_LINE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 411 "csharp_lexer.ll"
return csharp_pp::Token_PP_INVALID;
	YY_BREAK


case 152:
YY_RULE_SETUP
#line 415 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 416 "csharp_lexer.ll"
{
    _G_parser->report_problem( csharp::error,
      "You may not define ``true'' or ``false'' with #define or #undef" );
    return csharp_pp::Token_PP_CONDITIONAL_SYMBOL;  // we could do Token_INVALID here,
    // but this way the error is shown and the parser continues, I prefer this.
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 422 "csharp_lexer.ll"
return csharp_pp::Token_PP_CONDITIONAL_SYMBOL; // ...including keywords
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 423 "csharp_lexer.ll"
return csharp_pp::Token_PP_NEW_LINE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 424 "csharp_lexer.ll"
return csharp_pp::Token_PP_INVALID;
	YY_BREAK


case 157:
YY_RULE_SETUP
#line 428 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 429 "csharp_lexer.ll"
return csharp_pp::Token_PP_EQUAL;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 430 "csharp_lexer.ll"
return csharp_pp::Token_PP_NOT_EQUAL;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 431 "csharp_lexer.ll"
return csharp_pp::Token_PP_LOG_AND;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 432 "csharp_lexer.ll"
return csharp_pp::Token_PP_LOG_OR;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 433 "csharp_lexer.ll"
return csharp_pp::Token_PP_BANG;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 434 "csharp_lexer.ll"
return csharp_pp::Token_PP_TRUE;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 435 "csharp_lexer.ll"
return csharp_pp::Token_PP_FALSE;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 436 "csharp_lexer.ll"
return csharp_pp::Token_PP_LPAREN;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 437 "csharp_lexer.ll"
return csharp_pp::Token_PP_RPAREN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 438 "csharp_lexer.ll"
return csharp_pp::Token_PP_CONDITIONAL_SYMBOL;
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 439 "csharp_lexer.ll"
return csharp_pp::Token_PP_NEW_LINE;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 440 "csharp_lexer.ll"
return csharp_pp::Token_PP_INVALID;
	YY_BREAK


case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 444 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 445 "csharp_lexer.ll"
return csharp::Token_INVALID;
	YY_BREAK


case 172:
YY_RULE_SETUP
#line 449 "csharp_lexer.ll"
/* skip */ ;
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 450 "csharp_lexer.ll"
return csharp_pp::Token_PP_NEW_LINE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 451 "csharp_lexer.ll"
return csharp_pp::Token_PP_LINE_NUMBER;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 452 "csharp_lexer.ll"
return csharp_pp::Token_PP_FILE_NAME;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 453 "csharp_lexer.ll"
return csharp_pp::Token_PP_DEFAULT;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 454 "csharp_lexer.ll"
return csharp_pp::Token_PP_IDENTIFIER_OR_KEYWORD;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 455 "csharp_lexer.ll"
return csharp_pp::Token_PP_INVALID;
	YY_BREAK


case 179:
YY_RULE_SETUP
#line 459 "csharp_lexer.ll"
return csharp_pp::Token_PP_MESSAGE;
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 460 "csharp_lexer.ll"
return csharp_pp::Token_PP_NEW_LINE;
	YY_BREAK


case 181:
YY_RULE_SETUP
#line 464 "csharp_lexer.ll"
return csharp_pp::Token_PP_PRAGMA_TEXT;
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 465 "csharp_lexer.ll"
return csharp_pp::Token_PP_NEW_LINE;
	YY_BREAK

/* identifiers and number literals */
case 183:
YY_RULE_SETUP
#line 471 "csharp_lexer.ll"
return csharp::Token_IDENTIFIER;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 473 "csharp_lexer.ll"
return csharp::Token_INTEGER_LITERAL;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 474 "csharp_lexer.ll"
return csharp::Token_REAL_LITERAL;
	YY_BREAK
/* everything else is not a valid lexeme */
case 186:
YY_RULE_SETUP
#line 479 "csharp_lexer.ll"
return csharp::Token_INVALID;
	YY_BREAK
/* some additional checking for unclosed #ifs and #regions at the EOF */

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PP_SKIPPED_SECTION_PART):
#line 485 "csharp_lexer.ll"
{
  cleanup();
  return 0;
}
	YY_BREAK

case 187:
YY_RULE_SETUP
#line 491 "csharp_lexer.ll"
ECHO;
	YY_BREAK
#line 4551 "csharp_lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1291 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1291 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1290);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 491 "csharp_lexer.ll"



void lexer_restart(csharp* parser) {
  _G_parser = parser;
  _G_pp_root_scope = 0;
  yyrestart(NULL);
  BEGIN(INITIAL); // is not set automatically by yyrestart()
  YY_USER_INIT
}

csharp_pp_scope* pp_current_scope()
{
  if (_G_pp_root_scope == 0)
    {
      _G_pp_root_scope = new csharp_pp_scope(_G_parser);
    }
  return _G_pp_root_scope->current_scope();
}

void cleanup()
{
  // check for open scopes, and pop them / report errors as needed
  if (_G_pp_root_scope != 0)
    {
      csharp_pp_scope* current_scope = pp_current_scope();
      csharp_pp_scope::scope_type scope_type = current_scope->type();

      while (scope_type != csharp_pp_scope::type_root)
        {
          if (scope_type == csharp_pp_scope::type_if)
            {
              _G_parser->report_problem( csharp::error,
                "Encountered end of file in an unclosed #if/#elif/#else section" );
            }
          else if (scope_type == csharp_pp_scope::type_region)
            {
              _G_parser->report_problem( csharp::error,
                "Encountered end of file in an unclosed #region section" );
            }

          if ( !current_scope->pop_scope(scope_type, &current_scope) )
            break;

          scope_type = current_scope->type();
        }

      delete _G_pp_root_scope;
      _G_pp_root_scope = 0;
    }
}

int yywrap() { return 1; }

