#line 2 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#line 4 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[518] =
    {   0,
        1,    1,  130,  130,   59,   59,  106,  106,  109,  109,
      125,  125,  139,  137,  138,    1,  137,  138,    2,  138,
        2,  137,  138,  137,  138,   13,  137,  138,  137,  138,
       22,  137,  138,    7,  137,  138,    8,  137,  138,   18,
      137,  138,   17,  137,  138,   11,  137,  138,  137,  138,
       14,  137,  138,   12,  135,  137,  138,  135,  137,  138,
       15,  137,  138,    4,  137,  138,   16,  137,  138,   19,
      137,  138,   20,  137,  138,  133,  134,  137,  138,   71,
      137,  138,  134,  137,  138,  134,  137,  138,  134,  137,
      138,    9,  137,  138,   21,  137,  138,   10,  137,  138,

      130,  138,  129,  138,  129,  138,  131,  138,   70,  138,
       59,   70,  138,   60,  138,   60,   70,  138,   61,   70,
      138,   69,   70,  138,   70,  138,   70,  138,   70,  138,
       70,  138,  106,  138,  103,  138,  103,  138,  105,  138,
      107,  138,  108,  138,  123,  138,  109,  123,  138,  110,
      138,  110,  123,  138,  113,  123,  138,  123,  138,  121,
      123,  138,  112,  123,  138,  120,  123,  138,  121,  123,
      138,  122,  123,  138,  121,  123,  138,  121,  123,  138,
      121,  123,  138,  121,  123,  138,  121,  123,  138,  125,
      127,  138,  124,  138,  124,  127,  138,  126,  127,  138,

      138,  101,  138,   73,  138,   73,  138,  138,  138,   86,
      138,   80,  138,   81,  138,   88,  138,   89,  138,  138,
       91,  138,  100,  138,16483,   77,  138,   76,  138,   82,
      138,   90,  138,  100,  138,16482,16483,   78,  138,  138,
       79,  138,   84,  138,  138,   83,  138,   87,  138,    1,
        2,  136,   52,   53,    3,    5,    6,  135,    4,  134,
      133,  134,  128,  134,  134,  130,  129,  131,  131,  132,
       59,   60,  106,  103,  104,  109,  110,  111,  121,  112,
      121,  121,  121,  121,  121,  121,  121,  125,  124,   73,
      102,   72,   92,  100,16483, 8291,16459,   76, 8290, 8291,

      100,16482,16483,   97,  100,  100,  100,  100,  100,  136,
        3,  134,  134,  104,  111,  121,  121,  121,  121,  121,
      121,  102,   96,   95,   72,   85,  100,  100,  100,  100,
      100, 8267,  100,  100,  100,  100,   74,   46,   47,  134,
       68,  121,  121,  117,  121,  121,  121,  121,   85,   85,
       85,   85,  100,  100,  100,  100,  100,  100,  100,  100,
       54,   48,   49,   25,  134,  121,  121,  121,  118,  121,
      121,   94,   85,   85,   85,   85,  100,  100,  100,  100,
      100,  100,  100,   58,   50,   55,   28,   62,  121,  114,
      121,  121,  121,   85,   85,   85,   85,  100,  100,  100,

      100,  100,  100,   56,   63,  121,  121,  121,   85,   85,
       85,  100,  100,  100,  100,  100,  100,   57,  116,  121,
      121,  119,  121,   85,   85,   85,  100,  100,  100,  100,
      100,  100,   43,   51,   64,  115,  121,   93,   85,   85,
       85,  100,  100,  100,  100,  100,   30,   67,   85,   85,
      100,  100,  100,   37,   32,   23,   66,   65,   85,   85,
      100,  100,   44,   31,   41,   24,   85,  100,  100,   26,
       33,   29,   85,  100,  100,   85,  100,  100,   40,   42,
       85,  100,  100,   85,  100,  100,   85,  100,  100,   34,
       45,   85,  100,  100,   36,   85,  100,  100,   27,   85,

      100,  100,   85,  100,  100,   85,  100,  100,   85,  100,
      100,   85,  100,   39,   85,   35,   38
    } ;

static yyconst flex_int16_t yy_accept[667] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
       11,   12,   13,   13,   13,   14,   16,   19,   21,   24,
       26,   29,   31,   34,   37,   40,   43,   46,   49,   51,
       54,   58,   61,   64,   67,   70,   73,   76,   80,   83,
       86,   89,   92,   95,   98,  101,  103,  105,  107,  109,
      111,  114,  116,  119,  122,  125,  127,  129,  131,  133,
      135,  137,  139,  141,  143,  145,  147,  150,  152,  155,
      158,  160,  163,  166,  169,  172,  175,  178,  181,  184,
      187,  190,  193,  195,  198,  201,  202,  204,  206,  208,
      209,  210,  212,  214,  216,  218,  220,  221,  223,  226,

      228,  230,  232,  234,  238,  240,  241,  243,  245,  246,
      248,  250,  251,  252,  252,  253,  253,  254,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  256,
      257,  258,  259,  260,  261,  263,  264,  265,  266,  267,
      268,  269,  270,  271,  272,  273,  273,  273,  273,  273,
      273,  274,  275,  275,  276,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
      291,  291,  292,  292,  292,  292,  292,  292,  293,  294,
      294,  294,  296,  297,  297,  298,  298,  299,  299,  301,
      304,  305,  306,  307,  308,  309,  310,  310,  310,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  312,  313,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  315,  315,  316,
      317,  318,  319,  320,  321,  322,  322,  323,  323,  324,
      324,  324,  325,  326,  327,  327,  328,  329,  330,  331,
      332,  333,  333,  334,  335,  336,  337,  337,  338,  338,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      340,  340,  340,  340,  340,  340,  340,  341,  341,  342,
      342,  342,  342,  342,  342,  342,  343,  344,  346,  347,
      348,  349,  349,  349,  350,  351,  352,  353,  354,  355,

      356,  357,  357,  358,  359,  360,  361,  361,  361,  361,
      361,  361,  362,  362,  362,  362,  362,  363,  363,  363,
      363,  363,  364,  364,  366,  366,  366,  366,  366,  366,
      366,  366,  367,  368,  369,  371,  372,  372,  373,  374,
      375,  376,  377,  378,  379,  380,  381,  382,  383,  384,
      384,  384,  384,  384,  384,  384,  384,  385,  385,  386,
      386,  386,  387,  387,  387,  388,  388,  388,  388,  388,
      388,  388,  388,  389,  390,  392,  393,  394,  394,  395,
      396,  397,  398,  399,  400,  401,  402,  403,  404,  404,
      404,  404,  404,  404,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  406,  406,
      407,  408,  409,  409,  410,  411,  412,  413,  414,  415,
      416,  417,  418,  418,  418,  418,  418,  418,  418,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  421,  422,  424,  424,  425,  426,
      427,  428,  429,  430,  431,  432,  433,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  436,  438,
      439,  440,  441,  442,  443,  444,  445,  446,  447,  447,
      447,  447,  447,  447,  447,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  449,  450,
      451,  452,  453,  454,  454,  455,  455,  455,  455,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  457,  457,
      458,  459,  460,  461,  462,  463,  463,  463,  463,  463,
      464,  464,  464,  465,  465,  466,  466,  466,  467,  468,
      469,  470,  470,  471,  471,  472,  472,  472,  472,  472,
      473,  474,  475,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  477,  478,  479,  479,  479,  480,  480,  480,
      481,  481,  481,  482,  483,  484,  484,  484,  484,  484,
      484,  484,  484,  485,  486,  487,  487,  487,  487,  487,

      487,  487,  487,  488,  489,  490,  491,  491,  491,  491,
      491,  492,  492,  493,  494,  495,  495,  496,  496,  496,
      496,  497,  498,  499,  500,  500,  500,  500,  501,  502,
      503,  503,  503,  503,  504,  505,  506,  506,  506,  506,
      507,  508,  509,  509,  509,  509,  510,  511,  512,  512,
      512,  512,  513,  514,  514,  514,  515,  516,  517,  517,
      517,  517,  517,  517,  518,  518
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,   10,    6,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   30,   30,   31,   30,   30,
       32,   32,   32,   32,   32,   33,   32,   32,   34,   32,
       32,   35,   32,   32,   36,   32,   32,   36,   37,   32,
       38,   39,   40,   41,   42,    6,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   52,   65,
       66,   52,   67,   68,   69,   70,    6,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[71] =
    {   0,
        1,    2,    3,    3,    4,    5,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    5,    5,    8,    8,
        8,    8,    9,   10,    5,    5,    5,    5,    5,   11,
       11,   12,   12,   12,   12,   12,   12,    6,   13,    6,
        5,   12,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,    5,    5,   14,    5
    } ;

static yyconst flex_int16_t yy_base[701] =
    {   0,
        0,    0,   68,   70,   73,   77,   92,   98,  138,    0,
       83,  100,  208,    0, 1816, 1817,   92, 1817, 1812,   76,
     1817,  254, 1817, 1817, 1817, 1817, 1817, 1817,   82, 1788,
       91,  106, 1817, 1789, 1817, 1817, 1817,  252, 1789,    0,
     1768, 1750, 1817, 1817, 1817,    0, 1817, 1806,   93, 1817,
      132, 1817, 1805, 1817, 1817, 1756, 1749, 1758,  230,    0,
     1817, 1801,  284, 1817, 1817, 1817,  290, 1817, 1800, 1817,
     1786,    0,  294, 1817,  298, 1817,  305,  309,  313,  317,
      323,    0, 1817, 1798, 1817, 1817, 1817, 1817, 1797,  302,
      259, 1817, 1817, 1817, 1817, 1817,  284, 1817,  344, 1817,

      373, 1817, 1817,  396, 1776,  348, 1817, 1817,    0, 1817,
     1817,  348, 1817,  315, 1817,  333, 1817, 1817, 1737, 1746,
     1731,  296, 1748, 1751,  330, 1742, 1745,  312,    0, 1817,
     1817,  387, 1767,    0,  409, 1817, 1728, 1723,    0, 1817,
      340,  348, 1817,  356, 1817, 1726, 1731,   45,   57, 1742,
        0, 1817,  379, 1817,  384,  390, 1817,    0,    0,  391,
      428,  433,  437,  441,  445,  449,  453,    0, 1817, 1817,
      395, 1817,  397, 1742, 1727, 1740, 1739,    0, 1817,  474,
     1742,  481, 1817,  470,  506, 1764,  521,  491, 1817, 1763,
     1817,  464,  522,  530,  554,  538, 1709,  482,  492,  521,

     1715, 1720, 1717, 1716,  382,  464, 1718, 1712, 1710,  255,
     1721, 1710, 1724, 1707, 1713,    0, 1720, 1746, 1702, 1701,
     1707, 1698, 1695, 1696, 1703,  525,  527,  532,    0,  559,
      567,  584,  588,  593,  597,  533,  552,  555, 1817, 1700,
     1704, 1817,    0, 1817,  590,  475,  613,  622,  646,  644,
     1730,  418,  659,  666,  687,  680, 1684, 1817, 1710, 1817,
     1694, 1687, 1702, 1697, 1685, 1699, 1698,  320, 1682, 1817,
     1686, 1692, 1678, 1686, 1683, 1691, 1687, 1676, 1817, 1673,
     1691, 1673, 1689, 1684, 1679,  682,  650,  691,  701,  705,
      719, 1667, 1674,  723,  498,    0,  405,  730,  744,  765,

      737,  544,  751,  758,  795,  782,  607, 1667, 1664, 1677,
     1675, 1817, 1663, 1661, 1665, 1673, 1817, 1659, 1656, 1670,
     1669, 1817, 1659,    0,  506, 1654, 1653, 1649, 1649, 1665,
     1664,  772,  784,  808,  812,  826, 1657, 1817,  830,  695,
        0,  536,  837,  844,  865,  853,  858,  895,  882, 1664,
     1641, 1658, 1642, 1661, 1640, 1651, 1655, 1641, 1817, 1638,
     1646, 1817, 1640, 1653, 1652, 1648, 1638, 1628, 1647, 1644,
     1615, 1597, 1817,  908,  869,  912,  925, 1602,  884,  761,
        0,  548,  932,  961,  946,  954,  991,  978, 1592, 1590,
     1592, 1592,  535, 1817, 1559, 1553, 1550,  374, 1517, 1520,

     1497, 1472, 1473, 1475, 1469, 1445, 1438, 1817, 1448,  937,
      967,  981, 1431, 1004,    0,  625, 1024, 1045, 1013, 1034,
     1075, 1041, 1443, 1429, 1430, 1410, 1406, 1386, 1817, 1397,
     1389,  444, 1375, 1362, 1368, 1308,  530, 1290, 1309, 1290,
     1299, 1292, 1302, 1049, 1062, 1079, 1300, 1088,    0,  630,
     1095, 1116, 1110, 1132,  720, 1149, 1817, 1302, 1296, 1299,
     1296, 1280, 1278, 1291,   49, 1288, 1287, 1817, 1277, 1253,
     1270, 1256, 1265, 1264, 1248, 1247, 1235, 1817, 1120, 1817,
     1136,    0,  639, 1154,  750, 1161,  783, 1163, 1250, 1227,
     1238, 1225, 1234, 1219, 1817, 1209, 1197, 1213, 1196, 1202,

     1205, 1204, 1198, 1184, 1190, 1172, 1171, 1817, 1165,  654,
      784, 1175, 1185, 1168, 1817, 1162, 1175, 1177, 1817, 1163,
     1148, 1145, 1137, 1150, 1136, 1137, 1147, 1817, 1136, 1817,
     1817, 1817,  709, 1187, 1192, 1131, 1115, 1116, 1111, 1817,
     1108, 1102, 1817, 1079, 1817, 1101, 1078, 1817,  728, 1197,
     1199, 1077, 1089, 1071, 1817, 1075, 1064, 1066, 1066, 1062,
      735, 1209, 1214, 1059, 1052, 1038, 1039, 1042, 1019, 1031,
     1028,  816, 1221, 1223, 1011, 1002, 1817, 1004,  980, 1817,
      996,  577,  835, 1230, 1235,  971,  987,  974,  963,  942,
      934,  928,  842, 1245, 1247,  917,  931,  916,  867,  877,

      860,  814,  847, 1252, 1257, 1817,  824,  777,  768,  760,
     1817,  776,  862, 1259, 1269,  747, 1817,  746,  732,  718,
      874, 1274, 1281, 1817,  645,  626,  637,  880, 1283, 1290,
      592,  586,  587,  899, 1295, 1305,  582,  566,  549,  903,
     1307, 1312,  537,  509,  505,  916, 1317,  921,  434,  395,
      350,  930,  945,  343,  312, 1817, 1817, 1817,  304,  278,
      234,   82,   60, 1817, 1817, 1356, 1370, 1384, 1398, 1412,
     1419, 1431, 1445, 1459, 1473, 1480, 1485, 1497, 1511, 1524,
     1534,  956, 1548, 1562, 1576, 1590, 1604, 1618, 1625, 1635,
     1643, 1649, 1660, 1674,  961, 1007, 1008, 1040, 1051, 1066

    } ;

static yyconst flex_int16_t yy_def[701] =
    {   0,
      665,    1,  666,  666,  667,  667,  668,  668,  665,    9,
      669,  669,  665,   13,  665,  665,  665,  665,  665,  670,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  671,  665,  671,
      671,  671,  665,  665,  665,  672,  665,  665,  673,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  674,
      665,  665,  675,  665,  665,  665,  665,  665,  665,  665,
      665,  676,  665,  665,  677,  665,  677,  677,  677,  677,
      677,  678,  665,  665,  665,  665,  665,  665,  665,  679,
      665,  665,  665,  665,  665,  665,  665,  665,  680,  665,

      665,  665,  665,  680,  665,  681,  665,  665,  682,  665,
      665,  665,  665,  670,  665,  683,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  684,  665,
      665,  665,  665,  671,  671,  665,  671,  671,  672,  665,
      673,  673,  665,  665,  665,  665,  665,  665,  665,  665,
      674,  665,  675,  665,  685,  665,  665,  686,  676,  665,
      677,  677,  677,  677,  677,  677,  677,  678,  665,  665,
      679,  665,  687,  665,  665,  665,  665,  688,  665,  665,
      689,  680,  665,  690,  665,  665,  665,  665,  665,  104,
      665,  691,  691,  691,  691,  691,  692,  670,  670,  683,

      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  684,  671,  671,  665,  665,
      665,  665,  665,  665,  665,  675,  675,  685,  686,  677,
      677,  677,  677,  677,  677,  679,  679,  687,  665,  665,
      665,  665,  688,  665,  693,  691,  691,  691,  195,  691,
      665,  694,  691,  691,  195,  691,  692,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  671,  665,  665,  665,
      665,  665,  665,  665,  665,  677,  677,  677,  677,  677,
      677,  665,  665,  665,  665,  695,  665,  691,  691,  249,

      691,  694,  691,  691,  195,  691,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  671,  665,  665,  665,  665,  665,  665,
      665,  677,  677,  677,  677,  677,  665,  665,  665,  665,
      696,  665,  691,  691,  249,  691,  691,  195,  691,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  677,  677,  677,  677,  665,  665,  665,
      697,  665,  691,  249,  691,  691,  195,  691,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  665,  665,  665,  677,
      677,  677,  665,  665,  698,  665,  691,  249,  691,  691,
      195,  691,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  677,  677,  677,  665,  665,  699,  665,
      691,  249,  691,  691,  691,  691,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  677,  665,
      665,  700,  665,  691,  691,  691,  691,  691,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      691,  691,  691,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  691,  691,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  691,
      691,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  691,  691,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  691,  691,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  691,  691,  665,  665,  665,  665,  665,
      665,  665,  665,  691,  691,  665,  665,  665,  665,  665,

      665,  665,  665,  691,  691,  665,  665,  665,  665,  665,
      665,  665,  665,  691,  691,  665,  665,  665,  665,  665,
      665,  691,  691,  665,  665,  665,  665,  665,  691,  691,
      665,  665,  665,  665,  691,  691,  665,  665,  665,  665,
      691,  691,  665,  665,  665,  665,  691,  691,  665,  665,
      665,  665,  691,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,    0,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665

    } ;

static yyconst flex_int16_t yy_nxt[1888] =
    {   0,
       16,   17,   18,   19,   17,   16,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   16,   31,   32,
       32,   32,   33,   34,   16,   35,   16,   36,   37,   38,
       38,   38,   38,   38,   38,   38,   38,   39,   16,   16,
       16,   38,   40,   40,   41,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   42,   40,   40,   40,   40,   43,   44,   45,   16,
       47,   48,   47,   48,   51,   52,   53,   51,   51,   52,
       53,   51,  115,   54,   55,   83,   84,   54,   55,  221,
       49,  496,   49,  112,   61,   62,  112,  129,   63,  497,

       61,   62,   83,   84,   63,  222,   85,  223,  130,  132,
      132,  132,  132,  224,  116,  142,   56,   57,   58,  664,
       56,   57,   58,   85,  132,  132,  132,  132,  663,   64,
       59,   65,  143,  144,   59,   64,  144,   65,   66,   67,
       68,   69,   67,   66,   66,   70,   66,   66,   66,   66,
       66,   66,   66,   71,   66,   66,   72,   72,   72,   72,
       73,   74,   66,   66,   66,   66,   66,   75,   75,   75,
       75,   75,   75,   75,   75,   66,   66,   76,   66,   75,
       77,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   78,   79,   75,   75,   75,   75,   75,   80,

       75,   81,   75,   75,   66,   66,   66,   66,   86,   87,
       88,   89,   87,   86,   90,   86,   91,   92,   93,   94,
       95,   96,   86,   97,   98,   86,   99,   99,   99,   99,
      100,  101,   86,   86,   86,  102,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  105,  106,  107,  108,  104,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,  109,  110,   86,  111,  117,  662,
      118,  135,  135,  135,  135,  135,  135,  135,  135,  149,
      154,  156,  150,  135,  156,  160,  119,  120,  160,  178,

      121,  270,  174,  175,  122,  271,  176,  123,  172,  124,
      179,  125,  177,  126,  127,  128,  159,  159,  159,  159,
      661,  115,  155,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  199,
      173,  159,  159,  159,  159,  180,  180,  180,  180,  112,
      660,  204,  112,  116,  213,  163,  205,  144,  214,  181,
      144,  659,  665,  165,  162,  167,  315,  183,  215,  164,
      142,  200,  208,  166,  185,  185,  185,  185,  193,  665,
      316,  194,  184,  195,  196,  154,  209,  665,  186,  210,
      227,  156,  160,  193,  156,  160,  187,  188,  188,  188,

      188,  172,  658,  237,  194,  132,  132,  132,  132,  656,
      195,  181,  195,  196,  263,  432,  264,  155,  433,  189,
      185,  185,  228,  342,  342,  190,  190,  190,  190,  190,
      190,  190,  190,  173,  184,  238,  655,  190,  135,  135,
      135,  135,  135,  135,  135,  135,  159,  159,  159,  159,
      135,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  180,  180,  180,  180,  181,
      654,  230,  180,  180,  180,  180,  232,  465,  115,  466,
      665,  231,  188,  188,  188,  188,  665,  183,  115,  233,

      247,  234,  184,  248,  183,  249,  250,  185,  185,  185,
      185,  265,  235,  184,  189,  247,  340,  340,  340,  184,
      116,  186,  185,  185,  185,  185,  248,  199,  266,  251,
      116,  154,  249,  154,  249,  250,  186,  181,  227,  172,
      253,  253,  253,  253,  187,  181,  185,  185,  254,  254,
      254,  651,  366,  181,  382,  382,  256,  256,  172,  200,
      184,  237,  367,  155,  650,  155,  416,  416,  184,  181,
      228,  173,  255,  255,  255,  255,  184,  159,  159,  159,
      159,  427,  649,  255,  255,  159,  159,  159,  159,  471,
      173,  472,  184,  238,  645,  428,  255,  255,  255,  255,

      255,  255,  159,  159,  159,  159,  159,  159,  159,  159,
      287,  159,  159,  159,  159,  159,  159,  159,  159,  591,
      294,  286,  644,  295,  643,  296,  297,  592,  665,  639,
      288,  298,  298,  298,  298,  294,  638,  665,  637,  290,
      299,  299,  299,  450,  450,  289,  295,  291,  483,  483,
      350,  184,  296,  351,  296,  297,  352,  510,  510,  665,
      184,  665,  301,  301,  300,  300,  300,  300,  159,  159,
      159,  159,  533,  533,  181,  300,  300,  303,  303,  303,
      303,  181,  184,  633,  304,  304,  304,  632,  300,  300,
      300,  300,  300,  300,  631,  181,  333,  184,  306,  306,

      159,  159,  159,  159,  184,  305,  305,  305,  305,  159,
      159,  159,  159,  380,  380,  380,  305,  305,  184,  159,
      159,  159,  159,  159,  159,  159,  159,  549,  549,  305,
      305,  305,  305,  305,  305,  181,  332,  159,  159,  159,
      159,  339,  339,  339,  339,  665,  561,  561,  343,  343,
      343,  343,  665,  572,  572,  346,  346,  334,  184,  665,
      335,  336,  344,  344,  344,  665,  181,  627,  184,  347,
      347,  347,  347,  181,  626,  184,  304,  304,  304,  380,
      380,  380,  184,  345,  345,  345,  345,  625,  184,  184,
      159,  159,  159,  159,  345,  345,  184,  181,  181,  665,

      349,  349,  159,  159,  159,  159,  624,  345,  345,  345,
      345,  345,  345,  348,  348,  348,  348,  620,  374,  619,
      184,  184,  184,  618,  348,  348,  159,  159,  159,  159,
      159,  159,  159,  159,  583,  583,  617,  348,  348,  348,
      348,  348,  348,  375,  159,  159,  159,  159,  379,  379,
      379,  379,  665,  593,  593,  383,  383,  383,  383,  665,
      603,  603,  344,  344,  344,  613,  613,  376,  665,  377,
      616,  385,  385,  181,  612,  184,  386,  386,  386,  386,
      621,  621,  184,  384,  384,  384,  384,  159,  159,  159,
      159,  184,  628,  628,  384,  384,  184,  181,  634,  634,

      388,  388,  414,  414,  414,  414,  611,  384,  384,  384,
      384,  384,  384,  387,  387,  387,  387,  640,  640,  610,
      184,  646,  646,  609,  387,  387,  159,  159,  159,  159,
      159,  159,  159,  159,  652,  652,  181,  387,  387,  387,
      387,  387,  387,  159,  159,  159,  159,  665,  657,  657,
      417,  417,  417,  417,  411,  159,  159,  159,  159,  184,
      665,  665,  608,  410,  419,  419,  197,  197,  341,  181,
      184,  341,  420,  420,  420,  420,  607,  606,  412,  418,
      418,  418,  418,  184,  184,  159,  159,  159,  159,  602,
      418,  418,  184,  181,  601,  600,  422,  422,  444,  159,

      159,  159,  159,  418,  418,  418,  418,  418,  418,  421,
      421,  421,  421,  599,  381,  415,  184,  381,  415,  598,
      421,  421,  448,  448,  448,  448,  445,  446,  665,  597,
      596,  453,  453,  421,  421,  421,  421,  421,  421,  665,
      590,  589,  451,  451,  451,  451,  588,  449,  587,  181,
      449,  184,  454,  454,  454,  454,  181,  586,  482,  456,
      456,  482,  184,  452,  452,  452,  452,  159,  159,  159,
      159,  582,  184,  244,  452,  452,  244,  581,  580,  184,
      159,  159,  159,  159,  579,  578,  577,  452,  452,  452,
      452,  452,  452,  455,  455,  455,  455,  159,  159,  159,

      159,  576,  575,  571,  455,  455,  481,  481,  481,  481,
      665,  570,  569,  484,  484,  484,  484,  455,  455,  455,
      455,  455,  455,  568,  567,  665,  566,  479,  486,  486,
      565,  564,  560,  184,  485,  485,  485,  485,  159,  159,
      159,  159,  559,  558,  557,  485,  485,  181,  184,  556,
      487,  487,  487,  487,  509,  509,  509,  509,  485,  485,
      485,  485,  485,  485,  181,  555,  554,  488,  488,  665,
      184,  553,  511,  511,  511,  511,  665,  552,  181,  512,
      512,  513,  513,  532,  532,  532,  532,  184,  548,  547,
      665,  546,  184,  534,  534,  545,  544,  543,  542,  184,

      181,  184,  665,  535,  535,  550,  550,  181,  541,  540,
      551,  551,  665,  184,  181,  562,  562,  563,  563,  539,
      538,  537,  536,  184,  665,  184,  531,  573,  573,  181,
      184,  530,  574,  574,  529,  184,  665,  184,  181,  584,
      584,  585,  585,  528,  527,  665,  526,  184,  594,  594,
      181,  525,  184,  595,  595,  524,  523,  522,  521,  184,
      665,  184,  181,  604,  604,  605,  605,  665,  184,  520,
      614,  614,  181,  184,  665,  615,  615,  622,  622,  519,
      518,  517,  516,  184,  181,  184,  515,  623,  623,  665,
      184,  514,  629,  629,  508,  184,  181,  184,  665,  630,

      630,  635,  635,  507,  506,  181,  505,  184,  636,  636,
      665,  504,  184,  641,  641,  503,  502,  501,  500,  184,
      181,  184,  665,  642,  642,  647,  647,  181,  184,  499,
      648,  648,  665,  184,  498,  653,  653,  495,  494,  493,
      492,  491,  490,  184,  489,  184,  480,  478,  477,  476,
      184,  475,  474,  473,  470,  184,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,  114,  114,  469,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  134,  468,  467,  134,
      134,  139,  139,  464,  139,  139,  139,  139,  139,  463,
      139,  139,  139,  139,  139,  141,  141,  462,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  151,
      151,  461,  151,  151,  460,  151,  151,  151,  151,  151,
      151,  151,  151,  153,  153,  459,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  159,  458,  457,
      159,  159,  161,  447,  443,  161,  161,  168,  168,  442,

      168,  168,  168,  168,  168,  168,  441,  168,  168,  168,
      168,  171,  171,  440,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  182,  182,  182,  439,  438,
      182,  182,  437,  182,  182,  182,  182,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  198,  198,
      436,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  216,  216,  435,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  226,  226,  434,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      229,  229,  431,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  236,  236,  430,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  243,  243,
      429,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  244,  426,  425,  244,  244,  244,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  424,  423,  246,  246,  246,  257,  413,  409,  257,
      257,  408,  257,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,

      395,  394,  393,  392,  391,  390,  389,  378,  373,  372,
      371,  370,  369,  368,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  338,  337,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  314,  313,  312,  311,  310,  309,
      308,  307,  258,  251,  293,  292,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      269,  268,  267,  262,  261,  260,  259,  258,  665,  252,
      245,  242,  241,  240,  239,  225,  220,  219,  218,  217,
      133,  212,  211,  207,  206,  203,  202,  201,  191,  170,

      169,  158,  157,  152,  148,  147,  146,  145,  140,  138,
      137,  136,  133,  131,  113,  665,   15,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665
    } ;

static yyconst flex_int16_t yy_chk[1888] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    4,    4,    5,    5,    5,    5,    6,    6,
        6,    6,   20,    5,    5,   11,   11,    6,    6,  148,
        3,  465,    4,   17,    7,    7,   17,   29,    7,  465,

        8,    8,   12,   12,    8,  148,   11,  149,   29,   31,
       31,   31,   31,  149,   20,   49,    5,    5,    5,  663,
        6,    6,    6,   12,   32,   32,   32,   32,  662,    7,
        5,    7,   49,   51,    6,    8,   51,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   22,  661,
       22,   38,   38,   38,   38,   38,   38,   38,   38,   59,
       63,   67,   59,   38,   67,   73,   22,   22,   73,   97,

       22,  210,   91,   91,   22,  210,   91,   22,   90,   22,
       97,   22,   91,   22,   22,   22,   75,   75,   75,   75,
      660,  114,   63,   77,   77,   77,   77,   78,   78,   78,
       78,   79,   79,   79,   79,   80,   80,   80,   80,  116,
       90,   81,   81,   81,   81,   99,   99,   99,   99,  112,
      659,  122,  112,  114,  128,   78,  122,  144,  128,   99,
      144,  655,  141,   80,   77,   81,  268,   99,  128,   79,
      142,  116,  125,   80,  101,  101,  101,  101,  106,  141,
      268,  106,   99,  106,  106,  153,  125,  142,  101,  125,
      155,  156,  160,  106,  156,  160,  101,  104,  104,  104,

      104,  171,  654,  173,  106,  132,  132,  132,  132,  651,
      106,  104,  106,  106,  205,  398,  205,  153,  398,  104,
      252,  252,  155,  297,  297,  104,  104,  104,  104,  104,
      104,  104,  104,  171,  104,  173,  650,  104,  135,  135,
      135,  135,  135,  135,  135,  135,  161,  161,  161,  161,
      135,  162,  162,  162,  162,  163,  163,  163,  163,  164,
      164,  164,  164,  165,  165,  165,  165,  166,  166,  166,
      166,  167,  167,  167,  167,  180,  180,  180,  180,  192,
      649,  162,  182,  182,  182,  182,  164,  432,  198,  432,
      246,  163,  188,  188,  188,  188,  182,  180,  199,  165,

      184,  166,  192,  184,  182,  184,  184,  185,  185,  185,
      185,  206,  167,  246,  188,  184,  295,  295,  295,  182,
      198,  185,  187,  187,  187,  187,  184,  200,  206,  185,
      199,  226,  184,  227,  184,  184,  187,  193,  228,  236,
      193,  193,  193,  193,  187,  194,  302,  302,  194,  194,
      194,  645,  325,  196,  342,  342,  196,  196,  237,  200,
      193,  238,  325,  226,  644,  227,  382,  382,  194,  195,
      228,  236,  195,  195,  195,  195,  196,  230,  230,  230,
      230,  393,  643,  195,  195,  231,  231,  231,  231,  437,
      237,  437,  195,  238,  639,  393,  195,  195,  195,  195,

      195,  195,  232,  232,  232,  232,  233,  233,  233,  233,
      231,  234,  234,  234,  234,  235,  235,  235,  235,  582,
      245,  230,  638,  245,  637,  245,  245,  582,  247,  633,
      232,  247,  247,  247,  247,  245,  632,  248,  631,  234,
      248,  248,  248,  416,  416,  233,  245,  235,  450,  450,
      307,  247,  245,  307,  245,  245,  307,  483,  483,  250,
      248,  249,  250,  250,  249,  249,  249,  249,  287,  287,
      287,  287,  510,  510,  253,  249,  249,  253,  253,  253,
      253,  254,  250,  627,  254,  254,  254,  626,  249,  249,
      249,  249,  249,  249,  625,  256,  287,  253,  256,  256,

      286,  286,  286,  286,  254,  255,  255,  255,  255,  288,
      288,  288,  288,  340,  340,  340,  255,  255,  256,  289,
      289,  289,  289,  290,  290,  290,  290,  533,  533,  255,
      255,  255,  255,  255,  255,  455,  286,  291,  291,  291,
      291,  294,  294,  294,  294,  298,  549,  549,  298,  298,
      298,  298,  301,  561,  561,  301,  301,  289,  455,  299,
      290,  291,  299,  299,  299,  485,  303,  620,  298,  303,
      303,  303,  303,  304,  619,  301,  304,  304,  304,  380,
      380,  380,  299,  300,  300,  300,  300,  618,  485,  303,
      332,  332,  332,  332,  300,  300,  304,  306,  487,  511,

      306,  306,  333,  333,  333,  333,  616,  300,  300,  300,
      300,  300,  300,  305,  305,  305,  305,  612,  332,  610,
      306,  487,  511,  609,  305,  305,  334,  334,  334,  334,
      335,  335,  335,  335,  572,  572,  608,  305,  305,  305,
      305,  305,  305,  333,  336,  336,  336,  336,  339,  339,
      339,  339,  343,  583,  583,  343,  343,  343,  343,  344,
      593,  593,  344,  344,  344,  603,  603,  334,  346,  336,
      607,  346,  346,  347,  602,  343,  347,  347,  347,  347,
      613,  613,  344,  345,  345,  345,  345,  375,  375,  375,
      375,  346,  621,  621,  345,  345,  347,  349,  628,  628,

      349,  349,  379,  379,  379,  379,  601,  345,  345,  345,
      345,  345,  345,  348,  348,  348,  348,  634,  634,  600,
      349,  640,  640,  599,  348,  348,  374,  374,  374,  374,
      376,  376,  376,  376,  646,  646,  648,  348,  348,  348,
      348,  348,  348,  377,  377,  377,  377,  383,  652,  652,
      383,  383,  383,  383,  376,  410,  410,  410,  410,  648,
      653,  385,  598,  374,  385,  385,  682,  682,  695,  386,
      383,  695,  386,  386,  386,  386,  597,  596,  377,  384,
      384,  384,  384,  653,  385,  411,  411,  411,  411,  592,
      384,  384,  386,  388,  591,  590,  388,  388,  410,  412,

      412,  412,  412,  384,  384,  384,  384,  384,  384,  387,
      387,  387,  387,  589,  696,  697,  388,  696,  697,  588,
      387,  387,  414,  414,  414,  414,  411,  412,  419,  587,
      586,  419,  419,  387,  387,  387,  387,  387,  387,  417,
      581,  579,  417,  417,  417,  417,  578,  698,  576,  420,
      698,  419,  420,  420,  420,  420,  422,  575,  699,  422,
      422,  699,  417,  418,  418,  418,  418,  444,  444,  444,
      444,  571,  420,  700,  418,  418,  700,  570,  569,  422,
      445,  445,  445,  445,  568,  567,  566,  418,  418,  418,
      418,  418,  418,  421,  421,  421,  421,  446,  446,  446,

      446,  565,  564,  560,  421,  421,  448,  448,  448,  448,
      451,  559,  558,  451,  451,  451,  451,  421,  421,  421,
      421,  421,  421,  557,  556,  453,  554,  445,  453,  453,
      553,  552,  547,  451,  452,  452,  452,  452,  479,  479,
      479,  479,  546,  544,  542,  452,  452,  454,  453,  541,
      454,  454,  454,  454,  481,  481,  481,  481,  452,  452,
      452,  452,  452,  452,  456,  539,  538,  456,  456,  484,
      454,  537,  484,  484,  484,  484,  486,  536,  488,  486,
      486,  488,  488,  509,  509,  509,  509,  456,  529,  527,
      512,  526,  484,  512,  512,  525,  524,  523,  522,  486,

      513,  488,  534,  513,  513,  534,  534,  535,  521,  520,
      535,  535,  550,  512,  551,  550,  550,  551,  551,  518,
      517,  516,  514,  513,  562,  534,  507,  562,  562,  563,
      535,  506,  563,  563,  505,  550,  573,  551,  574,  573,
      573,  574,  574,  504,  503,  584,  502,  562,  584,  584,
      585,  501,  563,  585,  585,  500,  499,  498,  497,  573,
      594,  574,  595,  594,  594,  595,  595,  604,  584,  496,
      604,  604,  605,  585,  614,  605,  605,  614,  614,  494,
      493,  492,  491,  594,  615,  595,  490,  615,  615,  622,
      604,  489,  622,  622,  477,  605,  623,  614,  629,  623,

      623,  629,  629,  476,  475,  630,  474,  615,  630,  630,
      635,  473,  622,  635,  635,  472,  471,  470,  469,  623,
      636,  629,  641,  636,  636,  641,  641,  642,  630,  467,
      642,  642,  647,  635,  466,  647,  647,  464,  463,  462,
      461,  460,  459,  636,  458,  641,  447,  443,  442,  441,
      642,  440,  439,  438,  436,  647,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  670,  670,  435,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  671,  434,  433,  671,
      671,  672,  672,  431,  672,  672,  672,  672,  672,  430,
      672,  672,  672,  672,  672,  673,  673,  428,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  674,
      674,  427,  674,  674,  426,  674,  674,  674,  674,  674,
      674,  674,  674,  675,  675,  425,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  676,  424,  423,
      676,  676,  677,  413,  409,  677,  677,  678,  678,  407,

      678,  678,  678,  678,  678,  678,  406,  678,  678,  678,
      678,  679,  679,  405,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  680,  680,  680,  404,  403,
      680,  680,  402,  680,  680,  680,  680,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  683,  683,
      401,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  400,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  685,  685,  399,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      686,  686,  397,  686,  686,  686,  686,  686,  686,  686,

      686,  686,  686,  686,  687,  687,  396,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  688,  688,
      395,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  689,  392,  391,  689,  689,  689,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  691,
      691,  390,  389,  691,  691,  691,  692,  378,  372,  692,
      692,  371,  692,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  370,  369,
      368,  367,  366,  365,  364,  363,  361,  360,  358,  357,

      356,  355,  354,  353,  352,  351,  350,  337,  331,  330,
      329,  328,  327,  326,  323,  321,  320,  319,  318,  316,
      315,  314,  313,  311,  310,  309,  308,  293,  292,  285,
      284,  283,  282,  281,  280,  278,  277,  276,  275,  274,
      273,  272,  271,  269,  267,  266,  265,  264,  263,  262,
      261,  259,  257,  251,  241,  240,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  215,  214,  213,  212,  211,
      209,  208,  207,  204,  203,  202,  201,  197,  190,  186,
      181,  177,  176,  175,  174,  150,  147,  146,  138,  137,
      133,  127,  126,  124,  123,  121,  120,  119,  105,   89,

       84,   71,   69,   62,   58,   57,   56,   53,   48,   42,
       41,   39,   34,   30,   19,   15,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
#line 2 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* This file is part of kdev-pg-qt
   Copyright (C) 2006 Jakob Petsovits <jpetso@gmx.at>

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.
*/

#include <QtCore/QDebug>
// #include <iostream>
// #include <cstdio>
#include "kdev-pg.h"
#include "kdev-pg-parser.hh"

#include <QtCore/QFile>
#include <QtCore/QFileInfo>
#include <QtCore/QTextStream>

int inp();
void appendLineBuffer();
void newline();
void yyerror(const char* );
extern int yyLine;
extern int currentOffset;

namespace KDevPG
{
  extern QFile file;
  extern QFileInfo fileInfo;
  extern QTextStream checkOut;
}

#define YY_INPUT(buf, result, max_size) \
  { \
    int c = inp(); \
    result = (c == EOF) ? YY_NULL : (buf[0] = (char)c, 1); \
  }

#define YY_USER_ACTION  appendLineBuffer();

#define COPY_TO_YYLVAL(string, len) \
    yylval.str = (char*) calloc(len+1, sizeof(char)); \
    strncpy(yylval.str, string, len); \
    yylval.str[len] = '\0';
#define COPY_CODE_TO_YYLVAL(string, len) \
    if(KDevPG::globalSystem.beautifulCode) \
    { \
      COPY_TO_YYLVAL(string, len) \
    } \
    else \
    { \
      QByteArray tmp("\n\01!ASIgnore\"!!\n# "); \
      tmp += QString::number(firstCodeLine).toLocal8Bit(); \
      tmp += " \"" + KDevPG::fileInfo.absoluteFilePath().toLocal8Bit() + "\" 1\n"; \
      size_t memlen = tmp.size() + firstCodeColumn + len + 16 + 1; \
      yylval.str = (char*) calloc(memlen, sizeof(char)); \
      strncpy(yylval.str, tmp.data(), tmp.size()); \
      memset(yylval.str + tmp.size(), ' ', firstCodeColumn); \
      strncpy(yylval.str + tmp.size() + firstCodeColumn, yytext, len); \
      strncpy(yylval.str + memlen - 17, "\n\01!AS/Ignore\"!!\n", 16); \
      yylval.str[memlen-1] = '\0'; \
    }

#define ESCAPE_CHARACTER(chr) \
        yylval.str = (char*) calloc(2, sizeof(char)); yylval.str[0] = chr; yylval.str[1] = '\0'; return T_STRING;

namespace {
  enum RulePosition {
    RuleBody,
    RuleFooter,
    RuleLexer
  };
  RulePosition rulePosition = RuleBody;
  int openBrackets; // for rule arguments and regexp usage
  int firstCodeLine; // where the current code-block begins
  int firstCodeColumn;
}







#line 1264 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

#define INITIAL 0
#define CODE 1
#define PARSERCLASS 2
#define RULE_ARGUMENTS 3
#define RULE_PARAMETERS_HEADER 4
#define RULE_PARAMETERS_VARNAME 5
#define RULE_LEXER 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 105 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"



#line 1456 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 666 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1817 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 108 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 109 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 112 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; return ';';
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 113 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
if(rulePosition == RuleLexer) BEGIN(RULE_LEXER); else rulePosition = RuleFooter; return T_ARROW;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_INLINE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 116 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '(';
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 117 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ')';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 118 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '{';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 119 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '}';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ',';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 121 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '0';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 122 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '#';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '.';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ':';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 125 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '=';
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 126 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '+';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 127 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '*';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 128 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '?';
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '@';
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 130 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '|';
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 131 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '&';
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TRY_RECOVER;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 134 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TRY_ROLLBACK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CATCH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 137 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_EXPORT_MACRO;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 138 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_EXPORT_MACRO_HEADER;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 139 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_DECLARATION;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 140 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_DECLARATION;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 141 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_NAMESPACE_DECLARATION;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 142 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(PARSERCLASS); return T_PARSERCLASS_DECLARATION;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 143 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(PARSERCLASS); return T_LEXERCLASS_DECLARATION;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 144 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_INPUT_STREAM;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 145 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_DECLARATION;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 146 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_DECLARATION_HEADER;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_BITS_HEADER;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_HEADER;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 149 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_DECLARATION_HEADER;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 150 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_BITS_HEADER;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 151 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_INPUT_ENCODING;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 152 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TABLE_LEXER;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 153 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_SEQUENCE_LEXER;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 154 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_AST_BASE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 155 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PARSER_BASE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 156 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN_STREAM_BASE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 157 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_BIN;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 158 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 159 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_POST;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 160 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TERN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 161 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PAREN;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 162 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRIORITY;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 163 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; return T_LOPR;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 164 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleFooter; return T_ROPR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 165 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_LEFT_ASSOC;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 166 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_RIGHT_ASSOC;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 167 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_IS_LEFT_ASSOC;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 168 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_IS_RIGHT_ASSOC;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 169 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleLexer; return T_LEXER;
	YY_BREAK

case 59:
YY_RULE_SETUP
#line 172 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 173 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 174 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '(';
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 175 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PUBLIC;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 176 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PRIVATE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 177 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_PROTECTED;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_DECLARATION;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CONSTRUCTOR;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_DESTRUCTOR;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 181 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_BITS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 182 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); return ')';
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK

case 71:
YY_RULE_SETUP
#line 187 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    if (rulePosition == RuleBody) { /* use the arguments in a rule call */
      firstCodeLine = yyLine;
      openBrackets = 0;
      BEGIN(RULE_ARGUMENTS);
    }
    else if (rulePosition == RuleFooter) { /* declare the arguments */
      BEGIN(RULE_PARAMETERS_HEADER); return '[';
    }
}
	YY_BREAK

case 72:
YY_RULE_SETUP
#line 199 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 200 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 201 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
++yytext; COPY_TO_YYLVAL(yytext,yyleng-2); return T_NAMED_REGEXP;
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 202 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
rulePosition = RuleBody; BEGIN(INITIAL); return ';';
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 203 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 204 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 205 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
++openBrackets; return '[';
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 206 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
--openBrackets; return ']';
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 207 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
++openBrackets; return '(';
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 208 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
--openBrackets; return ')';
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 209 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '?';
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 210 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '|';
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 211 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '^';
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 212 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_RANGE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 213 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '&';
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 214 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '~';
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 215 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '*';
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 216 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '+';
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 217 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '@';
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 218 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '.';
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 219 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_ARROW;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 220 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_CONTINUE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 221 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_FAIL;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 222 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_LOOKAHEAD;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 223 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_BARRIER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 224 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
firstCodeLine = yyLine; firstCodeColumn = currentOffset + 2; BEGIN(CODE);
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 225 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_TERMINAL;
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 226 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 227 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_UNQUOTED_STRING;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 228 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yytext++; COPY_TO_YYLVAL(yytext,yyleng-2); return T_STRING;
	YY_BREAK
case YY_STATE_EOF(RULE_LEXER):
#line 231 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
    BEGIN(INITIAL); // is not set automatically by yyrestart()
    KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule lexer definition..." << endl;
    yyerror("");
    return 0;
  }
	YY_BREAK


case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 240 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 241 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* this and... */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 242 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* ...this prevent brackets inside strings to be counted */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 243 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a bracket, and append what comes next */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 244 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
openBrackets++; yymore();
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 245 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      openBrackets--;
      if (openBrackets < 0) {
        COPY_CODE_TO_YYLVAL(yytext,(yyleng-1)); /* cut off the trailing bracket */
        BEGIN(INITIAL);
        return T_RULE_ARGUMENTS;
      }
  }
	YY_BREAK
case YY_STATE_EOF(RULE_ARGUMENTS):
#line 253 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      BEGIN(INITIAL); // is not set automatically by yyrestart()
      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule argument specification..." << endl;
      yyerror("");
      return 0;
  }
	YY_BREAK


case 109:
YY_RULE_SETUP
#line 262 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* skip */ ;
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 263 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline();
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 264 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 265 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(RULE_PARAMETERS_VARNAME); return ':';
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 266 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return '#';
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 267 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_MEMBER;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 268 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TEMPORARY;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 269 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_ARGUMENT;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 270 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_NODE;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 271 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_TOKEN;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 272 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return T_VARIABLE;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 273 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
return ';';  /* only used for "token" types */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 274 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 275 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); return ']';
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 276 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK


case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 280 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 281 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a semicolon, and append what comes next */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 282 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      // strip trailing whitespace
      int length = yyleng-1; // and first, the trailing semicolon
      for (int i = length-1; i < 1; i--) {
        switch(yytext[i-1])
        {
          case ' ':
          case '\f':
          case '\t':
            continue;
          default:
            length = i;
            break;
        }
      }
      COPY_TO_YYLVAL(yytext,length);
      BEGIN(RULE_PARAMETERS_HEADER);
      return T_IDENTIFIER;
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 301 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
BEGIN(INITIAL); REJECT; /* everything else */
	YY_BREAK

case 128:
YY_RULE_SETUP
#line 305 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
firstCodeLine = yyLine; firstCodeColumn = currentOffset + 2; BEGIN(CODE);
	YY_BREAK

case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 307 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
newline(); yymore();
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 308 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* gather everything that's not a colon, and append what comes next */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 309 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
yymore(); /* also gather colons that are not followed by colons or newlines */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 310 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      COPY_CODE_TO_YYLVAL(yytext, (yyleng-2)); /* cut off the trailing stuff */
      if(rulePosition == RuleLexer)
        BEGIN(RULE_LEXER);
      else
        BEGIN(INITIAL);
      return T_CODE;
  }
	YY_BREAK
case YY_STATE_EOF(CODE):
#line 318 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
      BEGIN(INITIAL); // is not set automatically by yyrestart()
      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed code segment..." << endl;
      yyerror("");
      return 0;
  }
	YY_BREAK

case 133:
YY_RULE_SETUP
#line 327 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_TERMINAL;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 328 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_IDENTIFIER;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 329 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
COPY_TO_YYLVAL(yytext,yyleng); return T_NUMBER;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 332 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
   yytext++;                         /* start inside the quotes */
   COPY_TO_YYLVAL(yytext,yyleng-2);  /* cut off the trailing quote */
   return T_STRING;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 338 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
{
  KDevPG::checkOut << "Unexpected character: ``" << yytext[0] << "''" << endl;
  yyerror("");
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 344 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"
ECHO;
	YY_BREAK
#line 2364 "/home/jonathan/gitKDE/kdevelop-pg-qt/build/kdev-pg/kdev-pg-lexer.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(PARSERCLASS):
			case YY_STATE_EOF(RULE_PARAMETERS_HEADER):
			case YY_STATE_EOF(RULE_PARAMETERS_VARNAME):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 666 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 666 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 665);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 344 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-lexer.ll"



char ch;
int yyLine = 1, currentOffset = 0;
bool endOfLine = false;
char yyTextLine[256 * 1024];

int inp()
{
  if( KDevPG::file.atEnd() )
    return EOF;
  KDevPG::file.getChar( &ch );
  return ch;
}

void newline()
{
  yyLine++;
  endOfLine = true;
}

/* initialize the line buffer */
void clearLineBuffer()
{
  yyTextLine[0] = '\0';
  currentOffset = 0;
  endOfLine = false;
}

 /* add the current token to the current line */
void appendLineBuffer()
{
  if (endOfLine == true)
    clearLineBuffer();

  currentOffset = strlen(yyTextLine); /* start of current */
  strcpy(yyTextLine+currentOffset, yytext); /* append current */
  /* strcpy is faster than strcat */
}

void yyerror(const char* msg )
{
  Q_UNUSED(msg);
  KDevPG::checkOut << "** LEXICAL ERROR at line " << yyLine << " column " << currentOffset << endl;

  char *current_end = yyTextLine + strlen(yyTextLine);
  char *p;

  /* get the rest of the line if we are not already at the end */
  if(!endOfLine)
    {
      p = current_end;
      int c = ch;

      while(c != EOF && c != '\n')
        {
          *p++ = c;
          c = inp();
        }

      *p++ = '\n';
      *p = 0;
    }

  /* yyTextLine[] now has the whole line, with the current token */
  /* at currentOffset */

  /* print error message and current line */
  KDevPG::checkOut << yyTextLine;

  /* print a ^ under the most recent token */
  KDevPG::checkOut << QString(currentOffset, ' ').append('^') << endl; /* currentOffset spaces, then ^ */

  exit(EXIT_FAILURE);
}

int yywrap() { return 1; }


