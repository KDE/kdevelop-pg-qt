#line 2 "java_lexer.cpp"

#line 4 "java_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int java::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 118
#define YY_END_OF_BUFFER 119
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[815] =
    {   0,
        0,    0,    5,    5,  119,  117,    1,    2,   21,  117,
      114,   48,   42,  117,    9,   10,   38,   34,   15,   36,
       17,   40,  115,  115,   20,   16,   24,   33,   26,   19,
       18,   13,   14,   46,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       11,   44,   12,   22,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,    5,    7,    6,    1,   28,    0,
      113,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  114,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   49,   29,   43,    0,  111,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
       31,   35,   32,   37,    0,  116,    0,    0,    0,    0,
        0,    4,    3,   41,  116,  115,    0,  116,  116,  115,
        0,    0,    0,    0,    0,    0,  115,    0,    0,    0,
        0,    0,   50,   25,   23,   27,   52,   47,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,   69,  114,
      114,  114,  114,  114,  114,  114,  114,   80,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,   45,   30,  114,
      114,  114,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    5,    6,
        6,    8,    0,    0,    0,    0,    0,    0,    0,    0,
      114,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   56,  116,
      116,    0,    0,    0,    0,    0,    0,    0,    0,    3,
      116,  116,  116,    0,    0,    0,    0,    0,  115,    0,
      116,  116,    0,    0,    0,    0,    0,    0,  115,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   51,   53,   54,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,   78,  114,  114,  114,   84,
      114,  114,   88,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  106,
      114,  114,  114,  114,  114,  114,    0,    0,    0,    0,
        0,  114,  114,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  114,  114,  114,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  116,    0,    0,    0,    0,
        0,  116,    0,  116,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  115,  116,    0,
      115,   55,  114,  114,  114,  114,   61,   62,  114,   64,
      114,  114,  114,  114,  114,   71,   72,  114,  114,  114,
      114,   79,  114,  114,  114,  114,   86,  114,   89,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      101,  114,  114,  105,  107,  114,  114,  114,  114,    0,
        0,    0,    0,    0,  114,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  116,  116,  116,    0,    0,  116,  116,    0,
        0,    0,    0,    0,  114,  114,  114,   60,   63,   65,
       66,  114,  114,  114,  114,   74,   75,   77,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,   95,  114,
      114,   98,  114,  114,  102,  114,  114,  109,  114,    0,
        0,    0,    0,    0,    0,    0,    0,  114,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,  116,
        0,  116,  116,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  114,   58,  114,  114,

      114,   70,  114,  114,  114,   82,  114,  114,   87,  114,
      114,  114,   93,   94,   96,  114,   99,  114,  103,  114,
      114,  114,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  116,  114,   59,  114,   68,   73,   76,  114,  114,
      114,   90,   91,  114,  114,  114,  114,  114,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      116,   57,   67,  114,  114,  114,  114,   97,  114,  114,

      108,    0,  114,  114,   85,   92,  114,  104,   81,   83,
      114,  114,  100,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   29,   30,   31,
        6,    6,    6,    6,    6,   32,    6,    6,    6,   33,
        6,    6,    6,    6,    6,    6,    6,   34,    6,    6,
       35,   36,   37,   38,    6,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,    6,   48,   49,   50,   51,
       52,   53,    6,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,    1,   67,   68,   69,
       69,   70,   70,   71,   72,   73,   73,   74,   74,   75,
       75,   74,   74,   76,   76,   76,   76,   76,   76,   76,
       77,   78,   78,   79,   79,   79,   79,   79,   79,   80,
       80,   80,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   93,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  102,  102,
      102,    1,    1,  105,  106,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  108,  107,  109,  107,
      107,  107,  107,  110,  111,  112,  113,  114,  115,  115,
      115,  115,  115,  112,  112,  112,  112,  112,  116,  117,
      118,  118,  118,  118,  118,  118,  118,  119,  120,  120,
      120,  121,  122,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[123] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    5,    3,    3,    3,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    6,    7,    7,    7,
        7,    6,    6,    6,    7,    7,    8,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        9,    9,    9,    9,    9,    9,   10,   10,   11,   10,

       10,   10,   10,   10,    1,    3,    3,    3,    3,    3,
        3,    1,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[867] =
    {   0,
        0,    0,  120,  121, 3538, 8769, 3534, 8769, 3504,  131,
      107, 3503,  120,  251, 8769, 8769, 3502,  116, 8769,  115,
      153,  125,  358,  162, 8769, 8769,  122, 3501,  123, 8769,
     8769, 8769, 8769, 3500,  237,   98,  236,  111,  128,  250,
      103,  145,  135,  169,  226,  121,  254,  179,  146,  261,
     8769,  133, 8769, 8769,    0,    0,  237,  231,  395, 3439,
      328,  127,    0,  327,    0, 8769,  148, 3501, 8769,  497,
     8769, 8769,  498,  617,  673,  365,  702,  266,  734,  312,
      769,  326,  452,  517,    0,    0,  365,  359,  794, 3434,
      443,  319,    0,  439, 8769, 8769, 8769,  896, 8769,  897,

     1016, 1072,  502, 1101,  515, 1133,  358, 1168,  337, 8769,
     8769, 8769, 8769, 8769, 3485,  926,  511,  541,  562, 3422,
     3194, 8769,    0, 8769,  945, 1257, 1274, 8769, 1294, 8769,
     1029,  586,  580, 1238, 3229, 3192, 1327,  827,  824, 1325,
     3227, 3189, 3255, 8769, 8769, 8769,  178, 8769, 3223, 3222,
     3224, 3232, 3217,  203, 3228, 3227, 3214, 3220, 3206, 3207,
     3201, 3201, 3187, 2940, 2938, 2935, 2917,    0, 2919,  212,
     2919, 2913, 2899, 2908, 2915,  227, 2903, 2886, 2889,  102,
     2887, 2892, 2868,  239,  471,  249, 2871, 8769, 8769,    0,
        0, 1411,    0,  894,    0,  907, 2834,    0,  385,  959,

        0, 1007,    0,    0,    0,    0,    0,  428,    0,    0,
      291, 8769, 1525, 1645, 1765, 1885, 2005, 2125, 2181, 2219,
        0,    0,    0, 1308,    0, 1373, 2833,    0,  453, 1211,
        0, 1377,    0,    0,    0,    0,    0,  468, 2321, 8769,
     1485, 2441, 2497, 1399, 2526, 1412, 2558,  859, 2593,  531,
     2695, 2815, 2935, 1515, 2991, 3029, 3067, 3105, 8769, 8769,
     1547, 1408, 1422, 1496, 1508, 1518,  584, 1281,  858,    0,
     1664, 8769, 1683, 1467, 1518, 1627, 2823, 2786, 8769, 1551,
     1784, 8769, 1540, 1575, 1724, 2821, 2783, 1804, 1915, 1648,
     1766, 1776, 1657, 1886,  862, 1618, 1896, 1928, 1938, 1947,

     1959,  882, 1769,  895, 8769, 8769, 2860, 2034, 2049,  263,
       92, 2835, 2833,  507,  156,  119,  299,  476,  192, 2831,
      497, 2829,  498,  604,  606, 2824,  252,  900,  508, 2823,
      858,  608, 2822,  342,  899,  980,  977,  615,  127,  332,
     1007,  919, 2812, 1008,  981, 1242,  421,  578, 2811, 2810,
      374, 1000,  918, 2058, 2809, 2343, 1826, 1962, 3130, 2782,
     2050,    0, 2806, 2805, 2324, 3232, 3288, 2108, 3317, 2277,
     3349, 1869, 3384,  998, 3486, 3606, 2308, 3662, 3700, 3737,
     3839, 1999, 3895, 3933, 2793, 2785, 2784, 4035, 4155, 4275,
     2427, 4380, 4418, 4456, 4552, 4602, 2405, 4640, 4678, 4715,

     2681, 4753, 4791, 4829, 2364, 2721, 2013, 2317, 2661, 2758,
     2721, 2748, 2752, 2851, 2023, 2687, 2791, 2755, 2718, 2755,
     2813, 2823, 2896, 2910, 1284, 2267, 1301, 2920, 2930, 2940,
     3154, 3164, 1310, 2352, 1347, 3241, 3490, 1258, 3522, 3538,
     4023, 8769, 1265, 1267, 2778,  998, 2777, 2776, 1252, 2746,
     1272, 1286,  997, 1332, 1253, 2733, 2732, 1312, 2731, 1288,
     1358, 2730, 2726, 1378, 1301, 1472, 2718, 1375, 2717, 1369,
     1525, 2716, 1530, 1520, 1446, 1606, 1331, 1611, 1475, 1494,
     2714, 1321, 1609, 2711, 2705, 1623, 2703, 3542, 2701, 2633,
     3399, 4854, 2674, 2864, 4060, 3529,    0, 3576, 2654,    0,

     1551, 2726, 1700, 4956, 5076, 5196, 3866, 5301, 5339, 5377,
     5479, 5599, 3818, 5655, 5693, 5730, 5832, 3844, 4025, 4038,
     4097, 4112, 3769, 3978, 4129, 4198, 2953, 3206, 5952, 6072,
     4150, 6128, 6166, 6203, 6305, 3431, 6361, 6399, 4311, 3464,
     4263, 4516,  846, 2632, 6495, 4285, 4540, 4553, 4566, 4882,
     4205, 4014, 4349, 4545, 6545,    0, 4892, 4910, 4920, 4354,
     4930, 1710, 3555, 1719, 4940, 4950, 4960, 4998, 5014, 1753,
     3793, 1820, 5095, 5112, 5133, 1644, 5147, 5241, 8769, 3807,
     5180, 5401, 2667, 2630, 5499, 5510, 1660, 2677, 2676, 2674,
     2673, 1383, 1482, 1649, 1662, 2672, 1733, 2671, 1467, 2670,

     1749, 1725, 1667, 1734, 2652, 1534, 1861, 1867, 2651, 1909,
     2650, 2649, 1360, 1624,  453, 1673, 1751, 2647, 5521, 5203,
     5422, 5470, 2619,    0, 1875, 3870, 1884, 5857, 6647, 6767,
     5558, 6823, 6861, 6898, 7000, 4139, 7056, 7094, 7196, 7316,
        0, 5484, 5755,    0, 5806, 5835, 5906, 7436, 5503, 7556,
     7676, 5919, 7732, 7770, 7807, 7909, 5773, 5941, 5954, 6002,
     6015, 6033, 6283, 6044, 8029, 4216, 4241, 6352, 6317, 6460,
     6473, 6486, 6499, 6235, 6588, 6516, 8143, 6488, 6666, 6670,
     5939, 6684, 8769, 4321, 5266, 6635, 2439, 2393, 6656, 6721,
     6731, 5825, 6741, 1988, 4345, 1994, 7184, 2455, 1848, 2034,

     2132, 2453, 1908, 1948, 1768, 2451, 2442, 1881, 2441, 1889,
     2110, 2285, 2358, 2332, 2291, 1776, 2130, 2313, 2045, 2129,
     2318,    0, 7027, 4905, 6979, 6999, 2292, 1969, 7215, 5029,
     5246, 7180, 7193, 6297, 6930, 7138, 7252, 7325, 4973, 5088,
     8257, 7331, 7149, 7370, 7393, 7406, 7419, 7436, 7499, 7447,
     7578, 7571, 7607, 7612, 7630, 7640, 5844, 7650, 2113, 5907,
     2293, 7544, 2407, 1999, 2288, 1926, 1925, 1878, 1850, 2312,
     1828, 1730, 1685, 2336, 2408, 2088, 2325, 2354, 7895, 7866,
     7879, 7892, 7905, 7918, 7959, 8007, 8018, 8087, 8136, 8171,
     8187, 1659, 1610, 2423, 2424, 2357,  515, 1491, 2105, 2437,

     1460, 8204, 2440, 2284, 1340, 1293,  959, 1021,  863,  560,
     2419,  641,  424, 8769, 8379, 8390,  346, 8401, 8407, 8412,
     8418, 8423, 8427, 8438, 8449, 8460,  311, 8466, 8471, 8477,
     8482, 8486, 8497, 8508, 8514, 8520, 8526, 8532, 8538, 8546,
     8557, 8568, 8579, 8585, 8591, 8597, 8603, 8609, 8617, 8628,
      281, 8634, 8640, 8651, 8662, 8673, 8679, 8685, 8696, 8707,
     8718,  204, 8724, 8735, 8746, 8757
    } ;

static yyconst flex_int16_t yy_def[867] =
    {   0,
      814,    1,  815,  815,  814,  814,  814,  814,  814,  816,
      817,  814,  814,  818,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  817,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
      814,  814,  814,  814,  819,  820,  820,  820,  814,  821,
      822,  814,  823,  814,  824,  814,  825,  814,  814,  816,
      814,  814,  826,  816,   74,   75,   75,   77,   77,   79,
       79,   81,  827,  827,  828,  829,  829,  829,  814,  830,
      831,  814,  832,  814,  814,  814,  814,  833,  814,  833,

      833,  101,  102,  102,  104,  104,  106,  106,  108,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  834,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  814,  814,   84,
       84,   84,  835,  835,  194,  194,  196,  194,  835,  835,

      836,  814,  837,  838,  839,  837,  837,  814,  840,  841,
      841,  814,  842,  843,  843,  842,  843,  843,  218,  218,
       84,   84,  844,  844,  224,  224,  226,  224,  844,  844,
      845,  814,  846,  847,  848,  846,  846,  814,  849,  814,
      849,  849,  242,  243,  243,  245,  245,  247,  247,  249,
      849,  849,  849,  253,  249,  249,  249,  249,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  850,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  851,  851,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  852,  852,  814,  853,
      814,  354,  309,  309,  854,  854,  366,  367,  367,  369,
      369,  371,  371,  373,  855,  855,  376,  376,  378,  378,
      854,  376,  376,  376,  309,  309,  309,  856,  856,  856,
      390,  390,  392,  392,  390,  392,  396,  396,  398,  398,

      390,  398,  398,  398,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  857,
      857,  814,  858,  814,  309,  857,  496,  496,  498,  496,

      857,  857,  814,  859,  859,  859,  506,  506,  508,  508,
      860,  860,  512,  512,  514,  514,  860,  512,  512,  512,
      512,  512,  512,  512,  512,  506,  512,  512,  861,  861,
      530,  530,  532,  532,  861,  530,  530,  530,  535,  530,
      530,  532,  534,  534,  535,  530,  530,  530,  530,  530,
      530,  530,  530,  535,  530,  555,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  862,  862,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  863,
      863,  863,  622,  621,  863,  863,  814,  619,  864,  864,
      630,  630,  632,  632,  864,  630,  630,  630,  865,  865,
      640,  640,  640,  640,  640,  640,  640,  865,  635,  866,
      866,  651,  651,  653,  653,  866,  651,  651,  651,  651,
      651,  651,  651,  651,  866,  651,  651,  665,  651,  651,
      651,  651,  651,  651,  651,  651,  665,  665,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  619,  697,  697,  697,

      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  619,  635,  630,  630,  632,  634,  634,  635,  630,
      630,  630,  630,  630,  630,  630,  630,  635,  630,  630,
      865,  665,  651,  651,  651,  651,  651,  651,  651,  651,
      665,  665,  665,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  635,  630,
      630,  630,  630,  630,  630,  630,  630,  635,  635,  665,
      814,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  635,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,    0,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814
    } ;

static yyconst flex_int16_t yy_nxt[8892] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   24,
       25,   26,   27,   28,   29,   30,   31,   11,   11,   11,
       11,   11,   11,   11,   32,    6,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   11,   42,   11,   43,   11,
       44,   11,   45,   46,   47,   48,   11,   49,   50,   11,
       11,   11,   51,   52,   53,   54,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,   55,   56,   57,   58,   59,
       60,    6,   61,   62,   63,   64,    6,    6,    6,    6,
        6,    6,   66,   66,   84,   84,   84,   96,  111,  113,
      446,   67,   67,   71,   83,   72,  122,   83,  114,  112,
      341,  123,   83,   97,  143,  144,  146,  147,  124,  151,
       83,  152,   83,  158,  167,  342,  188,   83,  153,  211,
       83,   83,  159,  178,  212,   83,   73,   83,  115,   83,
      116,  116,  116,  451,   83,   83,  160,  125,  161,  137,
      137,  137,   83,  474,   83,   83,  171,  162,  168,   83,
      128,  129,  128,  130,  169,  170,  189,  186,   83,   83,

       83,  306,  307,  128,  129,  128,   83,  172,   83,  450,
      130,  173,   85,   86,   87,   88,   89,   90,   83,   91,
       92,   93,   94,   83,  184,  174,  206,  206,  206,  206,
      206,  455,  185,   83,   83,   74,   74,   74,   74,   74,
       75,   76,   76,   76,   76,   76,   76,   77,   78,   79,
       80,   81,   82,   99,   84,   84,   84,  313,  314,   99,
      117,  118,  119,  120,  175,   83,  329,  330,  121,  138,
      139,  140,  141,  336,  154,   83,  149,  142,  337,  176,
       83,  155,  177,   83,  156,  346,  100,  157,  163,   83,
       83,  150,  347,   83,   83,  351,  164,  352,  165,  179,

       83,  166,  211,  462,   83,   83,  187,  212,   83,  180,
      181,  445,  182,   83,  183,   83,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  218,  218,  218,  218,  218,  218,  218,  218,
      218,   83,   85,   86,   87,   88,   89,   90,   83,   91,
       92,   93,   94,  452,  453,  101,  101,  101,  101,  101,
      102,  103,  103,  103,  103,  103,  103,  104,  105,  106,
      107,  108,  109,  125,   83,  126,  126,  127,  219,  219,
      219,  219,  219,  219,   83,  475,  128,  129,  128,  130,
      469,  131,  220,  220,  220,  201,  201,  201,  202,  128,

      129,  128,  203,  258,  258,  258,  130,  207,  207,  207,
      207,  207,  207,  207,  207,  485,   83,  131,  236,  236,
      236,  236,  236,  205,  257,  257,  257,  257,  257,  257,
      208,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      192,  192,  192,   83,   83,  132,  133,  134,  135,   84,
       84,   84,  482,  136,  193,  193,  194,  193,  194,  193,
      195,  193,  195,  193,  196,  193,  197,  193,  198,  198,
      193,  198,  193,  193,  193,  199,  193,  199,  193,   71,

       71,   72,   70,  127,  127,  127,  214,  719,   83,  348,
      231,  231,  231,  232,  454,  215,  215,  233,   83,  237,
      237,  237,  237,  237,  237,  237,  237,  349,  222,  222,
      222,  350,   73,   70,   84,   84,   84,  214,  235,   83,
       83,  214,  238,   84,   84,   84,  457,  449,  214,   83,
       83,  214,  459,  214,  216,   83,  806,   85,   86,   87,
       88,   89,   90,  465,   91,   92,   93,   94,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      116,  116,  116,  116,  116,  116,  116,  394,  394,  394,

       83,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   71,
       83,   72,   85,   86,   87,   88,   89,   90,  483,   91,
       92,   93,   94,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  460,  262,  461,  262,   83,  263,   83,  263,
       83,  264,   73,  265,  468,  266,  266,   83,  266,  116,
      116,  116,  267,  473,  267,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   83,  813,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  223,  223,  224,  223,  224,  223,  225,
      223,  225,  223,  226,  223,  227,  223,  228,  228,  223,
      228,  223,  223,  223,  229,  223,  229,  223,   99,   99,

       83,  251,  467,   83,  240,   98,  137,  137,  137,  137,
      137,  137,  137,  675,  252,  252,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  393,  393,  393,  393,  393,
      393,  241,   98,  116,  116,  116,  251,  127,  127,  127,
      251,   83,   83,  116,  116,  116,  470,  251,  463,  242,
      251,  464,  251,  253,  260,  261,  260,  137,  137,  137,
       83,   83,  271,  271,  271,  477,  487,  260,  261,  260,
      137,  137,  137,  272,  273,  272,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  272,  273,  272,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,   83,

      242,  242,  242,  242,  242,  243,  244,  244,  244,  244,
      244,  244,  245,  246,  247,  248,  249,  250,   99,   83,
      811,  480,   83,   83,  240,  192,  192,  192,  192,  192,
      192,  192,  472,  117,  118,  119,  120,  471,  486,   83,
       83,  121,   83,  592,  288,  588,  289,  289,  289,   83,
       83,  241,  274,  275,  276,  277,  289,  289,  289,  289,
      278,   83,  476,  479,  510,  510,  510,  289,  289,  289,
      289,  289,  289,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      242,  242,  242,  242,  242,  243,  244,  244,  244,  244,
      244,  244,  245,  246,  247,  248,  249,  250,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  125,  576,  126,  126,  127,  222,  222,  222,
      222,  222,  222,  222,   83,  128,  129,  128,  279,  125,
      439,  127,  127,  127,   83,   83,  481,  589,  128,  129,

      128,  594,  128,  129,  128,  279,  280,   83,  280,   83,
      439,  281,  281,  281,   83,  128,  129,  128,  585,  290,
      586,  290,  282,  291,  282,  291,  590,  292,   83,  293,
       83,  294,  294,   83,  294,  282,  597,  282,  295,  601,
      295,  591,  125,   83,  137,  137,  137,  116,  116,  116,
      116,  116,  116,  116,   83,  128,  129,  128,  130,  271,
      271,  271,  595,   83,  132,  133,  134,  135,  128,  129,
      128,  611,  136,   83,   83,  130,  271,  271,  271,  615,
       83,  132,  133,  134,  135,  281,  281,  281,  593,  136,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

       83,  283,  284,  285,  286,  717,  297,  604,  297,  287,
      298,   83,  298,  598,  299,   83,  300,   83,  301,  301,
       83,  301,  281,  281,  281,  302,  125,  302,  354,  354,
      354,  600,  603,  700,  138,  139,  140,  141,   83,  355,
      356,  355,  142,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  355,  356,  355,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  392,  392,
      392,  392,  392,  392,  392,  392,  392,   99,   83,  388,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

       83,  609,  389,  389,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   83,  613,  705,   83,  357,  358,
      359,  360,   83,  240,  388,  602,  361,   71,  388,   71,
      701,   83,  239,  239,  239,  388,   83,   83,  388,  614,
      388,  390,  239,  239,  239,  239,  271,  271,  271,  271,
      271,  271,  271,  239,  239,  239,  239,  239,  239,  405,
      365,  405,   83,  605,  406,  406,  406,   83,  281,  281,
      281,  239,   83,  608,  712,  260,  607,  260,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  260,   83,
      260,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  281,
      281,  281,  281,  281,  281,  281,  495,  495,  495,  366,
      366,  366,  366,  366,  367,  368,  368,  368,  368,  368,
      368,  369,  370,  371,  372,  373,  374,   71,   83,   72,
       83,   83,  610,   83,  407,  408,  409,  410,  283,  284,
      285,  286,  411,  616,  612,   83,  287,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  439,  718,  617,   83,
       73,  271,  271,  271,  127,  127,  127,  127,  127,  127,
      127,  702,  272,  273,  272,  413,  439,  413,  699,   83,

      414,  414,  414,  703,   83,  272,  273,  272,  420,  709,
      420,  272,  421,  272,  421,   83,  422,   83,  423,  720,
      424,  424,   83,  424,  272,   83,  272,  425,   83,  425,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      440,  440,  440,  440,  440,  440,  440,  440,  440,   74,
       74,   74,   74,   74,   75,   76,   76,   76,   76,   76,
       76,   77,   78,   79,   80,   81,   82,   71,  708,   72,
       83,  274,  275,  276,  277,  354,  354,  354,  710,  278,
       83,  704,  375,  375,  375,  406,  406,  406,   83,   83,
      415,  416,  417,  418,  406,  406,  406,  721,  419,  707,

       73,  281,  281,  281,   83,  428,   83,  428,   83,  429,
      769,  429,  282,  430,  282,  431,   83,  432,  432,  775,
      432,  436,  436,  436,  433,  282,  433,  282,  414,  414,
      414,  436,  436,  436,  436,  137,  137,  137,  137,  137,
      137,  137,  436,  436,  436,  436,  436,  436,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  796,   74,
       74,   74,  376,  377,  378,  379,   76,   76,   76,   76,
      380,   77,   78,   79,   80,   81,   82,   71,   83,   71,
       83,  283,  284,  285,  286,  414,  414,  414,  764,  287,

      794,  713,  381,  381,  381,  495,  495,  495,  495,  495,
      495,  495,  381,  381,  381,  381,   83,  714,   83,  771,
      365,   83,   83,  381,  381,  381,  381,  381,  381,   83,
      437,  772,  289,  289,  289,  509,  509,  509,  509,  509,
      509,  216,  289,  289,  289,  289,  438,  439,   83,  715,
      619,  619,  619,  289,  289,  289,  289,  289,  289,  488,
      488,  488,  767,  438,   83,   83,   83,  439,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   83,  366,
      366,  366,  366,  366,  367,  368,  368,  368,  368,  368,

      368,  369,  370,  371,  372,  373,  374,   71,  768,   72,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,   83,
       73,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,   84,   84,   84,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  578,  578,  578,   84,   84,   84,  578,
      578,  578,  787,  125,   83,  354,  354,  354,  217,  217,
      217,  217,  217,  217,  217,   83,  355,  356,  355,  443,
      765,  444,  406,  406,  406,  406,  406,  406,  406,  355,

      356,  355,  414,  414,  414,  414,  414,  414,  414,   74,
       74,   74,   74,   74,   75,   76,   76,   76,   76,   76,
       76,   77,   78,   79,   80,   81,   82,   71,   83,   72,
      237,  237,  237,  237,  237,  237,  237,  237,  799,   85,
       86,   87,   88,   89,   90,   83,   91,   92,   93,   94,
       83,  807,  773,  503,   85,   86,   87,   88,   89,   90,
       73,   91,   92,   93,   94,  357,  358,  359,  360,   83,
       83,  777,   83,  361,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  766,  682,  682,
      682,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,   74,
       74,   74,   74,   74,   75,   76,   76,   76,   76,   76,
       76,   77,   78,   79,   80,   81,   82,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,   99,   83,   83,   71,  810,   83,   99,
      793,   83,  504,  271,  271,  271,  271,  271,  271,  271,
      774,  505,  505,  508,  508,  508,  508,  508,  508,  508,
      508,  508,   83,   83,  795,  280,  241,  280,   83,  786,
      488,  488,  488,  504,  776,   83,  778,  504,  682,  682,
      682,  489,   83,  489,  504,  800,   83,  504,  797,  504,
      506,  406,  406,  406,  489,   83,  489,  217,  217,  217,
      217,  217,  217,  217,   83,  366,  801,   83,   83,  805,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  281,  281,
      281,  281,  281,  281,  281,  242,  242,  242,  242,  242,
      243,  244,  244,  244,  244,  244,  244,  245,  246,  247,
      248,  249,  250,   99,  239,  239,  239,   83,   83,   99,
      490,  491,  492,  493,  239,  239,  239,  239,  494,   83,
      798,  812,  792,   83,   83,  239,  239,  239,  239,  239,
      239,  407,  408,  409,  410,  804,  241,   83,  803,  411,
       83,   83,  770,  239,  391,  391,  391,  391,  391,  391,
      391,   83,  808,   83,  809,   83,  761,  545,  545,  545,

      545,  545,  545,  545,  545,  545,  760,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  242,  242,  242,  242,  242,
      243,  244,  244,  244,  244,  244,  244,  245,  246,  247,
      248,  249,  250,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,   99,  554,  554,

      554,  221,   83,  240,   83,  716,   83,  711,  554,  554,
      554,  554,  619,  619,  619,  619,  619,  619,  619,  554,
      554,  554,  554,  554,  554,  706,   83,   83,   83,   83,
      241,   83,   83,  696,  695,  676,  221,  239,  406,  406,
      406,  626,  557,   83,  557,  618,  558,   83,  558,  260,
      559,  260,  560,   83,  561,  561,   83,  561,  606,   83,
       83,  562,  260,  562,  260,  116,  116,  116,  599,  414,
      414,  414,   83,  596,   83,   83,  260,  261,  260,  414,
      414,  414,  414,  414,  414,  414,  414,  414,   83,  260,
      261,  260,  495,  495,  495,  495,  495,  495,  495,  242,

      242,  242,  242,  242,  243,  244,  244,  244,  244,  244,
      244,  245,  246,  247,  248,  249,  250,   99,   83,   83,
      587,  572,  571,  240,  564,  563,   83,   83,  407,  408,
      409,  410,  395,  395,  395,   83,  411,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,   83,   83,  502,
      241,   83,   83,  484,  478,  117,  118,  119,  120,  415,
      416,  417,  418,  121,   83,  466,   83,  419,  414,  414,
      414,  458,  565,  456,  565,  448,  566,  447,  566,  272,
      567,  272,  568,  442,  569,  569,  435,  569,  434,  427,
      426,  570,  272,  570,  272,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  221,  191,  353,  345,  242,
      242,  242,  396,  397,  398,  399,  244,  244,  244,  244,
      400,  245,  246,  247,  248,  249,  250,   99,  344,  343,
      340,  339,  338,   99,  237,  237,  237,  237,  237,  237,
      237,  237,  401,  401,  401,  335,  334,  333,  415,  416,
      417,  418,  401,  401,  401,  401,  419,  627,  332,  331,
      241,  328,  327,  401,  401,  401,  401,  401,  401,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  326,  325,
      324,  253,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  217,  217,  217,  217,  217,  217,  217,  242,
      242,  242,  242,  242,  243,  244,  244,  244,  244,  244,
      244,  245,  246,  247,  248,  249,  250,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  223,
      223,  496,  223,  496,  223,  497,  223,  497,  223,  498,
      223,  499,  223,  500,  500,  223,  500,  223,  223,  223,
      501,  223,  501,  223,   71,  323,   71,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  322,  321,  436,  436,
      436,  320,  319,  318,  317,  316,  315,  365,  436,  436,
      436,  436,  312,  575,  311,  310,  309,  308,  305,  436,
      436,  436,  436,  436,  436,  217,  217,  217,  217,  217,
      217,  217,  304,  575,  303,  208,  296,  269,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  366,  366,  366,  366,
      366,  367,  368,  368,  368,  368,  368,  368,  369,  370,
      371,  372,  373,  374,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,   71,  268,
       72,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      259,  230,   68,  511,  511,  511,  200,  436,  436,  436,
      391,  391,  391,  391,  391,  391,  391,  436,  436,  436,
      436,   73,  439,  148,  145,  110,   95,   69,  436,  436,
      436,  436,  436,  436,  577,   68,  577,  814,  814,  578,
      578,  578,  439,  668,  668,  668,  668,  668,  668,  668,
      579,  814,  579,  125,  814,  127,  127,  127,  814,  488,
      488,  488,  814,  579,  814,  579,  128,  129,  128,  814,
      489,  814,  489,  814,  814,  814,  814,  814,  814,  128,
      129,  128,  814,  489,   83,  489,  814,  814,  814,  814,
       74,   74,   74,  512,  513,  514,  515,   76,   76,   76,

       76,  516,   77,   78,   79,   80,   81,   82,   71,  814,
       72,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  406,  406,  406,  406,  406,  406,  406,  814,  580,
      581,  582,  583,  814,  814,  814,  814,  584,  814,  814,
      814,   73,  814,  814,  814,  132,  133,  134,  135,  490,
      491,  492,  493,  136,  814,  814,  814,  494,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  814,  814,
      814,  814,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  517,  517,  517,  517,  517,
      517,  517,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
       74,   74,   74,   74,   74,   75,   76,   76,   76,   76,
       76,   76,   77,   78,   79,   80,   81,   82,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   74,   74,  518,   74,  518,   74,  519,   74,  519,
       74,  520,   74,  521,   74,  522,  522,   74,  522,   74,
       74,   74,  523,   74,  523,   74,   74,  524,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,  814,
      814,   74,  814,   74,  814,   74,  814,   74,  814,   74,
      814,   74,  814,   74,   74,  814,   74,  814,  814,  814,

       74,  814,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,  814,  814,   74,  814,
       74,  814,   74,  814,   74,  814,   74,  814,   74,  814,
       74,   74,  814,   74,  814,  814,  814,   74,  814,   74,
      525,   71,  814,   71,  517,  517,  517,  814,  217,  217,
      217,  217,  217,  217,  217,  814,  526,  526,  526,  414,
      414,  414,  414,  414,  414,  414,  526,  526,  526,  526,
      814,  814,  814,  814,  365,  814,  814,  526,  526,  526,
      526,  526,  526,  213,  213,  213,  578,  578,  578,  578,
      578,  578,  578,  213,  213,  213,  213,  217,  217,  217,

      217,  217,  217,  217,  213,  213,  213,  213,  213,  213,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  814,
      814,  814,  213,  217,  217,  217,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  619,  619,  619,  619,
      619,  619,  619,  366,  366,  366,  366,  366,  367,  368,
      368,  368,  368,  368,  368,  369,  370,  371,  372,  373,
      374,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,   99,  125,  814,
      137,  137,  137,   99,  517,  517,  517,  517,  517,  517,
      517,  128,  129,  128,  130,  814,  814,  217,  217,  217,
      217,  217,  217,  217,  128,  129,  128,  814,  814,  814,
      241,  130,  814,  814,  814,  125,  814,  354,  354,  354,
      545,  545,  545,  545,  545,  545,  545,  814,  355,  356,
      355,  814,  814,  391,  391,  391,  391,  391,  391,  391,

      814,  355,  356,  355,  217,  217,  217,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  217,  217,  217,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      138,  139,  140,  141,  814,  814,  814,  814,  142,  242,
      242,  242,  242,  242,  243,  244,  244,  244,  244,  244,
      244,  245,  246,  247,  248,  249,  250,   99,  814,  814,
      814,  814,  814,   99,  814,  814,  814,  357,  358,  359,
      360,  814,  529,  529,  529,  361,  217,  217,  217,  217,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  814,
      241,  217,  217,  217,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  814,  217,  217,
      217,  217,  217,  217,  217,  649,  649,  649,  507,  507,
      507,  507,  507,  507,  507,  649,  649,  649,  649,  391,
      391,  391,  391,  391,  391,  391,  649,  649,  649,  649,
      649,  649,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  814,  814,  814,  213,  814,  814,  814,  814,  242,
      242,  242,  530,  531,  532,  533,  244,  244,  244,  244,
      534,  245,  246,  247,  248,  249,  250,   99,  814,  814,
      545,  545,  545,   99,  391,  391,  391,  391,  391,  391,
      391,  814,  535,  535,  535,  391,  391,  391,  391,  391,

      391,  391,  535,  535,  535,  535,  814,  814,  814,  814,
      241,  814,  814,  535,  535,  535,  535,  535,  535,  240,
      391,  391,  391,  391,  391,  391,  391,  814,  239,  239,
      239,  390,  814,  814,  814,  814,  814,  814,  239,  239,
      239,  239,  391,  391,  391,  391,  391,  391,  391,  239,
      239,  239,  239,  239,  239,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  391,  391,  391,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  814,  814,  242,
      242,  242,  242,  242,  243,  244,  244,  244,  244,  244,
      244,  245,  246,  247,  248,  249,  250,  239,  239,  239,

      682,  682,  682,  682,  682,  682,  682,  239,  239,  239,
      239,  578,  578,  578,  578,  578,  578,  578,  239,  239,
      239,  239,  239,  239,  545,  545,  545,  814,  391,  391,
      391,  391,  391,  391,  391,  814,  239,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      240,  814,  678,  678,  678,  814,  814,  814,  814,  539,
      539,  539,  678,  678,  678,  678,  814,  814,  814,  239,
      239,  239,  239,  678,  678,  678,  678,  678,  678,  814,
      239,  239,  239,  239,  239,  239,  814,  669,  814,  669,

      814,  670,  814,  670,  814,  671,  814,  672,  239,  673,
      673,  814,  673,  814,  814,  814,  674,  814,  674,  391,
      391,  391,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  391,  391,  391,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  391,  391,  391,  391,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  814,  540,
      541,  542,  543,  814,  814,  814,  814,  544,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  545,  545,  545,  545,  545,  545,  545,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  242,
      242,  546,  242,  546,  242,  547,  242,  547,  242,  548,
      242,  549,  242,  550,  550,  242,  550,  242,  242,  242,
      551,  242,  551,  242,  242,  552,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  814,  814,  242,
      814,  242,  814,  242,  814,  242,  814,  242,  814,  242,
      814,  242,  242,  814,  242,  814,  814,  814,  242,  814,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  814,  814,  242,  814,  242,  814,

      242,  814,  242,  814,  242,  814,  242,  814,  242,  242,
      814,  242,  814,  814,  814,  242,  814,  242,  553,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  223,  223,  620,  223,  620,  223,  621,
      223,  621,  223,  622,  223,  623,  223,  624,  624,  223,
      624,  223,  223,  223,  625,  223,  625,  223,   71,  814,
       71,  391,  391,  391,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  779,  779,  779,  779,  779,  779,
      779,  365,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  507,  507,  507,  507,  507,  507,  507,  814,
      366,  366,  366,  366,  366,  367,  368,  368,  368,  368,
      368,  368,  369,  370,  371,  372,  373,  374,   71,  814,
       71,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      814,  814,  814,  629,  629,  629,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  814,  814,  507,  507,
      507,  365,  271,  271,  271,  729,  729,  729,  729,  729,
      729,  814,  814,  272,  273,  272,  814,  814,  814,  281,
      281,  281,  814,  814,  814,  814,  272,  273,  272,  814,
      282,  814,  282,  814,  814,  681,  814,  681,  814,  814,
      682,  682,  682,  282,  814,  282,  814,  814,  814,  814,
      814,  683,  814,  683,  578,  578,  578,  507,  507,  507,
      507,  507,  507,  507,  683,  814,  683,  814,  814,  814,
      366,  366,  366,  630,  631,  632,  633,  368,  368,  368,
      368,  634,  369,  370,  371,  372,  373,  374,   71,  814,

       71,  814,  274,  275,  276,  277,  814,  814,  814,  814,
      278,  814,  814,  635,  635,  635,  814,  814,  814,  283,
      284,  285,  286,  635,  635,  635,  635,  287,  814,  814,
      814,  365,  814,  814,  635,  635,  635,  635,  635,  635,
      684,  685,  686,  687,  814,  814,  814,  814,  688,  814,
      814,  814,  506,  814,  580,  581,  582,  583,  578,  578,
      578,  814,  584,  814,  814,  814,  814,  814,  814,  579,
      814,  579,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  814,  579,  814,  579,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  814,  814,  814,  814,  814,

      366,  366,  366,  366,  366,  367,  368,  368,  368,  368,
      368,  368,  369,  370,  371,  372,  373,  374,  213,  213,
      213,  814,  814,  814,  814,  507,  507,  507,  213,  213,
      213,  213,  729,  729,  729,  729,  729,  729,  814,  213,
      213,  213,  213,  213,  213,  814,  814,  814,  580,  581,
      582,  583,  814,  814,  814,  814,  584,  213,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,   71,  689,   72,  689,  814,  690,  814,  690,  814,
      691,  814,  692,  814,  693,  693,  814,  693,  814,  814,

      814,  694,  814,  694,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,   73,  814,   84,   84,   84,  814,
      214,  214,  214,  814,  814,  814,  814,   84,   84,   84,
      214,  214,  214,  214,  814,  814,  814,  697,  488,  488,
      488,  214,  214,  214,  214,  214,  214,  814,  814,  489,
      814,  489,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  489,  814,  489,  698,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,   83,  814,  814,  814,
      814,  814,  814,   74,   74,   74,   74,   74,   75,   76,
       76,   76,   76,   76,   76,   77,   78,   79,   80,   81,

       82,   71,  814,   72,   85,   86,   87,   88,   89,   90,
      814,   91,   92,   93,   94,   85,   86,   87,   88,   89,
       90,  814,   91,   92,   93,   94,  814,  814,  490,  491,
      492,  493,  814,  814,   73,  814,  494,  507,  507,  507,
      507,  507,  507,  507,  814,  814,  814,  814,  814,  814,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  814,
      814,  814,  814,  814,  814,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  639,  639,
      639,  639,  639,  639,  639,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,   74,   74,   74,   74,   74,   75,   76,
       76,   76,   76,   76,   76,   77,   78,   79,   80,   81,
       82,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   74,   74,  640,   74,  640,   74,
      641,   74,  641,   74,  642,   74,  643,   74,  644,  644,
       74,  644,   74,   74,   74,  645,   74,  645,   74,   74,
      646,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,  814,  814,   74,  814,   74,  814,   74,  814,
       74,  814,   74,  814,   74,  814,   74,   74,  814,   74,
      814,  814,  814,   74,  814,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,  814,
      814,   74,  814,   74,  814,   74,  814,   74,  814,   74,
      814,   74,  814,   74,   74,  814,   74,  814,  814,  814,
       74,  814,   74,  647,   71,  814,   72,  217,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  814,  814,  511,
      511,  511,  391,  391,  391,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  814,  814,   73,  814,  814,
      814,  814,  125,  814,  354,  354,  354,  814,  814,  814,
      814,  639,  639,  639,  814,  355,  356,  355,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  355,  356,

      355,  639,  639,  639,  639,  639,  639,  639,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  791,  791,  791,
      791,  791,  791,  791,  791,  791,   74,   74,   74,  512,
      513,  514,  515,   76,   76,   76,   76,  516,   77,   78,
       79,   80,   81,   82,   99,  814,  682,  682,  682,  814,
       99,  814,  814,  814,  357,  358,  359,  360,  814,  650,
      650,  650,  361,  682,  682,  682,  682,  682,  682,  682,
      814,  639,  639,  639,  814,  814,  814,  241,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  391,  391,

      391,  391,  391,  391,  391,  814,  814,  814,  814,  814,
      814,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      391,  391,  391,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  391,  391,  391,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  684,  685,  686,  687,
      814,  814,  814,  814,  688,  814,  242,  242,  242,  651,
      652,  653,  654,  244,  244,  244,  244,  655,  245,  246,
      247,  248,  249,  250,   99,  814,  814,  814,  814,  814,
       99,  391,  391,  391,  391,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  391,  391,  391,  656,  656,  656,

      656,  656,  656,  656,  656,  656,  656,  241,  656,  656,
      656,  814,  391,  391,  391,  391,  391,  391,  391,  656,
      656,  656,  814,  391,  391,  391,  391,  391,  391,  391,
      814,  814,  814,  814,  814,  814,  814,  814,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  656,  656,  656,  656,  656,  656,  656,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  242,  242,  242,  242,
      242,  243,  244,  244,  244,  244,  244,  244,  245,  246,
      247,  248,  249,  250,  239,  239,  239,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  242,  242,  657,
      242,  657,  242,  658,  242,  658,  242,  659,  242,  660,
      242,  661,  661,  242,  661,  242,  242,  242,  662,  242,
      662,  242,  242,  663,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  814,  814,  242,  814,  242,
      814,  242,  814,  242,  814,  242,  814,  242,  814,  242,
      242,  814,  242,  814,  814,  814,  242,  814,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  814,  814,  242,  814,  242,  814,  242,  814,
      242,  814,  242,  814,  242,  814,  242,  242,  814,  242,

      814,  814,  814,  242,  814,  242,  664,   99,  814,  814,
      668,  668,  668,   99,  391,  391,  391,  391,  391,  391,
      391,  814,  665,  665,  665,  814,  814,  814,  814,  814,
      814,  814,  665,  665,  665,  665,  814,  814,  814,  814,
      241,  814,  814,  665,  665,  665,  665,  665,  665,  656,
      656,  656,  656,  656,  656,  656,  814,  814,  814,  814,
      240,  814,  391,  391,  391,  391,  391,  391,  391,  239,
      239,  239,  814,  814,  814,  814,  507,  507,  507,  239,
      239,  239,  239,  729,  729,  729,  729,  729,  729,  814,
      239,  239,  239,  239,  239,  239,  391,  391,  391,  668,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  242,
      242,  242,  242,  242,  243,  244,  244,  244,  244,  244,
      244,  245,  246,  247,  248,  249,  250,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  240,  814,  251,  251,  251,  814,  814,
      814,  814,  539,  539,  539,  251,  251,  251,  251,  814,
      814,  814,  239,  239,  239,  239,  251,  251,  251,  251,
      251,  251,  814,  239,  239,  239,  239,  239,  239,  391,
      391,  391,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  391,  391,  391,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  391,  391,  391,  391,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  391,  391,
      391,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  814,  391,  391,  391,  391,  391,

      391,  391,  540,  541,  542,  543,  814,  814,  814,  814,
      544,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,   71,
      814,   71,  814,  814,  668,  668,  668,  668,  668,  668,
      668,  814,  814,  814,  723,  723,  723,  391,  391,  391,
      391,  391,  391,  391,  814,  814,  814,  814,  814,  814,
      814,  814,  365,  406,  406,  406,  814,  414,  414,  414,
      814,  814,  814,  814,  260,  814,  260,  814,  272,  814,

      272,  682,  682,  682,  814,  814,  814,  260,  814,  260,
      814,  272,  683,  272,  683,  814,  754,  814,  754,  814,
      755,  814,  755,  814,  756,  683,  757,  683,  758,  758,
      814,  758,  814,  814,  814,  759,  814,  759,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  814,  814,
      814,  366,  366,  366,  724,  725,  726,  727,  368,  368,
      368,  368,  728,  369,  370,  371,  372,  373,  374,   71,
      814,   71,  814,  407,  408,  409,  410,  415,  416,  417,
      418,  411,  814,  814,  814,  419,  814,  814,  814,  814,
      814,  684,  685,  686,  687,  814,  814,  814,  814,  688,

      814,  814,  365,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  729,  729,  729,  729,
      729,  729,  729,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  366,  366,  366,  366,  366,  367,  368,  368,  368,
      368,  368,  368,  369,  370,  371,  372,  373,  374,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  366,  366,  730,  366,  730,  366,  731,  366,
      731,  366,  732,  366,  733,  366,  734,  734,  366,  734,
      366,  366,  366,  735,  366,  735,  366,  366,  736,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      814,  814,  366,  814,  366,  814,  366,  814,  366,  814,
      366,  814,  366,  814,  366,  366,  814,  366,  814,  814,
      814,  366,  814,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  814,  814,  366,
      814,  366,  814,  366,  814,  366,  814,  366,  814,  366,
      814,  366,  366,  814,  366,  814,  814,  814,  366,  814,

      366,  737,   71,  814,   71,  729,  729,  729,  814,  507,
      507,  507,  507,  507,  507,  507,  814,  738,  738,  738,
      814,  814,  814,  814,  814,  814,  814,  738,  738,  738,
      738,  814,  814,  814,  814,  365,  814,  814,  738,  738,
      738,  738,  738,  738,  213,  213,  213,  814,  814,  814,
      814,  814,  814,  814,  213,  213,  213,  213,  507,  507,
      507,  507,  507,  507,  507,  213,  213,  213,  213,  213,
      213,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      780,  814,  780,  814,  781,  814,  781,  814,  782,  814,
      783,  814,  784,  784,  814,  784,  814,  814,  814,  785,

      814,  785,  814,  814,  366,  366,  366,  366,  366,  367,
      368,  368,  368,  368,  368,  368,  369,  370,  371,  372,
      373,  374,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,   71,  814,

       72,   84,   84,   84,  729,  729,  729,  729,  729,  729,
      729,  814,   83,  814,   83,  814,  814,  507,  507,  507,
      507,  507,  507,  507,  763,   83,  814,   83,  391,  391,
      391,   73,  723,  723,  723,  742,  742,  742,  742,  742,
      742,  814,  213,  213,  213,  213,  814,  814,  814,  814,
      814,  814,  814,  213,  213,  213,  213,  213,  213,  507,
      507,  507,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  507,  507,  507,  507,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  814,  814,  814,  814,  814,
      814,   87,   88,   89,   90,  814,  814,  814,  814,   94,

       74,   74,   74,   74,   74,   75,   76,   76,   76,   76,
       76,   76,   77,   78,   79,   80,   81,   82,   71,  814,
       72,  814,  724,  725,  726,  727,  814,  729,  729,  729,
      728,  507,  507,  507,  507,  507,  507,  507,  814,  814,
      814,  814,  789,  789,  789,  814,  814,  814,  239,  239,
      239,   73,  789,  789,  789,  789,  814,  814,  239,  239,
      239,  239,  814,  789,  789,  789,  789,  789,  789,  239,
      239,  239,  239,  239,  239,  814,  814,  814,  814,  814,
      814,  814,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
       74,   74,   74,   74,   74,   75,   76,   76,   76,   76,
       76,   76,   77,   78,   79,   80,   81,   82,   71,  814,
       72,  814,  814,  814,  814,  814,  814,  814,  814,  391,
      391,  391,  814,  511,  511,  511,  742,  742,  742,  742,
      742,  742,  814,  814,  814,  814,  814,  814,  814,  814,
      814,   73,  391,  391,  391,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  391,  391,  391,  391,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  391,  391,

      391,  814,  814,  814,  814,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  814,  391,  391,  391,  391,  391,
      391,  391,  742,  742,  742,  814,  391,  391,  391,  391,
      391,  391,  391,  814,  814,  814,  814,  814,  814,  814,
       74,   74,   74,  512,  513,  514,  515,   76,   76,   76,
       76,  516,   77,   78,   79,   80,   81,   82,   99,  814,
      814,  578,  578,  578,   99,  742,  742,  742,  742,  742,
      742,  742,  579,  814,  579,  814,  814,  814,  391,  391,
      391,  391,  391,  391,  391,  579,  814,  579,  388,  388,
      388,  241,  814,  814,  814,  650,  650,  650,  388,  388,

      388,  388,  814,  814,  814,  239,  239,  239,  239,  388,
      388,  388,  388,  388,  388,  240,  239,  239,  239,  239,
      239,  239,  814,  814,  239,  239,  239,  814,  814,  814,
      814,  814,  814,  814,  239,  239,  239,  239,  814,  814,
      814,  814,  814,  814,  814,  239,  239,  239,  239,  239,
      239,  580,  581,  582,  583,  814,  814,  814,  814,  584,
      242,  242,  242,  242,  242,  243,  244,  244,  244,  244,
      244,  244,  245,  246,  247,  248,  249,  250,   99,  814,
      814,  814,  814,  814,   99,  651,  652,  653,  654,  814,
      814,  814,  814,  655,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  814,  814,  814,  814,  814,  814,
      814,  241,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  742,  742,  742,  742,  742,
      742,  742,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      242,  242,  242,  242,  242,  243,  244,  244,  244,  244,
      244,  244,  245,  246,  247,  248,  249,  250,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  242,  242,  743,  242,  743,  242,  744,  242,  744,
      242,  745,  242,  746,  242,  747,  747,  242,  747,  242,
      242,  242,  748,  242,  748,  242,  242,  749,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  814,
      814,  242,  814,  242,  814,  242,  814,  242,  814,  242,
      814,  242,  814,  242,  242,  814,  242,  814,  814,  814,
      242,  814,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  814,  814,  242,  814,
      242,  814,  242,  814,  242,  814,  242,  814,  242,  814,

      242,  242,  814,  242,  814,  814,  814,  242,  814,  242,
      750,   99,  213,  213,  213,  814,  814,   99,  814,  814,
      814,  814,  213,  213,  213,  213,  650,  650,  650,  814,
      814,  814,  814,  213,  213,  213,  213,  213,  213,  814,
      814,  814,  814,  814,  241,  507,  507,  507,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  507,  507,
      507,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  507,  507,  507,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  507,  507,  507,  507,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  507,  507,  507,

      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      814,  814,  814,  242,  242,  242,  651,  652,  653,  654,
      244,  244,  244,  244,  655,  245,  246,  247,  248,  249,
      250,   99,  814,  814,  779,  779,  779,   99,  507,  507,
      507,  507,  507,  507,  507,  814,  752,  752,  752,  814,
      814,  814,  814,  814,  814,  814,  752,  752,  752,  752,
      814,  814,  814,  814,  241,  814,  814,  752,  752,  752,
      752,  752,  752,  779,  779,  779,  779,  779,  779,  779,
      814,  814,  814,  814,  814,  814,  507,  507,  507,  507,
      507,  507,  507,  779,  779,  779,  814,  507,  507,  507,

      507,  507,  507,  507,  723,  723,  723,  814,  814,  814,
      814,  814,  814,  814,  213,  213,  213,  213,  814,  814,
      814,  814,  814,  814,  814,  213,  213,  213,  213,  213,
      213,  814,  814,  242,  242,  242,  242,  242,  243,  244,
      244,  244,  244,  244,  244,  245,  246,  247,  248,  249,
      250,  240,  814,  504,  504,  504,  814,  814,  814,  814,
      539,  539,  539,  504,  504,  504,  504,  814,  814,  814,
      239,  239,  239,  239,  504,  504,  504,  504,  504,  504,
      814,  239,  239,  239,  239,  239,  239,  814,  239,  239,
      239,  814,  814,  814,  724,  725,  726,  727,  239,  239,

      239,  239,  728,  814,  682,  682,  682,  814,  814,  239,
      239,  239,  239,  239,  239,  683,  814,  683,  814,  814,
      814,  213,  213,  213,  814,  814,  814,  814,  683,  814,
      683,  213,  213,  213,  213,  814,  814,  814,  814,  814,
      814,  814,  213,  213,  213,  213,  213,  213,  814,  814,
      540,  541,  542,  543,  814,  814,  814,  814,  544,   71,
      814,   72,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,   73,  814,  684,  685,  686,  687,  814,  814,

      814,  814,  688,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,   74,   74,   74,   74,   74,   75,   76,   76,   76,
       76,   76,   76,   77,   78,   79,   80,   81,   82,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  190,  190,  814,  190,  190,  191,  191,  191,
      191,  191,  191,  193,  193,  193,  193,  193,  193,  204,
      204,  204,  206,  206,  206,  206,  206,  206,  209,  814,
      209,  814,  209,  209,  209,  209,  209,  209,  209,  210,
      814,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,   83,   83,  814,   83,   83,  221,  221,  221,  221,
      221,  221,  223,  223,  223,  223,  223,  223,  234,  234,
      234,  236,  236,  236,  236,  236,  236,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  270,  814,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  191,
      191,  191,  191,  191,  191,  363,  363,  363,  363,  363,
      363,  190,  190,  190,  190,  190,  190,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  209,  814,  209,  814,
      209,  209,  209,  209,  209,  209,  209,  210,  814,  210,
      814,  814,  210,  210,  210,  210,  210,  210,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      221,  221,  221,  221,  221,  221,  386,  386,  386,  386,

      386,  386,   83,   83,   83,   83,   83,   83,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  270,  814,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  221,
      221,  221,  221,  221,  221,  223,  223,  223,  223,  223,
      223,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  221,  221,  221,  221,  221,  221,
      223,  223,  223,  223,  223,  223,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  221,
      221,  221,  221,  221,  221,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,    5,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814

    } ;

static yyconst flex_int16_t yy_chk[8892] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,   11,   11,   11,   13,   18,   20,
      311,    3,    4,   10,  311,   10,   22,   36,   20,   18,
      180,   22,   41,   13,   27,   27,   29,   29,   22,   36,
       38,   36,   36,   38,   41,  180,   52,   41,   36,   67,
       46,  316,   38,   46,   67,   38,   10,   39,   21,  339,
       21,   21,   21,  316,   43,   46,   39,   24,   39,   24,
       24,   24,   39,  339,   42,   49,   43,   39,   42,   43,
       24,   24,   24,   24,   42,   42,   52,   49,  315,   42,

       49,  147,  147,   24,   24,   24,  862,   44,   44,  315,
       24,   44,   11,   11,   11,   11,   11,   11,   48,   11,
       11,   11,   11,   44,   48,   44,   62,   62,   62,   62,
       62,  319,   48,   48,  319,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   14,   35,   35,   35,  154,  154,   14,
       21,   21,   21,   21,   45,   45,  170,  170,   21,   24,
       24,   24,   24,  176,   37,   37,   35,   24,  176,   45,
       45,   37,   45,  851,   37,  184,   14,   37,   40,   40,
       37,   35,  184,   47,  327,  186,   40,  186,   40,   47,

       50,   40,  211,  327,   40,  310,   50,  211,   47,   47,
       47,  310,   47,  827,   47,   50,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  317,   35,   35,   35,   35,   35,   35,  817,   35,
       35,   35,   35,  317,  317,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   23,  340,   23,   23,   23,   80,   80,
       80,   80,   80,   80,  334,  340,   23,   23,   23,   23,
      334,   23,   82,   82,   82,   61,   61,   61,   61,   23,

       23,   23,   61,  109,  109,  109,   23,   64,   64,   64,
       64,   64,   64,   64,   64,  351,  351,   23,   92,   92,
       92,   92,   92,   61,  107,  107,  107,  107,  107,  107,
       64,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   87,   87,   87,   87,   87,   87,
       87,   88,   88,   88,   88,   88,   88,   88,   88,   88,
      199,  199,  199,  347,  813,   23,   23,   23,   23,   83,
       83,   83,  347,   23,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   70,

       73,   70,   73,  208,  208,  208,   73,  615,  615,  185,
       91,   91,   91,   91,  318,   73,   73,   91,  318,   94,
       94,   94,   94,   94,   94,   94,   94,  185,  229,  229,
      229,  185,   70,   73,   84,   84,   84,   73,   91,  321,
      323,   73,   94,  238,  238,  238,  321,  314,   73,  314,
      329,   73,  323,   73,   73,  797,  797,   83,   83,   83,
       83,   83,   83,  329,   83,   83,   83,   83,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      117,  117,  117,  117,  117,  117,  117,  250,  250,  250,

      810,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   74,
      348,   74,   84,   84,   84,   84,   84,   84,  348,   84,
       84,   84,   84,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  324,  119,  325,  119,  324,  119,  325,  119,
      332,  119,   74,  119,  332,  119,  119,  338,  119,  267,
      267,  267,  119,  338,  119,  132,  132,  132,  132,  132,
      132,  132,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  812,  812,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   98,  100,

      331,  100,  331,  809,   98,  100,  138,  138,  138,  138,
      138,  138,  138,  543,  100,  100,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  248,  248,  248,  248,  248,
      248,   98,  100,  269,  269,  269,  100,  295,  295,  295,
      100,  335,  328,  116,  116,  116,  335,  100,  328,  543,
      100,  328,  100,  100,  116,  116,  116,  302,  302,  302,
      353,  342,  125,  125,  125,  342,  353,  116,  116,  116,
      304,  304,  304,  125,  125,  125,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  125,  125,  125,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  807,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  101,  337,
      807,  345,  336,  345,  101,  200,  200,  200,  200,  200,
      200,  200,  337,  116,  116,  116,  116,  336,  352,  453,
      446,  116,  352,  453,  131,  446,  131,  131,  131,  341,
      344,  101,  125,  125,  125,  125,  131,  131,  131,  131,
      125,  808,  341,  344,  374,  374,  374,  131,  131,  131,
      131,  131,  131,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  126,  438,  126,  126,  126,  230,  230,  230,
      230,  230,  230,  230,  346,  126,  126,  126,  126,  127,
      438,  127,  127,  127,  449,  455,  346,  449,  126,  126,

      126,  455,  127,  127,  127,  126,  129,  443,  129,  444,
      438,  129,  129,  129,  451,  127,  127,  127,  443,  134,
      444,  134,  129,  134,  129,  134,  451,  134,  452,  134,
      460,  134,  134,  806,  134,  129,  460,  129,  134,  465,
      134,  452,  137,  465,  137,  137,  137,  268,  268,  268,
      268,  268,  268,  268,  458,  137,  137,  137,  137,  425,
      425,  425,  458,  482,  126,  126,  126,  126,  137,  137,
      137,  477,  126,  477,  454,  137,  427,  427,  427,  482,
      805,  127,  127,  127,  127,  433,  433,  433,  454,  127,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      461,  129,  129,  129,  129,  613,  140,  470,  140,  129,
      140,  470,  140,  461,  140,  613,  140,  468,  140,  140,
      464,  140,  435,  435,  435,  140,  192,  140,  192,  192,
      192,  464,  468,  592,  137,  137,  137,  137,  592,  192,
      192,  192,  137,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  192,  192,  192,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  241,  475,  241,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,

      801,  475,  241,  241,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  466,  479,  599,  479,  192,  192,
      192,  192,  599,  254,  241,  466,  192,  213,  241,  213,
      593,  798,  254,  254,  254,  241,  480,  593,  241,  480,
      241,  241,  254,  254,  254,  254,  274,  274,  274,  274,
      274,  274,  274,  254,  254,  254,  254,  254,  254,  261,
      213,  261,  474,  471,  261,  261,  261,  471,  280,  280,
      280,  254,  473,  474,  606,  261,  473,  261,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  261,  606,
      261,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  283,
      283,  283,  283,  283,  283,  283,  501,  501,  501,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  214,  476,  214,
      793,  483,  476,  478,  261,  261,  261,  261,  280,  280,
      280,  280,  261,  483,  478,  486,  280,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  576,  614,  486,  614,
      214,  271,  271,  271,  296,  296,  296,  296,  296,  296,
      296,  594,  271,  271,  271,  273,  576,  273,  587,  792,

      273,  273,  273,  595,  594,  271,  271,  271,  276,  603,
      276,  273,  276,  273,  276,  587,  276,  595,  276,  616,
      276,  276,  603,  276,  273,  773,  273,  276,  616,  276,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  215,  602,  215,
      772,  271,  271,  271,  271,  503,  503,  503,  604,  271,
      602,  597,  215,  215,  215,  562,  562,  562,  597,  604,
      273,  273,  273,  273,  564,  564,  564,  617,  273,  601,

      215,  281,  281,  281,  601,  285,  617,  285,  705,  285,
      705,  285,  281,  285,  281,  285,  716,  285,  285,  716,
      285,  288,  288,  288,  285,  281,  285,  281,  570,  570,
      570,  288,  288,  288,  288,  303,  303,  303,  303,  303,
      303,  303,  288,  288,  288,  288,  288,  288,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  771,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  216,  699,  216,
      769,  281,  281,  281,  281,  572,  572,  572,  699,  281,

      769,  607,  216,  216,  216,  357,  357,  357,  357,  357,
      357,  357,  216,  216,  216,  216,  607,  608,  768,  708,
      216,  708,  608,  216,  216,  216,  216,  216,  216,  710,
      289,  710,  289,  289,  289,  372,  372,  372,  372,  372,
      372,  216,  289,  289,  289,  289,  289,  289,  703,  610,
      625,  625,  625,  289,  289,  289,  289,  289,  289,  627,
      627,  627,  703,  289,  610,  767,  766,  289,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  704,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  217,  704,  217,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  764,
      217,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  308,  308,  308,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  694,  694,  694,  309,  309,  309,  696,
      696,  696,  728,  354,  700,  354,  354,  354,  382,  382,
      382,  382,  382,  382,  382,  719,  354,  354,  354,  308,
      700,  309,  407,  407,  407,  407,  407,  407,  407,  354,

      354,  354,  415,  415,  415,  415,  415,  415,  415,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  218,  776,  218,
      361,  361,  361,  361,  361,  361,  361,  361,  776,  308,
      308,  308,  308,  308,  308,  799,  308,  308,  308,  308,
      711,  799,  711,  361,  309,  309,  309,  309,  309,  309,
      218,  309,  309,  309,  309,  354,  354,  354,  354,  720,
      717,  720,  701,  354,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  701,  759,  759,
      759,  218,  218,  218,  218,  218,  218,  218,  218,  218,

      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  239,  804,  712,  365,  804,  765,  239,
      765,  715,  365,  426,  426,  426,  426,  426,  426,  426,
      712,  365,  365,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  770,  718,  770,  356,  239,  356,  721,  727,
      356,  356,  356,  365,  718,  777,  721,  365,  761,  761,
      761,  356,  714,  356,  365,  777,  774,  365,  774,  365,
      365,  405,  405,  405,  356,  356,  356,  377,  377,  377,
      377,  377,  377,  377,  778,  727,  778,  796,  713,  796,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  434,  434,
      434,  434,  434,  434,  434,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  242,  391,  391,  391,  763,  775,  242,
      356,  356,  356,  356,  391,  391,  391,  391,  356,  811,
      775,  811,  763,  794,  795,  391,  391,  391,  391,  391,
      391,  405,  405,  405,  405,  795,  242,  800,  794,  405,
      803,  709,  707,  391,  397,  397,  397,  397,  397,  397,
      397,  706,  800,  702,  803,  698,  688,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  687,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,

      243,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  251,  401,  401,

      401,  623,  618,  251,  612,  611,  609,  605,  401,  401,
      401,  401,  490,  490,  490,  490,  490,  490,  490,  401,
      401,  401,  401,  401,  401,  600,  598,  596,  591,  590,
      251,  589,  588,  584,  583,  544,  499,  401,  406,  406,
      406,  493,  409,  489,  409,  487,  409,  485,  409,  406,
      409,  406,  409,  484,  409,  409,  481,  409,  472,  469,
      467,  409,  406,  409,  406,  412,  412,  412,  463,  413,
      413,  413,  462,  459,  457,  456,  412,  412,  412,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  450,  412,
      412,  412,  502,  502,  502,  502,  502,  502,  502,  251,

      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  252,  448,  447,
      445,  419,  418,  252,  411,  410,  387,  386,  406,  406,
      406,  406,  252,  252,  252,  385,  406,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  364,  363,  360,
      252,  355,  350,  349,  343,  412,  412,  412,  412,  413,
      413,  413,  413,  412,  333,  330,  326,  413,  414,  414,
      414,  322,  417,  320,  417,  313,  417,  312,  417,  414,
      417,  414,  417,  307,  417,  417,  287,  417,  286,  278,
      277,  417,  414,  417,  414,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  227,  197,  187,  183,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  253,  182,  181,
      179,  178,  177,  253,  494,  494,  494,  494,  494,  494,
      494,  494,  253,  253,  253,  175,  174,  173,  414,  414,
      414,  414,  253,  253,  253,  253,  414,  494,  172,  171,
      253,  169,  167,  253,  253,  253,  253,  253,  253,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  166,  165,
      164,  253,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  527,  527,  527,  527,  527,  527,  527,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  366,  163,  366,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  162,  161,  436,  436,
      436,  160,  159,  158,  157,  156,  155,  366,  436,  436,
      436,  436,  153,  436,  152,  151,  150,  149,  143,  436,
      436,  436,  436,  436,  436,  528,  528,  528,  528,  528,
      528,  528,  142,  436,  141,  136,  135,  121,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  375,  120,
      375,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      115,   90,   68,  375,  375,  375,   60,  437,  437,  437,
      536,  536,  536,  536,  536,  536,  536,  437,  437,  437,
      437,  375,  437,   34,   28,   17,   12,    9,  437,  437,
      437,  437,  437,  437,  439,    7,  439,    5,    0,  439,
      439,  439,  437,  540,  540,  540,  540,  540,  540,  540,
      439,    0,  439,  440,    0,  440,  440,  440,    0,  488,
      488,  488,    0,  439,    0,  439,  440,  440,  440,    0,
      488,    0,  488,    0,    0,    0,    0,    0,    0,  440,
      440,  440,    0,  488,  488,  488,    0,    0,    0,    0,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  376,    0,
      376,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  563,  563,  563,  563,  563,  563,  563,    0,  439,
      439,  439,  439,    0,    0,    0,    0,  439,    0,    0,
        0,  376,    0,    0,    0,  440,  440,  440,  440,  488,
      488,  488,  488,  440,    0,    0,    0,  488,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,    0,    0,
        0,    0,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,    0,
        0,  379,    0,  379,    0,  379,    0,  379,    0,  379,
        0,  379,    0,  379,  379,    0,  379,    0,    0,    0,

      379,    0,  379,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,    0,    0,  380,    0,
      380,    0,  380,    0,  380,    0,  380,    0,  380,    0,
      380,  380,    0,  380,    0,    0,    0,  380,    0,  380,
      380,  381,    0,  381,  523,  523,  523,    0,  523,  523,
      523,  523,  523,  523,  523,    0,  381,  381,  381,  571,
      571,  571,  571,  571,  571,  571,  381,  381,  381,  381,
        0,    0,    0,    0,  381,    0,    0,  381,  381,  381,
      381,  381,  381,  507,  507,  507,  580,  580,  580,  580,
      580,  580,  580,  507,  507,  507,  507,  513,  513,  513,

      513,  513,  513,  513,  507,  507,  507,  507,  507,  507,
      513,  513,  513,  513,  513,  513,  513,  513,  513,    0,
        0,    0,  507,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  626,  626,  626,  626,
      626,  626,  626,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  388,  441,    0,
      441,  441,  441,  388,  524,  524,  524,  524,  524,  524,
      524,  441,  441,  441,  441,    0,    0,  524,  524,  524,
      524,  524,  524,  524,  441,  441,  441,    0,    0,    0,
      388,  441,    0,    0,    0,  495,    0,  495,  495,  495,
      552,  552,  552,  552,  552,  552,  552,    0,  495,  495,
      495,    0,    0,  552,  552,  552,  552,  552,  552,  552,

        0,  495,  495,  495,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      441,  441,  441,  441,    0,    0,    0,    0,  441,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  389,    0,    0,
        0,    0,    0,  389,    0,    0,    0,  495,  495,  495,
      495,    0,  389,  389,  389,  495,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,    0,
      389,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  525,  525,  525,    0,  525,  525,
      525,  525,  525,  525,  525,  526,  526,  526,  636,  636,
      636,  636,  636,  636,  636,  526,  526,  526,  526,  531,
      531,  531,  531,  531,  531,  531,  526,  526,  526,  526,
      526,  526,  531,  531,  531,  531,  531,  531,  531,  531,
      531,    0,    0,    0,  526,    0,    0,    0,    0,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  390,    0,    0,
      551,  551,  551,  390,  551,  551,  551,  551,  551,  551,
      551,    0,  390,  390,  390,  666,  666,  666,  666,  666,

      666,  666,  390,  390,  390,  390,    0,    0,    0,    0,
      390,    0,    0,  390,  390,  390,  390,  390,  390,  539,
      667,  667,  667,  667,  667,  667,  667,    0,  539,  539,
      539,  390,    0,    0,    0,    0,    0,    0,  539,  539,
      539,  539,  541,  541,  541,  541,  541,  541,  541,  539,
      539,  539,  539,  539,  539,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,    0,    0,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  392,  392,  392,

      684,  684,  684,  684,  684,  684,  684,  392,  392,  392,
      392,  695,  695,  695,  695,  695,  695,  695,  392,  392,
      392,  392,  392,  392,  553,  553,  553,    0,  553,  553,
      553,  553,  553,  553,  553,    0,  392,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      395,    0,  554,  554,  554,    0,    0,    0,    0,  395,
      395,  395,  554,  554,  554,  554,    0,    0,    0,  395,
      395,  395,  395,  554,  554,  554,  554,  554,  554,    0,
      395,  395,  395,  395,  395,  395,    0,  542,    0,  542,

        0,  542,    0,  542,    0,  542,    0,  542,  395,  542,
      542,    0,  542,    0,    0,    0,  542,    0,  542,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,    0,  395,
      395,  395,  395,    0,    0,    0,    0,  395,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,    0,    0,  399,
        0,  399,    0,  399,    0,  399,    0,  399,    0,  399,
        0,  399,  399,    0,  399,    0,    0,    0,  399,    0,
      399,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,    0,    0,  400,    0,  400,    0,

      400,    0,  400,    0,  400,    0,  400,    0,  400,  400,
        0,  400,    0,    0,    0,  400,    0,  400,  400,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  504,    0,
      504,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  724,  724,  724,  724,  724,  724,
      724,  504,  558,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  739,  739,  739,  739,  739,  739,  739,    0,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  505,    0,
      505,  568,  568,  568,  568,  568,  568,  568,  568,  568,
        0,    0,    0,  505,  505,  505,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,    0,    0,  730,  730,
      730,  505,  573,  573,  573,  730,  730,  730,  730,  730,
      730,    0,    0,  573,  573,  573,    0,    0,    0,  574,
      574,  574,    0,    0,    0,    0,  573,  573,  573,    0,
      574,    0,  574,    0,    0,  575,    0,  575,    0,    0,
      575,  575,  575,  574,    0,  574,    0,    0,    0,    0,
        0,  575,    0,  575,  577,  577,  577,  740,  740,  740,
      740,  740,  740,  740,  575,    0,  575,    0,    0,    0,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,    0,

      506,    0,  573,  573,  573,  573,    0,    0,    0,    0,
      573,    0,    0,  506,  506,  506,    0,    0,    0,  574,
      574,  574,  574,  506,  506,  506,  506,  574,    0,    0,
        0,  506,    0,    0,  506,  506,  506,  506,  506,  506,
      575,  575,  575,  575,    0,    0,    0,    0,  575,    0,
        0,    0,  506,    0,  577,  577,  577,  577,  578,  578,
      578,    0,  577,    0,    0,    0,    0,    0,    0,  578,
        0,  578,  581,  581,  581,  581,  581,  581,  581,  581,
      581,    0,  578,    0,  578,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,    0,    0,    0,    0,    0,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  508,  508,
      508,    0,    0,    0,    0,  731,  731,  731,  508,  508,
      508,  508,  731,  731,  731,  731,  731,  731,    0,  508,
      508,  508,  508,  508,  508,    0,    0,    0,  578,  578,
      578,  578,    0,    0,    0,    0,  578,  508,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  511,  582,  511,  582,    0,  582,    0,  582,    0,
      582,    0,  582,    0,  582,  582,    0,  582,    0,    0,

        0,  582,    0,  582,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  511,    0,  585,  585,  585,    0,
      649,  649,  649,    0,    0,    0,    0,  586,  586,  586,
      649,  649,  649,  649,    0,    0,    0,  585,  619,  619,
      619,  649,  649,  649,  649,  649,  649,    0,    0,  619,
        0,  619,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  619,    0,  619,  586,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  619,    0,    0,    0,
        0,    0,    0,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  512,    0,  512,  585,  585,  585,  585,  585,  585,
        0,  585,  585,  585,  585,  586,  586,  586,  586,  586,
      586,    0,  586,  586,  586,  586,    0,    0,  619,  619,
      619,  619,    0,    0,  512,    0,  619,  631,  631,  631,
      631,  631,  631,  631,    0,    0,    0,    0,    0,    0,
      631,  631,  631,  631,  631,  631,  631,  631,  631,    0,
        0,    0,    0,    0,    0,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,    0,    0,  515,    0,  515,    0,  515,    0,
      515,    0,  515,    0,  515,    0,  515,  515,    0,  515,
        0,    0,    0,  515,    0,  515,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,    0,
        0,  516,    0,  516,    0,  516,    0,  516,    0,  516,
        0,  516,    0,  516,  516,    0,  516,    0,    0,    0,
      516,    0,  516,  516,  517,    0,  517,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,    0,    0,  517,
      517,  517,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,    0,    0,  517,    0,    0,
        0,    0,  628,    0,  628,  628,  628,    0,    0,    0,
        0,  645,  645,  645,    0,  628,  628,  628,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  628,  628,

      628,  646,  646,  646,  646,  646,  646,  646,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  529,    0,  681,  681,  681,    0,
      529,    0,    0,    0,  628,  628,  628,  628,    0,  529,
      529,  529,  628,  760,  760,  760,  760,  760,  760,  760,
        0,  647,  647,  647,    0,    0,    0,  529,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  652,  652,

      652,  652,  652,  652,  652,    0,    0,    0,    0,    0,
        0,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  681,  681,  681,  681,
        0,    0,    0,    0,  681,    0,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  530,    0,    0,    0,    0,    0,
      530,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  661,  530,  662,  662,
      662,    0,  662,  662,  662,  662,  662,  662,  662,  664,
      664,  664,    0,  664,  664,  664,  664,  664,  664,  664,
        0,    0,    0,    0,    0,    0,    0,    0,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,    0,    0,  533,    0,  533,
        0,  533,    0,  533,    0,  533,    0,  533,    0,  533,
      533,    0,  533,    0,    0,    0,  533,    0,  533,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,    0,    0,  534,    0,  534,    0,  534,    0,
      534,    0,  534,    0,  534,    0,  534,  534,    0,  534,

        0,    0,    0,  534,    0,  534,  534,  535,    0,    0,
      674,  674,  674,  535,  674,  674,  674,  674,  674,  674,
      674,    0,  535,  535,  535,    0,    0,    0,    0,    0,
        0,    0,  535,  535,  535,  535,    0,    0,    0,    0,
      535,    0,    0,  535,  535,  535,  535,  535,  535,  663,
      663,  663,  663,  663,  663,  663,    0,    0,    0,    0,
      668,    0,  663,  663,  663,  663,  663,  663,  663,  668,
      668,  668,    0,    0,    0,    0,  734,  734,  734,  668,
      668,  668,  668,  734,  734,  734,  734,  734,  734,    0,
      668,  668,  668,  668,  668,  668,  669,  669,  669,  669,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,

      538,  538,  538,  545,    0,  678,  678,  678,    0,    0,
        0,    0,  545,  545,  545,  678,  678,  678,  678,    0,
        0,    0,  545,  545,  545,  545,  678,  678,  678,  678,
      678,  678,    0,  545,  545,  545,  545,  545,  545,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  676,  676,  676,    0,  676,  676,  676,  676,  676,

      676,  676,  545,  545,  545,  545,    0,    0,    0,    0,
      545,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  629,
        0,  629,    0,    0,  675,  675,  675,  675,  675,  675,
      675,    0,    0,    0,  629,  629,  629,  675,  675,  675,
      675,  675,  675,  675,    0,    0,    0,    0,    0,    0,
        0,    0,  629,  679,  679,  679,    0,  680,  680,  680,
        0,    0,    0,    0,  679,    0,  679,    0,  680,    0,

      680,  682,  682,  682,    0,    0,    0,  679,    0,  679,
        0,  680,  682,  680,  682,    0,  686,    0,  686,    0,
      686,    0,  686,    0,  686,  682,  686,  682,  686,  686,
        0,  686,    0,    0,    0,  686,    0,  686,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,    0,    0,
        0,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  630,
        0,  630,    0,  679,  679,  679,  679,  680,  680,  680,
      680,  679,    0,    0,    0,  680,    0,    0,    0,    0,
        0,  682,  682,  682,  682,    0,    0,    0,    0,  682,

        0,    0,  630,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
        0,    0,  633,    0,  633,    0,  633,    0,  633,    0,
      633,    0,  633,    0,  633,  633,    0,  633,    0,    0,
        0,  633,    0,  633,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,    0,    0,  634,
        0,  634,    0,  634,    0,  634,    0,  634,    0,  634,
        0,  634,  634,    0,  634,    0,    0,    0,  634,    0,

      634,  634,  635,    0,  635,  735,  735,  735,    0,  735,
      735,  735,  735,  735,  735,  735,    0,  635,  635,  635,
        0,    0,    0,    0,    0,    0,    0,  635,  635,  635,
      635,    0,    0,    0,    0,  635,    0,    0,  635,  635,
      635,  635,  635,  635,  723,  723,  723,    0,    0,    0,
        0,    0,    0,    0,  723,  723,  723,  723,  725,  725,
      725,  725,  725,  725,  725,  723,  723,  723,  723,  723,
      723,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      726,    0,  726,    0,  726,    0,  726,    0,  726,    0,
      726,    0,  726,  726,    0,  726,    0,    0,    0,  726,

        0,  726,    0,    0,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  639,    0,

      639,  697,  697,  697,  736,  736,  736,  736,  736,  736,
      736,    0,  697,    0,  697,    0,    0,  736,  736,  736,
      736,  736,  736,  736,  697,  697,    0,  697,  743,  743,
      743,  639,  729,  729,  729,  743,  743,  743,  743,  743,
      743,    0,  729,  729,  729,  729,    0,    0,    0,    0,
        0,    0,    0,  729,  729,  729,  729,  729,  729,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,    0,    0,    0,    0,    0,
        0,  697,  697,  697,  697,    0,    0,    0,    0,  697,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  640,    0,
      640,    0,  729,  729,  729,  729,    0,  737,  737,  737,
      729,  737,  737,  737,  737,  737,  737,  737,    0,    0,
        0,    0,  738,  738,  738,    0,    0,    0,  742,  742,
      742,  640,  738,  738,  738,  738,    0,    0,  742,  742,
      742,  742,    0,  738,  738,  738,  738,  738,  738,  742,
      742,  742,  742,  742,  742,    0,    0,    0,    0,    0,
        0,    0,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  648,    0,
      648,    0,    0,    0,    0,    0,    0,    0,    0,  744,
      744,  744,    0,  648,  648,  648,  744,  744,  744,  744,
      744,  744,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  648,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  747,  747,

      747,    0,    0,    0,    0,  747,  747,  747,  747,  747,
      747,  748,  748,  748,    0,  748,  748,  748,  748,  748,
      748,  748,  750,  750,  750,    0,  750,  750,  750,  750,
      750,  750,  750,    0,    0,    0,    0,    0,    0,    0,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  650,    0,
        0,  762,  762,  762,  650,  749,  749,  749,  749,  749,
      749,  749,  762,    0,  762,    0,    0,    0,  749,  749,
      749,  749,  749,  749,  749,  762,    0,  762,  752,  752,
      752,  650,    0,    0,    0,  751,  751,  751,  752,  752,

      752,  752,    0,    0,    0,  751,  751,  751,  751,  752,
      752,  752,  752,  752,  752,  753,  751,  751,  751,  751,
      751,  751,    0,    0,  753,  753,  753,    0,    0,    0,
        0,    0,    0,    0,  753,  753,  753,  753,    0,    0,
        0,    0,    0,    0,    0,  753,  753,  753,  753,  753,
      753,  762,  762,  762,  762,    0,    0,    0,    0,  762,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  651,    0,
        0,    0,    0,    0,  651,  751,  751,  751,  751,    0,
        0,    0,    0,  751,  754,  754,  754,  754,  754,  754,

      754,  754,  754,  754,    0,    0,    0,    0,    0,    0,
        0,  651,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  653,  653,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,    0,
        0,  654,    0,  654,    0,  654,    0,  654,    0,  654,
        0,  654,    0,  654,  654,    0,  654,    0,    0,    0,
      654,    0,  654,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,    0,    0,  655,    0,
      655,    0,  655,    0,  655,    0,  655,    0,  655,    0,

      655,  655,    0,  655,    0,    0,    0,  655,    0,  655,
      655,  656,  779,  779,  779,    0,    0,  656,    0,    0,
        0,    0,  779,  779,  779,  779,  656,  656,  656,    0,
        0,    0,    0,  779,  779,  779,  779,  779,  779,    0,
        0,    0,    0,    0,  656,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
        0,    0,    0,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  665,    0,    0,  785,  785,  785,  665,  785,  785,
      785,  785,  785,  785,  785,    0,  665,  665,  665,    0,
        0,    0,    0,    0,    0,    0,  665,  665,  665,  665,
        0,    0,    0,    0,  665,    0,    0,  665,  665,  665,
      665,  665,  665,  786,  786,  786,  786,  786,  786,  786,
        0,    0,    0,    0,    0,    0,  786,  786,  786,  786,
      786,  786,  786,  787,  787,  787,    0,  787,  787,  787,

      787,  787,  787,  787,  788,  788,  788,    0,    0,    0,
        0,    0,    0,    0,  788,  788,  788,  788,    0,    0,
        0,    0,    0,    0,    0,  788,  788,  788,  788,  788,
      788,    0,    0,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  677,    0,  789,  789,  789,    0,    0,    0,    0,
      677,  677,  677,  789,  789,  789,  789,    0,    0,    0,
      677,  677,  677,  677,  789,  789,  789,  789,  789,  789,
        0,  677,  677,  677,  677,  677,  677,    0,  790,  790,
      790,    0,    0,    0,  788,  788,  788,  788,  790,  790,

      790,  790,  788,    0,  791,  791,  791,    0,    0,  790,
      790,  790,  790,  790,  790,  791,    0,  791,    0,    0,
        0,  802,  802,  802,    0,    0,    0,    0,  791,    0,
      791,  802,  802,  802,  802,    0,    0,    0,    0,    0,
        0,    0,  802,  802,  802,  802,  802,  802,    0,    0,
      677,  677,  677,  677,    0,    0,    0,    0,  677,  741,
        0,  741,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  741,    0,  791,  791,  791,  791,    0,    0,

        0,    0,  791,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,

      816,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  819,  819,    0,  819,  819,  820,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  821,  822,
      822,  822,  823,  823,  823,  823,  823,  823,  824,    0,
      824,    0,  824,  824,  824,  824,  824,  824,  824,  825,
        0,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  828,  828,    0,  828,  828,  829,  829,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  831,  831,
      831,  832,  832,  832,  832,  832,  832,  833,  833,  833,

      833,  833,  833,  833,  833,  833,  833,  833,  834,    0,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  835,
      835,  835,  835,  835,  835,  836,  836,  836,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  838,  838,  838,
      838,  838,  838,  839,  839,  839,  840,    0,  840,    0,
      840,  840,  840,  840,  840,  840,  840,  841,    0,  841,
        0,    0,  841,  841,  841,  841,  841,  841,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      844,  844,  844,  844,  844,  844,  845,  845,  845,  845,

      845,  845,  846,  846,  846,  846,  846,  846,  847,  847,
      847,  847,  847,  847,  848,  848,  848,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  850,    0,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  852,
      852,  852,  852,  852,  852,  853,  853,  853,  853,  853,
      853,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  857,  857,  857,  857,  857,  857,
      858,  858,  858,  858,  858,  858,  859,  859,  859,  859,

      859,  859,  859,  859,  859,  859,  859,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  863,
      863,  863,  863,  863,  863,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "java_lexer.ll"
#line 2 "java_lexer.ll"
/*****************************************************************************
 * Copyright (c) 2005, 2006 Jakob Petsovits <jpetso@gmx.at>                  *
 *                                                                           *
 * This program is free software; you can redistribute it and/or             *
 * modify it under the terms of the GNU Library General Public               *
 * License as published by the Free Software Foundation; either              *
 * version 2 of the License, or (at your option) any later version.          *
 *                                                                           *
 * This grammar is distributed in the hope that it will be useful,           *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Lesser General Public License for more details.                           *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public License *
 * along with this library; see the file COPYING.LIB.  If not, write to      *
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,      *
 * Boston, MA 02110-1301, USA.                                               *
 *****************************************************************************/
#line 28 "java_lexer.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "java_lexer.h"

/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* \u0024, \u0041-\u005a, \u005f, \u0061-\u007a: one byte in UTF-8 */
/* \u00c0-\u00d6, \u00d8-\u00f6, \u00f8-\u00ff */
/* \u0100-\u1fff */
/* \u3040-\u318f */
/* \u3300-\u337f */
/* \u3400-\u3d2d */
/* \u4e00-\u9fff */
/* \uf900-\ufaff */
/* \u0030-\u0039: ISO-LATIN-1 digits */
/* \u0660-\u0669, \u06f0-\u06f9: Arabic-Indic and extended Ar.-Indic digits */
/* \u0966-\u096f, \u09e6-\u09ef: Devanagari digits */
/* \u0a66-\u0a6f, \u0ae6-\u0aef */
/* \u0b66-\u0b6f, \u0be7-\u0bef */
/* \u0c66-\u0c6f, \u0ce6-\u0cef, \u0d66-\u0d6f */
/* \u0e50-\u0e59, \u0ed0-\u0ed9 */
/* \u1040-\u1049 */
/* \uff10-\uff19: Fullwidth digits */
/* \u0080-\uffff */
/* \u10000-\u1fffff */
/* \u200000-\u3ffffff */
/* \u4000000-\u7fffffff */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* non-Unicode stuff */

#line 2699 "java_lexer.cpp"

#define INITIAL 0
#define IN_BLOCKCOMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 123 "java_lexer.ll"


 /* whitespace, newlines and comments */

#line 2805 "java_lexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 815 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8769 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 127 "java_lexer.ll"
/* skip */ ;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 128 "java_lexer.ll"
/* skip */ ;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "java_lexer.ll"
/* line comments, skip */ ;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 132 "java_lexer.ll"
BEGIN(IN_BLOCKCOMMENT);
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 134 "java_lexer.ll"
/* eat anything that's not a '*' */ ;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 135 "java_lexer.ll"
/* eat up '*'s that are not followed by slashes or newlines */;
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 136 "java_lexer.ll"
/* skip */ ;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 137 "java_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(IN_BLOCKCOMMENT):
#line 138 "java_lexer.ll"
{
    m_parser->report_problem( parser::error,
        "Encountered end of file in an unclosed block comment" );
    return parser::Token_EOF;
}
	YY_BREAK

/* seperators */
case 9:
YY_RULE_SETUP
#line 148 "java_lexer.ll"
return parser::Token_LPAREN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 149 "java_lexer.ll"
return parser::Token_RPAREN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "java_lexer.ll"
return parser::Token_LBRACE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 151 "java_lexer.ll"
return parser::Token_RBRACE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 152 "java_lexer.ll"
return parser::Token_LBRACKET;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 153 "java_lexer.ll"
return parser::Token_RBRACKET;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 154 "java_lexer.ll"
return parser::Token_COMMA;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 155 "java_lexer.ll"
return parser::Token_SEMICOLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 156 "java_lexer.ll"
return parser::Token_DOT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 157 "java_lexer.ll"
{
    if (m_parser->compatibility_mode() >= parser::java15_compatibility)
        return parser::Token_AT;
    else {
        m_parser->report_problem( parser::error,
            "Annotations are not supported by Java 1.4 or earlier" );
        return parser::Token_INVALID;
    }
}
	YY_BREAK
/* operators */
case 19:
YY_RULE_SETUP
#line 170 "java_lexer.ll"
return parser::Token_QUESTION;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 171 "java_lexer.ll"
return parser::Token_COLON;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 172 "java_lexer.ll"
return parser::Token_BANG;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 173 "java_lexer.ll"
return parser::Token_TILDE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 174 "java_lexer.ll"
return parser::Token_EQUAL;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 175 "java_lexer.ll"
return parser::Token_LESS_THAN;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 176 "java_lexer.ll"
return parser::Token_LESS_EQUAL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 177 "java_lexer.ll"
return parser::Token_GREATER_THAN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 178 "java_lexer.ll"
return parser::Token_GREATER_EQUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 179 "java_lexer.ll"
return parser::Token_NOT_EQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 180 "java_lexer.ll"
return parser::Token_LOG_AND;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 181 "java_lexer.ll"
return parser::Token_LOG_OR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 182 "java_lexer.ll"
return parser::Token_INCREMENT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 183 "java_lexer.ll"
return parser::Token_DECREMENT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 184 "java_lexer.ll"
return parser::Token_ASSIGN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 185 "java_lexer.ll"
return parser::Token_PLUS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 186 "java_lexer.ll"
return parser::Token_PLUS_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 187 "java_lexer.ll"
return parser::Token_MINUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 188 "java_lexer.ll"
return parser::Token_MINUS_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 189 "java_lexer.ll"
return parser::Token_STAR;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 190 "java_lexer.ll"
return parser::Token_STAR_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 191 "java_lexer.ll"
return parser::Token_SLASH;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 192 "java_lexer.ll"
return parser::Token_SLASH_ASSIGN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 193 "java_lexer.ll"
return parser::Token_BIT_AND;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 194 "java_lexer.ll"
return parser::Token_BIT_AND_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 195 "java_lexer.ll"
return parser::Token_BIT_OR;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 196 "java_lexer.ll"
return parser::Token_BIT_OR_ASSIGN;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 197 "java_lexer.ll"
return parser::Token_BIT_XOR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 198 "java_lexer.ll"
return parser::Token_BIT_XOR_ASSIGN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 199 "java_lexer.ll"
return parser::Token_REMAINDER;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 200 "java_lexer.ll"
return parser::Token_REMAINDER_ASSIGN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 201 "java_lexer.ll"
return parser::Token_LSHIFT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 202 "java_lexer.ll"
return parser::Token_LSHIFT_ASSIGN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 203 "java_lexer.ll"
return parser::Token_SIGNED_RSHIFT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 204 "java_lexer.ll"
return parser::Token_SIGNED_RSHIFT_ASSIGN;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 205 "java_lexer.ll"
return parser::Token_UNSIGNED_RSHIFT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 206 "java_lexer.ll"
return parser::Token_UNSIGNED_RSHIFT_ASSIGN;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 207 "java_lexer.ll"
{
    if ( m_parser->compatibility_mode() >= parser::java15_compatibility )
        return parser::Token_ELLIPSIS;
    else {
        m_parser->report_problem( parser::error,
            "Variable-length argument lists are "
            "not supported by Java 1.4 or earlier" );
        return parser::Token_INVALID;
    }
}
	YY_BREAK
/* reserved words */
case 57:
YY_RULE_SETUP
#line 221 "java_lexer.ll"
return parser::Token_ABSTRACT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 222 "java_lexer.ll"
{
    if ( m_parser->compatibility_mode() >= parser::java14_compatibility )
        return parser::Token_ASSERT;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 228 "java_lexer.ll"
return parser::Token_BOOLEAN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 229 "java_lexer.ll"
return parser::Token_BREAK;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 230 "java_lexer.ll"
return parser::Token_BYTE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 231 "java_lexer.ll"
return parser::Token_CASE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 232 "java_lexer.ll"
return parser::Token_CATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 233 "java_lexer.ll"
return parser::Token_CHAR;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 234 "java_lexer.ll"
return parser::Token_CLASS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 235 "java_lexer.ll"
{
    m_parser->report_problem( parser::error,
        "\"const\": reserved but unused (invalid) keyword" );
    return parser::Token_CONST;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 240 "java_lexer.ll"
return parser::Token_CONTINUE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 241 "java_lexer.ll"
return parser::Token_DEFAULT;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 242 "java_lexer.ll"
return parser::Token_DO;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 243 "java_lexer.ll"
return parser::Token_DOUBLE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 244 "java_lexer.ll"
return parser::Token_ELSE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 245 "java_lexer.ll"
{
    if ( m_parser->compatibility_mode() >= parser::java15_compatibility )
        return parser::Token_ENUM;
    else
        return parser::Token_IDENTIFIER;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 251 "java_lexer.ll"
return parser::Token_EXTENDS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 252 "java_lexer.ll"
return parser::Token_FALSE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 253 "java_lexer.ll"
return parser::Token_FINAL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 254 "java_lexer.ll"
return parser::Token_FINALLY;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 255 "java_lexer.ll"
return parser::Token_FLOAT;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 256 "java_lexer.ll"
return parser::Token_FOR;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 257 "java_lexer.ll"
{
    m_parser->report_problem( parser::error,
        "\"goto\": reserved but unused (invalid) keyword" );
    return parser::Token_GOTO;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 262 "java_lexer.ll"
return parser::Token_IF;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 263 "java_lexer.ll"
return parser::Token_IMPLEMENTS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 264 "java_lexer.ll"
return parser::Token_IMPORT;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 265 "java_lexer.ll"
return parser::Token_INSTANCEOF;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 266 "java_lexer.ll"
return parser::Token_INT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 267 "java_lexer.ll"
return parser::Token_INTERFACE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 268 "java_lexer.ll"
return parser::Token_LONG;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 269 "java_lexer.ll"
return parser::Token_NATIVE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 270 "java_lexer.ll"
return parser::Token_NEW;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 271 "java_lexer.ll"
return parser::Token_NULL;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 272 "java_lexer.ll"
return parser::Token_PACKAGE;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 273 "java_lexer.ll"
return parser::Token_PRIVATE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 274 "java_lexer.ll"
return parser::Token_PROTECTED;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 275 "java_lexer.ll"
return parser::Token_PUBLIC;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 276 "java_lexer.ll"
return parser::Token_RETURN;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 277 "java_lexer.ll"
return parser::Token_SHORT;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 278 "java_lexer.ll"
return parser::Token_STATIC;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 279 "java_lexer.ll"
return parser::Token_STRICTFP;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 280 "java_lexer.ll"
return parser::Token_SUPER;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 281 "java_lexer.ll"
return parser::Token_SWITCH;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 282 "java_lexer.ll"
return parser::Token_SYNCHRONIZED;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 283 "java_lexer.ll"
return parser::Token_THIS;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 284 "java_lexer.ll"
return parser::Token_THROW;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 285 "java_lexer.ll"
return parser::Token_THROWS;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 286 "java_lexer.ll"
return parser::Token_TRANSIENT;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 287 "java_lexer.ll"
return parser::Token_TRUE;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 288 "java_lexer.ll"
return parser::Token_TRY;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 289 "java_lexer.ll"
return parser::Token_VOID;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 290 "java_lexer.ll"
return parser::Token_VOLATILE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 291 "java_lexer.ll"
return parser::Token_WHILE;
	YY_BREAK
/* characters and strings */
case 110:
YY_RULE_SETUP
#line 296 "java_lexer.ll"
return parser::Token_CHARACTER_LITERAL;
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 297 "java_lexer.ll"
{
    m_parser->report_problem( parser::error,
        std::string("Invalid character literal: ") + yytext );
    return parser::Token_CHARACTER_LITERAL;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 303 "java_lexer.ll"
return parser::Token_STRING_LITERAL;
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 304 "java_lexer.ll"
{
    m_parser->report_problem( parser::error,
        std::string("Invalid string literal: ") + yytext );
    return parser::Token_STRING_LITERAL;
}
	YY_BREAK
/* identifiers and number literals */
case 114:
YY_RULE_SETUP
#line 313 "java_lexer.ll"
return parser::Token_IDENTIFIER;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 315 "java_lexer.ll"
return parser::Token_INTEGER_LITERAL;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 316 "java_lexer.ll"
return parser::Token_FLOATING_POINT_LITERAL;
	YY_BREAK
/* everything else is not a valid lexeme */
case 117:
YY_RULE_SETUP
#line 321 "java_lexer.ll"
return parser::Token_INVALID;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 323 "java_lexer.ll"
ECHO;
	YY_BREAK
#line 3541 "java_lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 815 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 815 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 814);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 323 "java_lexer.ll"



namespace java
{

Lexer::Lexer( parser *parser, char *contents )
{
    restart( parser, contents );
}

void Lexer::restart( parser *parser, char *contents )
{
    m_parser = parser;
    m_locationTable = parser->token_stream->location_table();
    m_contents = contents;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;

    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':
        m_locationTable->newline( m_currentOffset );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

} // end of namespace java


